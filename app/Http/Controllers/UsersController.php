<?php

namespace App\Http\Controllers;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use Cookie;
use Session;
use Redirect;
use Input;
use Validator;
use DB;
use Mail;
use App\Mail\SendMailable;
use Socialite;
use App\User;
use App\Referalcode;
use App\Card;
use App\Transaction;
use App\Recipient;
use App\Fee;
use App\Account;
use App\Agent;
use App\Otp;
use App\Notification;
use App\ReferralCommission;
use App\Tempuser;
use App\Support;
use App\WithdrawRequest;
use App\InactiveAmount;
use App\Walletlimit;
use App\CryptoDeposit;
use App\CryptoWithdraw;
use App\InvitedUser;
use App\ManualDeposit;
use App\Contact;
use App\DailyRate;
use App\WithdrawAccount;
use App\AgentsTransactionLimit;
use App\Agentlimit;
use App\ManualWithdraw;
use App\Models\Image;
use App\Models\Country;
use App\Models\Ngnexchange;
use App\Models\StripePaymentLink;
use App\Models\MerchantPaymentLink;
use App\Models\CryptoCurrency;
use App\Models\GiftCard;
use App\Models\WalletLimitUser;
use App\Models\GiftAirtimeSetting;
use App\Admin;
use App\Beneficiary;
use PDF;
use GuzzleHttp;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Stream\Stream;
use GuzzleHttp\Psr7;
use DateTime;
use Illuminate\Support\Facades\Crypt;
use Ramsey\Uuid\Uuid;
use gnupg;
use Stripe;
use Stripe\WebhookEndpoint;
use GuzzleHttp\Client;


class UsersController extends Controller {

    public function __construct() {
        parent::__construct();
        $this->middleware('userlogedin', ['only' => ['webhook', 'otpVerify', 'test', 'resentOtp', 'resentVerifyOtp', 'personalRegister', 'personalVerify', 'personalKycVerify', 'businessRegister', 'businessVerify', 'businessKycVerify', 'personalLogin', 'businessLogin', 'forgotPassword', 'resetPassword', 'register', 'verify']]);

        $this->middleware('is_userlogin', ['except' => ['webhook', 'otpVerify', 'test', 'resentOtp', 'resentVerifyOtp', 'logout', 'chooseAccount', 'personalLogin', 'businessLogin', 'personalRegister', 'personalVerify', 'personalKycVerify', 'businessKycVerify', 'businessRegister', 'businessVerify', 'forgotPassword', 'resetPassword', 'register', 'verify', 'emailConfirmation','payment','checkAccountLink','afetrPaymentComplete','merchantPayment','verifyEmail']]);    
    }

    public function referralDetail()
    {
    $pageTitle = 'Affiliated Accounts';
    $input = Input::all();
    if (isset($input['refid'])) {
    $refId = $input['refid'];
    }
    elseif (isset($input['refId'])) {
    $refId = $input['refId'];
    }

    //to find out all the users which linked to this ref id
    $ref_user=User::where('referral',$refId)->orderBy('id','desc')->get();
    return view('users.referralDetail', ['title' => $pageTitle, 'allrecords' => $ref_user]);

    }


    public function chooseAccount() {
        $pageTitle = 'Choose Account';
        $input = Input::all();
        if (isset($input['refid'])) {
            $refId = $input['refid'];
        }
        elseif (isset($input['refId'])) {
            $refId = $input['refId'];
        }
        else {
            $refId = '';
        }

        if (isset($input['pid'])) {
            $pid = $input['pid'];
        }
        else{
         $pid='';   
        }
        return view('users.chooseAccount', ['title' => $pageTitle, 'refID' => $refId, 'pid' => $pid]);
    }

    public function resentOtp(Request $request) {
        if (!empty($request->has('phone'))) {
            $otp = mt_rand(100000, 999999);
            $verifyCode = $this->encpassword($otp);
            Tempuser::where('id', $request->user_id)->update(['verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s')]);
            $userInfo = Tempuser::where('id', $request->user_id)->first();

            $id = TWILIO_ID;
            $token = TWILIO_TOKEN;
            $url = "https://free.twilio.com/2010-04-01/Accounts/$id/SMS/Messages";
            $from = TWILIO_NUMBER;
            $to = $request->phone;
            //$body = 'Dear User, Use '.$otp.' to verify your phone number.';
            $body = 'Dear Customer, ' . $otp . ' is your One Time Password to authenticate your login to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.';
            $data = array(
                'From' => $from,
                'To' => $to,
                'Body' => $body,
            );
            $post = http_build_query($data);
            //            echo '<pre>';print_r($post);exit;
            $x = curl_init($url);
            curl_setopt($x, CURLOPT_POST, true);
            curl_setopt($x, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($x, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($x, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
            curl_setopt($x, CURLOPT_USERPWD, "$id:$token");
            curl_setopt($x, CURLOPT_POSTFIELDS, $post);
            $y = curl_exec($x);
            curl_close($x);

            $emailId = $userInfo->email;
            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> Customer,</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">' . $otp . ' is your One Time Password to authenticate your login to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
            $emailSubject = "DafriBank Digital - OTP Requested";
//            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

            $emailData['subject'] = $emailSubject;
            if ($userInfo->user_type == 'Business') {
                $emailData['userName'] = strtoupper(trim($userInfo->business_name));
            } else {
                $emailData['userName'] = strtoupper(trim($userInfo->first_name) . ' ' . trim($userInfo->last_name));
            }

            $emailData['otp'] = $otp;

            Mail::send('emails.registerOTP', $emailData, function ($message)use ($emailData, $emailId) {
                $message->to($emailId, $emailId)
                        ->subject($emailData['subject']);
            });
//            echo '<pre>';print_r($y);exit;
            echo 1;
            //echo $y.' Phone: '.$request->phone;
            exit;
        }
    }

    public function resentVerifyOtp(Request $request) {
        if (!empty($request->has('phone'))) {
            $otp = mt_rand(100000, 999999);
            $verifyCode = $this->encpassword($otp);
            User::where('id', $request->user_id)->update(['verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s')]);
            $userInfo = User::where('id', $request->user_id)->first();

            $emailId = $userInfo->email;
            $emailSubject = 'DafriBank Digital - OTP Requested';

            $emailData['subject'] = $emailSubject;
            
            if ($userInfo->user_type == 'Personal') {
            $emailData['userName'] = strtoupper(trim($userInfo->first_name) . ' ' . trim($userInfo->last_name));
            }
            elseif ($userInfo->user_type == 'Business') {
            $emailData['userName'] = strtoupper(trim($userInfo->business_name));
            }
            else if ($userInfo->user_type == 'Agent' && $userInfo->first_name == "") {
            $emailData['userName'] = strtoupper(trim($userInfo->business_name));
            }
            else if ($userInfo->user_type == 'Agent' && $userInfo->first_name != "") {
            $emailData['userName'] = strtoupper(trim($userInfo->first_name) . ' ' . trim($userInfo->last_name));
            }


            $id = TWILIO_ID;
            $token = TWILIO_TOKEN;
            $url = "https://free.twilio.com/2010-04-01/Accounts/$id/SMS/Messages";
            $from = TWILIO_NUMBER;
            $to = $request->phone;
            //$body = 'Dear User, Use '.$otp.' to verify your phone number.';
            $body = 'Dear Customer, ' . $otp . ' is your One Time Password to authenticate your login to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.';
            $data = array(
                'From' => $from,
                'To' => $to,
                'Body' => $body,
            );
            $post = http_build_query($data);
            //            echo '<pre>';print_r($post);exit;
            $x = curl_init($url);
            curl_setopt($x, CURLOPT_POST, true);
            curl_setopt($x, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($x, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($x, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
            curl_setopt($x, CURLOPT_USERPWD, "$id:$token");
            curl_setopt($x, CURLOPT_POSTFIELDS, $post);
            $y = curl_exec($x);
            curl_close($x);

//            $otp = mt_rand(100000, 999999);
//            $verifyCode = $this->encpassword($otp);
            $emailData['otp'] = $otp;

            User::where('id', $userInfo->id)->update(array('verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s')));

            Mail::send('emails.loginOTP', $emailData, function ($message)use ($emailData, $emailId) {
                $message->to($emailId, $emailId)
                        ->subject($emailData['subject']);
            });
//            echo '<pre>';print_r($y);exit;
            echo 1;
            //echo $y.' Phone: '.$request->phone;
            exit;
        }
    }

    public function personalRegister() {
        //DB::enableQueryLog();
        ini_set('memory_limit', -1);
        $pageTitle = 'Personal Account Registration';

        $countrList = Country::getCountryList();

        $input = Input::all();
        //echo "Count: ".Count($input); exit;
        if (!empty($input) && Count($input) > 2) {
            $rules = array(
                'first_name' => 'required|max:50',
                'last_name' => 'required',
                'email' => 'required|email',
                'phone' => 'required',
                'addrs_line1' => 'required',
                'country_id' => 'required',
                'currency' => 'required',
                'password' => 'required|min:8',
                'confirm_password' => 'required|same:password'
            );
            $customMessages = [
                'country_id.required' => 'The country field is required field.',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('/personal-account-registration')->withInput(Input::except('password'));
//                return Redirect::to('/personal-account-registration')->withErrors($validator)->withInput(Input::except('password'));
            } else {
                $user_id = 0;
                $userInfo = User::where('email', $input['email'])->first();
                if ($userInfo) {
                    Session::put('error_session_message', 'Email address already registered, please login.');
                    return Redirect::to('/personal-account-registration')->withInput(Input::except('password'));
//                    return Redirect::to('/personal-account-registration')->withErrors('Email address already registered, please login.');

                    /* if($userInfo->user_type != 'Personal'){
                      return Redirect::to('/personal-account-registration')->withErrors('Email address already registered as business account.');
                      } */

                    /* if($userInfo->is_verify == 1 || $userInfo->status == 1){
                      return Redirect::to('/personal-account-registration')->withErrors('Email address already registered, please login.');
                      } else {
                      $user_id = $userInfo->id;
                      } */
                }

                $isPhoneExists = User::where('phone', $input['phone'])->first();
                if (!empty($isPhoneExists)) {
                    Session::put('error_session_message', 'Phone number already registered, please login.');
                    return Redirect::to('/personal-account-registration')->withInput(Input::except('password'));
//                    return Redirect::to('/personal-account-registration')->withErrors('Phone number already registered, please login.');
                }
        
 
                $input['country'] = ucfirst(trim($input['country_id']));
                unset($input['country_id']);
                $input['country_code'] = ucfirst(trim($input['contryCode']));
                unset($input['contryCode']);
                unset($input['terms']);

                $input['first_name'] = ucfirst(strtolower(trim($input['first_name'])));
                $input['last_name'] = ucfirst(strtolower(trim($input['last_name'])));

                  //to explode referral link
                  if($input['referral']!="")
                  {  
                  $link=HTTP_PATH.'/choose-account?refid='.$input['referral'];   
                  $ref_link=explode(HTTP_PATH.'/choose-account?',$link);
                  if($ref_link[0]=="")
                  {
                  $ref_slug=preg_split( '/(refId=|refid=|&pid=)/',$ref_link['1']);
                  $ref_slug_string='refid='.$ref_slug['1'];
                  $ref_exist_count=Referalcode::where('referal_link',$ref_slug_string)->first();
                  if(isset($ref_exist_count->id))
                  {
                  $input['referral']=explode("refid=",$ref_exist_count->referal_link)[1]; 
                  $input['parent_id']=$ref_exist_count->user_id;   
                  }
                  else{
                  Session::put('error_session_message', 'Please provide a valid referral code');
                  return Redirect::to('/personal-account-registration')->withInput(Input::except('password'));   
                  }
                  }
                  else{
                  Session::put('error_session_message', 'Please provide a valid referral code');
                  return Redirect::to('/personal-account-registration')->withInput(Input::except('password'));  
                  }
                  }
                  else{
                  $input['referral']='na'; 
                  $input['parent_id']='0'; 
                  }

                $input['password'] = trim($input['password']);
                $serialisedData = $this->serialiseFormData($input);

                $serialisedData['status'] = 0;
                $serialisedData['is_verify'] = 0;
                $serialisedData['user_type'] = 'Personal';
                $serialisedData['account_category'] = 'Silver';
                $serialisedData['password'] = $this->encpassword($input['password']);

                $otp = mt_rand(100000, 999999);
                $verifyCode = $this->encpassword($otp);
                //$verifyCode = $this->encpassword(100000);
                $serialisedData['verify_code'] = $verifyCode;
                $serialisedData['otp_time'] = date('Y-m-d H:i:s');

                if ($user_id > 0) {
                    $slug = $userInfo->slug;
//                    $accNum1 = time();
//                    $uidLength = 10 - strlen($user_id);
//                    $uniqNum = $this->generateRandomNumber($uidLength);
//                    $accountNumber = $uniqNum . ($user_id);
                    $accountNumber = $this->genrateAccNumber();
                    $serialisedData['account_number'] = $accountNumber;
                    User::where('id', $user_id)->update($serialisedData);
                    $id = TWILIO_ID;
                    $token = TWILIO_TOKEN;
                    $url = "https://free.twilio.com/2010-04-01/Accounts/$id/SMS/Messages";
                    $from = TWILIO_NUMBER;
                    $to = $input['phone'];
                    $body = 'Dear Customer, ' . $otp . ' is your One Time Password to authenticate your login to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.';
                    $data = array(
                        'From' => $from,
                        'To' => $to,
                        'Body' => $body,
                    );
                    $post = http_build_query($data);
                    $x = curl_init($url);
                    curl_setopt($x, CURLOPT_POST, true);
                    curl_setopt($x, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($x, CURLOPT_SSL_VERIFYPEER, false);
                    curl_setopt($x, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
                    curl_setopt($x, CURLOPT_USERPWD, "$id:$token");
                    curl_setopt($x, CURLOPT_POSTFIELDS, $post);
                    $y = curl_exec($x);
                    //echo "User Id > 0 <pre>"; print_R($y); exit;
                    curl_close($x);

                    $emailId = $input['email'];
                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> Customer,</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">' . $otp . ' is your One Time Password to authenticate your login to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                    $emailSubject = "DafriBank Digital - OTP Requested";
//                    Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                    $emailData['subject'] = $emailSubject;
                    $emailData['userName'] = strtoupper(trim($input['first_name']) . ' ' . trim($input['last_name']));
                    $emailData['otp'] = $otp;

                    Mail::send('emails.registerOTP', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });
                } else {
                    $slug = $serialisedData['slug'] = $this->createSlug($input['first_name'], 'users');
                    //User::insert($serialisedData);
                    Tempuser::insert($serialisedData);
                    $user_id = DB::getPdo()->lastInsertId();
                    $accNum1 = time();
                    $uidLength = 10 - strlen($user_id);

//                    $uniqNum = $this->generateRandomNumber($uidLength);
//                    $accountNumber = $uniqNum . ($user_id);

                    $accountNumber = $this->genrateAccNumber();

                    Tempuser::where('id', $user_id)->update(array('account_number' => $accountNumber));
                    //User::where('id', $user_id)->update(array('account_number' => $accountNumber));	


                    $id = TWILIO_ID;
                    $token = TWILIO_TOKEN;
                    $url = "https://free.twilio.com/2010-04-01/Accounts/$id/SMS/Messages";
                    $from = TWILIO_NUMBER;
                    $to = $input['phone'];
                    $body = 'Dear Customer, ' . $otp . ' is your One Time Password to authenticate your login to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.';
                    $data = array(
                        'From' => $from,
                        'To' => $to,
                        'Body' => $body,
                    );
                    $post = http_build_query($data);
                    $x = curl_init($url);
                    curl_setopt($x, CURLOPT_POST, true);
                    curl_setopt($x, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($x, CURLOPT_SSL_VERIFYPEER, false);
                    curl_setopt($x, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
                    curl_setopt($x, CURLOPT_USERPWD, "$id:$token");
                    curl_setopt($x, CURLOPT_POSTFIELDS, $post);
                    $y = curl_exec($x);
                    //echo "User Id > 0 <pre>"; print_R($y); exit;
                    curl_close($x);

                    $emailId = $input['email'];
                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> Customer,</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">' . $otp . ' is your One Time Password to authenticate your login to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                    $emailSubject = "DafriBank Digital - OTP Requested";
//                    Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                    $emailData['subject'] = $emailSubject;
                    $emailData['userName'] = strtoupper(trim($input['first_name']) . ' ' . trim($input['last_name']));
                    $emailData['otp'] = $otp;

                    Mail::send('emails.registerOTP', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });
                }

                /* if ($parentId > 0) {
                  $refLink = 'refid='.$input['referral'];
                  $referalInfo = DB::table('referalcodes')->select('referalcodes.*')->where('user_id', $parentId)->where('referal_link',$refLink)->first();
                  //dd(DB::getQueryLog()); DB::enableQueryLog(); exit;
                  $numRegister = $referalInfo->num_register + 1;
                  Referalcode::where('user_id', $parentId)->where('referal_link',$refLink)->update(['num_register'=> $numRegister]);
                  } */
                //Session::flash('success_message', "We have sent you an account activation code on phone. Please click on resent OTP if you do not receive the OTP within the next few minutes.");
                return Redirect::to('/personal-account-verification/' . $slug);
            }
            exit;
        }

        if (!isset($input['refId'])) {
            $input['refId'] = '';
        }

        if (!isset($input['pid'])) {
            $input['pid'] = 'na'; 
        }

        if($input['refId']!="")  
        {
        $input['refId']=$input['refId'];
        $readonly='readonly';   
        }
        else{
        $input['refId']='';
        $readonly='';       
        }

        return view('users.personalRegister', ['title' => $pageTitle, 'countrList' => $countrList, 'refId' => $input['refId'], 'pid' => $input['pid'],'readonly'=>$readonly]);
    }

    private function generateRandomNumber($length) {
        $number = '1234567890';
        $numberLength = strlen($number);
        $randomNumber = '';
        for ($i = 0; $i < $length; $i++) {
            $randomNumber .= $number[rand(0, $numberLength - 1)];
        }
        return $randomNumber;
    }

    public function personalVerify($slug = null) {
        $pageTitle = 'Personal Account Verification';
        $userInfo = Tempuser::where('slug', $slug)->orderBy('id', 'DESC')->first();
        if (empty($userInfo)) {
            $userInfo = User::where('slug', $slug)->first();
        }
        //$userInfo = User::where('slug', $slug)->first();

        $input = Input::all();

        if (!empty($input)) { //echo '<pre>';print_r($input);exit;
            if ($input['otp_code'] == '' || $input['otp_code1'] == '' || $input['otp_code2'] == '' || $input['otp_code3'] == '' || $input['otp_code4'] == '' || $input['otp_code5'] == '') {
//                return Redirect::to('/personal-account-verification/' . $slug)->withErrors('You have entered invalid verification code.');
                Session::put('error_session_message', 'You have entered invalid verification code.');
                return Redirect::to('/personal-account-verification/' . $slug);
            } else {
                $otp_code = $input['otp_code'] . $input['otp_code1'] . $input['otp_code2'] . $input['otp_code3'] . $input['otp_code4'] . $input['otp_code5'];

                $dateChk = date('Y-m-d H:i', strtotime('+15 minutes', strtotime($userInfo->otp_time)));

                if (!password_verify($otp_code, $userInfo->verify_code) || date('Y-m-d H:i') > $dateChk) {
//                    return Redirect::to('/personal-account-verification/' . $slug)->withErrors('You have entered wrong verification code.');
                    Session::put('error_session_message', 'You have entered wrong verification code.');
                    return Redirect::to('/personal-account-verification/' . $slug);
                } else {
                    //User::where('slug', $slug)->update(['otp_verify'=>1]);
                    $usr = new User([
                        'first_name' => $userInfo->first_name,
                        'last_name' => $userInfo->last_name,
                        'user_type' => $userInfo->user_type,
                        'account_number' => $userInfo->account_number,
                        'account_category' => $userInfo->account_category,
                        'country_code' => $userInfo->country_code,
                        'phone' => $userInfo->phone,
                        'email' => $userInfo->email,
                        'country' => $userInfo->country,
                        'currency' => $userInfo->currency,
                        'wallet_amount' => 0,
                        'password' => $userInfo->password,
                        'addrs_line1' => $userInfo->addrs_line1,
                        'addrs_line2' => $userInfo->addrs_line2,
                        'referral' => $userInfo->referral,
                        'parent_id' => $userInfo->parent_id,
                        'gender' => $userInfo->gender,  
                        'is_verify' => 1,
                        'otp_verify' => 1,
                        'slug' => $userInfo->slug,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $usr->save();
                    $user_id = $usr->id;

                    //to generate referral link
                    $user_slug=$userInfo->slug; 
                    $explode_user_slug=explode("-",$user_slug);
                    $referalCode=$explode_user_slug[0].'-'.($user_id+5);
                    $redCode = new Referalcode([
                        'user_id' => $user_id,
                        'referal_name' => 'Link ' . date('d.m.Y H:i'),
                        'referal_link' => 'refid=' . $referalCode,
                        'num_register' => 0,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $redCode->save();
                    
                    // echo $user_id; die;
                   //  $user_id =2995;
                    //Check Invited Users Start
                    $invtdUsrs = InvitedUser::where('Invite_email', $userInfo->email)->where('status', 0)->orderBy('id', 'DESC')->get();
                    if (!empty($invtdUsrs)) {
                        foreach ($invtdUsrs as $invtdUsr) {
                            if (!empty($invtdUsr)) {
                                $fees_amount = 0;
                                $receiver_feed_description='';
                                $host = User::where('id', $invtdUsr->host_id)->first();
                                if($host->user_type=="Agent")
                                {
                                    if (strtolower(trim($host->currency)) != strtolower(trim($userInfo->currency))) {
                                        $host_currency = trim($host->currency);
                                        $user_currency = trim($userInfo->currency);
                                        $amount = $invtdUsr->amount;   
                                        $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $amount);
                                        $convertedCurrArr = explode('##', $convertedCurrArr);
                                        $userAmount = $convertedCurrArr[0];
                                    }
                                    else{
                                        $userAmount =  $invtdUsr->amount;  
                                    }
                                    $user=$userInfo;
                                    if ($user->user_type == 'Personal') {
                                        if ($user->account_category == "Silver") {
                                            $fee_name = 'AGENT_DEPOSITE_REQUEST_SILVER';
                                        } else if ($user->account_category == "Gold") {
                                            $fee_name = 'AGENT_DEPOSITE_REQUEST_GOLD';
                                        } else if ($user->account_category == "Platinum") {
                                            $fee_name = 'AGENT_DEPOSITE_REQUEST_PLATINUM';
                                        } else if ($user->account_category == "Private Wealth") {
                                            $fee_name = 'AGENT_DEPOSITE_REQUEST_PRIVATE_WEALTH';
                                        } else {
                                            $fee_name = 'AGENT_DEPOSITE_REQUEST_SILVER';
                                        }
                                        $fees_convr = Fee::where('fee_name', $fee_name)->first();
                                        $fee_value = $fees_convr->fee_value;
                                        $fees_amount = ($userAmount * $fee_value) / 100;
                                    } else if ($user->user_type == 'Business') {
                                        if ($user->account_category == "Gold") {
                                            $fee_name = 'MERCHANT_AGENT_DEPOSITE_REQUEST_GOLD';
                                        } else if ($user->account_category == "Platinum") {
                                            $fee_name = 'MERCHANT_AGENT_DEPOSITE_REQUEST_PLATINUM';
                                        } else if ($user->account_category == "Enterprises") {
                                            $fee_name = 'MERCHANT_AGENT_DEPOSITE_REQUEST_ENTERPRI';
                                        } else {
                                            $fee_name = 'MERCHANT_AGENT_DEPOSITE_REQUEST_GOLD';
                                        }
        
                                        $fees_convr = Fee::where('fee_name', $fee_name)->first();
                                        $fee_value = $fees_convr->fee_value;
                                        $fees_amount = ($userAmount * $fee_value) / 100;
                                    }

                                    $receiver_feed_description='##RECEIVER_FEES :'.$userInfo->currency.' '.$fees_amount;
                                }
                                
                                if (strtolower(trim($host->currency)) != strtolower(trim($userInfo->currency))) {
                                    $host_currency = trim($host->currency);  
                                    $user_currency = trim($userInfo->currency);
                                    $amount = $invtdUsr->amount;
                                    $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $amount);
                                    $convertedCurrArr = explode('##', $convertedCurrArr);
                                    $user_invited_amount = $convertedCurrArr[0];
                                    $convr_fee_name =$host_currency!="NGN" && $userInfo->currency!="NGN" ? 'CONVERSION_FEE' : 'NGN_CONVERSION_FEE';
                                    $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                                    $conversion_feet = $fees_convr->fee_value;
                                    $receiver_fees = ($user_invited_amount * $conversion_feet) / 100;
                                    $user_invited_amount1 = $user_invited_amount - $receiver_fees-$fees_amount;

                                    $user = User::where('id', $user_id)->first();
                                    $user_wallet = $user->wallet_amount + $user_invited_amount1;
                                    User::where('id', $user_id)->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

                                    //to credit receiver fees in admin wallet
                                    $admin_percentage = $this->convertCurrency($user_currency, 'USD', $conversion_feet+$fees_amount);
                                    $admin_fees = explode('##', $admin_percentage)[0];
                                    $adminInfo = User::where('id', 1)->first();
                                    $admin_wallet = ($adminInfo->wallet_amount + $admin_fees);
                                    User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                                    $trans = Transaction::where('id', $invtdUsr->trans_id)->first();
                                    if (!empty($trans)) {
                                        $billing_desc = $trans->billing_description;
                                        $billing_desc .= "<br>AmountConersation: " . $trans->currency . " " . $trans->amount . " X " . $convertedCurrArr[1] . " = " . $user_currency . ' ' . $user_invited_amount . '##Conversion Fee : '.$user_currency.' ' .$receiver_fees.$receiver_feed_description;
                                        Transaction::where('id', $invtdUsr->trans_id)->update(['receiver_id' => $user_id, 'billing_description' => $billing_desc, 'receiver_fees' => $receiver_fees+$fees_amount, 'receiver_currency' => $user_currency, 'real_value' => $user_invited_amount1, 'receiver_close_bal' => $user_wallet, 'status' => 1, 'updated_at' => date('Y-m-d H:i:s')]);
                                    }
                                } else {
                                    $host_currency = trim($host->currency);
                                    $user_currency = trim($userInfo->currency);
                                    $amount = $invtdUsr->amount;
                                    $user_wallet = $userInfo->wallet_amount + $invtdUsr->amount-$fees_amount;
                                    User::where('id', $user_id)->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                    //to credit receiver fees in admin wallet
                                    $admin_percentage = $this->convertCurrency($user_currency, 'USD',$fees_amount);
                                    $admin_fees = explode('##', $admin_percentage)[0];
                                    $adminInfo = User::where('id', 1)->first();
                                    $admin_wallet = ($adminInfo->wallet_amount + $admin_fees);
                                    User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);
                                    $trans = Transaction::where('id', $invtdUsr->trans_id)->first();
                                    if (!empty($trans)) {
                                        $billing_desc = $trans->billing_description;
                                        $billing_desc .= $receiver_feed_description;
                                        Transaction::where('id', $invtdUsr->trans_id)->update(['receiver_id' => $user_id, 'receiver_currency' => $userInfo->currency,'billing_description' => $billing_desc,'receiver_fees' =>$fees_amount, 'real_value' => $amount, 'status' => 1, 'updated_at' => date('Y-m-d H:i:s')]);
                                    }
                                }

                                InvitedUser::where('id', $invtdUsr->id)->update(['status' => 1]);
                            }
                        }
                    }
                
                    //Check Invited Users End

                    $parentId = $userInfo->parent_id;
                    if ($parentId > 0) {
                        $refLink = 'refid=' . $userInfo->referral;
                        $referalInfo = DB::table('referalcodes')->select('referalcodes.*')->where('user_id', $parentId)->where('referal_link', $refLink)->first();

                        $numRegister = $referalInfo->num_register + 1;
                        Referalcode::where('user_id', $parentId)->where('referal_link', $refLink)->update(['num_register' => $numRegister]);
                    }

                    $emailId = $userInfo->email;
                    $userName = strtoupper($userInfo->first_name);
                    $userName1 = strtoupper($userInfo->first_name . ' ' . $userInfo->last_name);

                    Tempuser::where('email', $emailId)->where('phone', $userInfo->phone)->delete();

//                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Hey </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Welcome to DafriBank<br><br>We established DafriBank to help you manage your finance and business on the go.The DafriBank was built for smart digital entrepreneurs and merchants just like you.<br><br>We\'d love to hear what you think of our innovation and if there is anything we can improve on.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© '.date("Y").' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
//                    Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));



                    if ($userInfo->currency != 'USD') {
                        $currency_10_usd = $this->myCurrencyRate($userInfo->currency, 10);
                        $currency_10_usd = ceil($currency_10_usd);
                        $usdString = '(' . $userInfo->currency . ' ' . $currency_10_usd . ') ';
                    } else {
                        $usdString = '';
                    }
                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Hey </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Welcome to DafriBank Digital<br><br>Digital Banking means banking on the go. Anytime, anywhere and we are delighted you chose us as your financial institution.<br><br>With the DafriBank Digital superior technology, bank with ease in a totally secure online environment. It\'s faster and cheaper than banking in a branch.<br><br>As a customer-centric bank, we are open to your feedback, hence, please do not hesitate to contact us anytime through our e-mail <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>.<br><br>Regards,<br>The DafriBank Digital Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                    $emailSubject = "Welcome Onboard";
//                    $emailData['subjects'] = $emailSubject;
//                    $emailData['userName'] = $userName;
//                    $emailData['emailId'] = $emailId;
//                    Mail::send('emails.onBoarding2', $emailData, function ($message)use ($emailData, $emailId) {
//                        $message->to($emailId, $emailId)
//                                ->subject($emailData['subjects']);
//                    });

                    $account_number = $userInfo->account_number;

                    $detl = array();
                    $detl["date"] = date("d/m/Y");
                    $detl["userName"] = 'MR/MRS ' . $userName1;
                    $detl["account_number"] = $account_number;
                    $detl["acc_type"] = strtolower($userInfo->user_type);
                    $detl["address"] = $userInfo->addrs_line1;
                    $detl["address2"] = $userInfo->addrs_line2;

                    view()->share(['detl' => $detl]);

                    $customPaper = array(0, 0, 720, 1440);
                    $pdf = PDF::loadView('emails.onBoardPdf')->setPaper($customPaper, 'portrait');
                    //                        $pdf = PDF::loadView('fundtransferPdf');

                    $emailData['subjects'] = $emailSubject;
                    $emailData['userName'] = $userName;
                    $emailData['emailId'] = $emailId;
                    Mail::send('emails.onBoarding2', $emailData, function ($message)use ($emailData, $emailId, $pdf, $account_number) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subjects'])
                                ->attachData($pdf->output(), $account_number . ".pdf");
                    });

                    $bodyEmail = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Greetings</span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Thank you for opening a DafriBank account. Please deposit a minimum of USD 10 ' . $usdString . 'within the next 10 days to ensure your account stays active. Visit and <a href="' . HTTP_PATH . '/personal-login" target="_blank">sign in</a> to your DafriBank account to see the available funding methods.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                    $subjectEmail = "Keep your DafriBank account active!";
                    $emailData['subject'] = $subjectEmail;
                    $emailData['userName'] = $userName;
                    $emailData['emailId'] = $emailId;
                    $emailData['usdString'] = $usdString;
                    Mail::send('emails.onBoarding', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });
//                    $subjectEmail = "Keep your DafriBank account active!";
//                    $subjectEmail = "Keep your DafriBank account active!";
//                    Mail::to($emailId)->send(new SendMailable($bodyEmail, $subjectEmail, Null));



                    return Redirect::to('/personal-kyc-verification/' . $slug);
                }
            }
        }
        return view('users.personalVerify', ['title' => $pageTitle, 'userInfo' => $userInfo]);
    }

    public function personalKycVerify($slug = null) {
        $pageTitle = 'Personal Account Verification';
        $userInfo = User::where('slug', $slug)->first();

        $input = Input::all();

        if (!empty($input)) {
//echo '<pre>123';
//                print_r($input);
//                exit;

            $rules = array(
//                'identity_card_type' => 'required',
//                'identity_image' => 'required|mimes:jpeg,png,jpg,pdf',
//                'address_proof_type' => 'required',
//                'address_document' => 'required|mimes:jpeg,png,jpg,pdf',
            );
            $customMessages = [
//                'identity_card_type.required' => 'The identity card is required field.',
//                'identity_image.required' => 'The identity document is required field.',
//                'address_proof_type.required' => 'The proof of address is required field.',
//                'address_document.required' => 'The proof of address document is required field.',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('failed_session_message', $message);
                return Redirect::to('/personal-kyc-verification/' . $slug);
//                return Redirect::to('/personal-kyc-verification/' . $slug)->withErrors($validator)->withInput();
            } else {

                $applicantId = $userInfo->kyc_applicant_id;

                $h = $c = 0;
                if ((Input::hasFile('identity_image') || (Input::hasFile('identity_image_front') && Input::hasFile('identity_image_back'))) && $input['identity_card_type'] != '') {
                    $c++;
                    $h++;
                } else if ($userInfo->identity_status != 0) {
                    $c++;
                }
                if (Input::hasFile('address_document') && $input['address_proof_type'] != '') {
                    $c++;
                    $h++;
                } else if ($userInfo->address_status != 0) {
                    $c++;
                }
                if ((Input::hasFile('profile_image') || $input['selfiedata'] != '')) {
                    $c++;
                    $h++;
                } else if ($userInfo->selfie_status != 0) {
                    $c++;
                }

                if ($c > 0 && $c < 3) {
                    Session::put('failed_session_message', 'Please upload all documents.');
                    return Redirect::to('/personal-kyc-verification/' . $slug);
                }
                
                if (($userInfo->kyc_decline_type == 2) && $h > 0) {
                    Session::put('failed_session_message', 'Your KYC status is finally rejected so you can not upload it again. Please contact admin for more details.');
                    return Redirect::to('/personal-kyc-verification/' . $slug);
                }

                if ($input['identity_card_type'] != '' && $input['identity_card_type'] == 'Passport') {
                    if (Input::hasFile('identity_image')) {
                        $file = Input::file('identity_image');
                        $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $input['identity_image'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['identity_image'];
                        // $idDocTyp = $input['identity_card_type'];
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['identity_image']);
                    }
                } else if ($input['identity_card_type'] != '') {
                    if (Input::hasFile('identity_image_front')) {
                        $file = Input::file('identity_image_front');
                        $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $input['identity_image'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['identity_image'];
                        // $idDocTyp = $input['identity_card_type'];
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocumentFront($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['identity_image']);
                    }

                    if (Input::hasFile('identity_image_back')) {
                        $file = Input::file('identity_image_back');
                        $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $input['identity_image_back'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['back_identity_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['back_identity_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['identity_image_back'];
                        // $idDocTyp = $input['identity_card_type'];
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocumentBack($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['identity_image_back']);
                    }
                }

                unset($input['identity_image_front']);

                if (Input::hasFile('address_document')) {
                    $file = Input::file('address_document');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    // $this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['address_document'] = $uploadedFileName;

                    // if ($applicantId == '') {
                    //     $applicantId = $this->createApplicant($userInfo->id);
                    //     User::where('id', $userInfo->id)->update(['address_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                    // } else {
                    //     $applicantId = $applicantId;
                    //     User::where('id', $userInfo->id)->update(['address_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                    // }

                    // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['address_document'];
                    // $idDocTyp = $input['address_proof_type'];
                    // $country = $userInfo->country;
                    // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                } else {
                    unset($input['address_document']);
                }
                if (Input::hasFile('written_notes')) {
                    $file = Input::file('written_notes');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['written_notes'] = $uploadedFileName;
                } else {
                    unset($input['written_notes']);
                }
                if (Input::hasFile('profile_image')) {
                    $file = Input::file('profile_image');
                    $uploadedFileName = $this->uploadImage($file, PROFILE_FULL_UPLOAD_PATH);
//                    $this->resizeImage($uploadedFileName, PROFILE_FULL_UPLOAD_PATH, PROFILE_SMALL_UPLOAD_PATH, PROFILE_MW, PROFILE_MH);
                    $input['profile_image'] = $uploadedFileName;

                    // if ($applicantId == '') {
                    //     $applicantId = $this->createApplicant($userInfo->id);
                    //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                    // } else {
                    //     $applicantId = $applicantId;
                    //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                    // }

                    // $imgURL = PROFILE_FULL_UPLOAD_PATH . $input['profile_image'];
                    // $idDocTyp = 'Selfie';
                    // $country = $userInfo->country;
                    // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                } else {
                    if ($input['selfiedata'] != '') {
                        $encoded_data = $input['selfiedata'];
                        $binary_data = base64_decode($encoded_data);
//                        echo '<pre>123';
//            print_r($binary_data);
//            exit;
                        $uploadedFileName = 'webcam' . time() . '.jpg';
                        $result = file_put_contents(PROFILE_FULL_UPLOAD_PATH . $uploadedFileName, $binary_data);
//                        $uploadedFileName = $this->uploadImage($binary_data, PROFILE_FULL_UPLOAD_PATH);
                        $this->resizeImage($uploadedFileName, PROFILE_FULL_UPLOAD_PATH, PROFILE_SMALL_UPLOAD_PATH, PROFILE_MW, PROFILE_MH);
                        $input['profile_image'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = PROFILE_FULL_UPLOAD_PATH . $input['profile_image'];
                        // $idDocTyp = 'Selfie';
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['profile_image']);
                    }
                }
                unset($input['selfiedata']);

                if (empty($input['identity_card_type'])) {
                    unset($input['identity_card_type']);
                }
                if (empty($input['address_proof_type'])) {
                    unset($input['address_proof_type']);
                }
                if (empty($input['national_identity_number'])) {
                    unset($input['national_identity_number']);
                }
                if (empty($input['address_proof_number'])) {
                    unset($input['address_proof_number']);
                }

                $serialisedData = $this->serialiseFormData($input);
                $serialisedData['status'] = 1;
                if (Input::hasFile('identity_image') || (Input::hasFile('identity_image_front') && Input::hasFile('identity_image_back')) || Input::hasFile('address_document') || Input::hasFile('profile_image') || Input::hasFile('selfiedata')) {
                    $serialisedData['is_kyc_done'] = 0;
                    $serialisedData['back_identity_status'] = 0;
                    $serialisedData['identity_status'] = 0;
                    $serialisedData['selfie_status'] = 0;
                    $serialisedData['address_status'] = 0;
                   // $this->changeApplicantStatus($applicantId);
                }
//                echo '<pre>123';
//                print_r($serialisedData);
//                exit;
                User::where('id', $userInfo->id)->update($serialisedData);

                Session::put('user_id', $userInfo->id);
                Session::put('user_name', strtoupper($userInfo->first_name));
                Session::put('email', $userInfo->email);
                return Redirect::to('/overview');

                //Session::flash('success_message', "Your account has been registered successfully. We will notify you after the admin approval.");
                //return Redirect::to('/personal-login');
            }
        }
        return view('users.personalKycVerify', ['title' => $pageTitle, 'userInfo' => $userInfo]);
    }

    public function personalKycUpdate($slug = null) {
        $pageTitle = 'Personal Account Verification';
        $userInfo = User::where('slug', $slug)->first();

        $input = Input::all();

        if (!empty($input)) { //echo '<pre>';print_r($input);exit;
            $rules = array(
//                'identity_card_type' => 'required',
//                'identity_image' => 'required|mimes:jpeg,png,jpg,pdf',
//                'address_proof_type' => 'required',
//                'address_document' => 'required|mimes:jpeg,png,jpg,pdf',
            );
            $customMessages = [
//                'identity_card_type.required' => 'The identity card is required field.',
//                'identity_image.required' => 'The identity document is required field.',
//                'address_proof_type.required' => 'The proof of address is required field.',
//                'address_document.required' => 'The proof of address document is required field.',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('failed_session_message', $message);
                return Redirect::to('/personal-kyc-verification/' . $slug);
//                return Redirect::to('/personal-kyc-verification/' . $slug)->withErrors($validator)->withInput();
            } else {

                $h = $c = 0;
                if ((Input::hasFile('identity_image') || (Input::hasFile('identity_image_front') && Input::hasFile('identity_image_back')) ) && $input['identity_card_type'] != '') {
                    $c++;
                    $h++;
                } else if ($userInfo->identity_status != 0) {
                    $c++;
                }
                if (Input::hasFile('address_document') && $input['address_proof_type'] != '') {
                    $c++;
                    $h++;
                } else if ($userInfo->address_status != 0) {
                    $c++;
                }
                if ((Input::hasFile('profile_image') || $input['selfiedata'] != '')) {
                    $c++;
                    $h++;
                } else if ($userInfo->selfie_status != 0) {
                    $c++;
                }

                if ($c > 0 && $c < 3) {
                    Session::put('failed_session_message', 'Please upload all documents.');
                    return Redirect::to('/personal-kyc-update/' . $slug);
                }
                
                if (($userInfo->kyc_decline_type == 2) && $h > 0) {
                    Session::put('failed_session_message', 'Your KYC status is finally rejected so you can not upload it again. Please contact admin for more details.');
                    return Redirect::to('/personal-kyc-update/' . $slug);
                }

                $applicantId = $userInfo->kyc_applicant_id;

                if ($input['identity_card_type'] != '' && $input['identity_card_type'] == 'Passport') {
                    if (Input::hasFile('identity_image')) {
                        $file = Input::file('identity_image');
                        $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $input['identity_image'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['identity_image'];
                        // $idDocTyp = $input['identity_card_type'];
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['identity_image']);
                    }
                } else if ($input['identity_card_type'] != '') {
                    if (Input::hasFile('identity_image_front')) {
                        $file = Input::file('identity_image_front');
                        $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $input['identity_image'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['identity_image'];
                        // $idDocTyp = $input['identity_card_type'];
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocumentFront($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['identity_image']);
                    }



                    if (Input::hasFile('identity_image_back')) {
                        $file = Input::file('identity_image_back');
                        $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $input['identity_image_back'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['back_identity_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['back_identity_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['identity_image_back'];
                        // $idDocTyp = $input['identity_card_type'];
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocumentBack($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['identity_image_back']);
                    }
                }

                unset($input['identity_image_front']);


                if (Input::hasFile('address_document')) {
                    $file = Input::file('address_document');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    // $this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['address_document'] = $uploadedFileName;

                    // if ($applicantId == '') {
                    //     $applicantId = $this->createApplicant($userInfo->id);
                    //     User::where('id', $userInfo->id)->update(['address_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                    // } else {
                    //     $applicantId = $applicantId;
                    //     User::where('id', $userInfo->id)->update(['address_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                    // }

                    // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['address_document'];
                    // $idDocTyp = $input['address_proof_type'];
                    // $country = $userInfo->country;
                    // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                } else {
                    unset($input['address_document']);
                }
                if (Input::hasFile('written_notes')) {
                    $file = Input::file('written_notes');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['written_notes'] = $uploadedFileName;
                } else {
                    unset($input['written_notes']);
                }
                if (Input::hasFile('profile_image')) {
                    $file = Input::file('profile_image');
                    $uploadedFileName = $this->uploadImage($file, PROFILE_FULL_UPLOAD_PATH);
//                    $this->resizeImage($uploadedFileName, PROFILE_FULL_UPLOAD_PATH, PROFILE_SMALL_UPLOAD_PATH, PROFILE_MW, PROFILE_MH);
                    $input['profile_image'] = $uploadedFileName;

                    // if ($applicantId == '') {
                    //     $applicantId = $this->createApplicant($userInfo->id);
                    //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                    // } else {
                    //     $applicantId = $applicantId;
                    //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                    // }

                    // $imgURL = PROFILE_FULL_UPLOAD_PATH . $input['profile_image'];
                    // $idDocTyp = 'Selfie';
                    // $country = $userInfo->country;
                    // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                } else {
                    if ($input['selfiedata'] != '') {
                        $encoded_data = $input['selfiedata'];
                        $binary_data = base64_decode($encoded_data);
//                        echo '<pre>123';
//            print_r($binary_data);
//            exit;
                        $uploadedFileName = 'webcam' . time() . '.jpg';
                        $result = file_put_contents(PROFILE_FULL_UPLOAD_PATH . $uploadedFileName, $binary_data);
//                        $uploadedFileName = $this->uploadImage($binary_data, PROFILE_FULL_UPLOAD_PATH);
//                        $this->resizeImage($uploadedFileName, PROFILE_FULL_UPLOAD_PATH, PROFILE_SMALL_UPLOAD_PATH, PROFILE_MW, PROFILE_MH);
                        $input['profile_image'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = PROFILE_FULL_UPLOAD_PATH . $input['profile_image'];
                        // $idDocTyp = 'Selfie';
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['profile_image']);
                    }
                }
                unset($input['selfiedata']);

                if (empty($input['identity_card_type'])) {
                    unset($input['identity_card_type']);
                }
                if (empty($input['address_proof_type'])) {
                    unset($input['address_proof_type']);
                }
                if (empty($input['national_identity_number'])) {
                    unset($input['national_identity_number']);
                }
                if (empty($input['address_proof_number'])) {
                    unset($input['address_proof_number']);
                }

                $serialisedData = $this->serialiseFormData($input);
                $serialisedData['status'] = 1;
                if (Input::hasFile('identity_image') || (Input::hasFile('identity_image_front') && Input::hasFile('identity_image_back')) || Input::hasFile('address_document') || Input::hasFile('profile_image') || Input::hasFile('selfiedata')) {
                $serialisedData['is_kyc_done'] = 0; 
                $serialisedData['back_identity_status'] = 0;
                $serialisedData['identity_status'] = 0;
                $serialisedData['selfie_status'] = 0;
                $serialisedData['address_status'] = 0;
                   // $this->changeApplicantStatus($applicantId);
                }

                User::where('id', $userInfo->id)->update($serialisedData);

                Session::put('user_id', $userInfo->id);
                Session::put('user_name', strtoupper($userInfo->first_name));
                Session::put('email', $userInfo->email);
                return Redirect::to('/overview');

                //Session::flash('success_message', "Your account has been registered successfully. We will notify you after the admin approval.");
                //return Redirect::to('/personal-login');
            }
        }
        return view('users.personalKycVerify', ['title' => $pageTitle]);
    }

    public function fetchApplicant($externalUserId) {
        // https://developers.sumsub.com/api-reference/#creating-an-applicant


        $url = '/resources/applicants/' . $externalUserId . '/one';
        $request = new GuzzleHttp\Psr7\Request('POST', SUMSUB_TEST_BASE_URL . $url);
        $request = $request->withHeader('Content-Type', 'application/json');
//        $request = $request->withBody(Psr7\Utils::streamFor(json_encode($requestBody)));
//        $request = $request->withBody(GuzzleHttp\Psr7\streamFor(json_encode($requestBody)));

        $responseBody = $this->sendHttpRequest($request, $url)->getBody();
        return json_decode($responseBody)->{'id'};
    }

    public function createApplicant($externalUserId) {
        // https://developers.sumsub.com/api-reference/#creating-an-applicant
        $requestBody = [
            'externalUserId' => $externalUserId
        ];

        $url = '/resources/applicants?levelName=basic-kyc-level';
        $request = new GuzzleHttp\Psr7\Request('POST', SUMSUB_TEST_BASE_URL . $url);
        $request = $request->withHeader('Content-Type', 'application/json');
        $request = $request->withBody(Psr7\Utils::streamFor(json_encode($requestBody)));
//        $request = $request->withBody(GuzzleHttp\Psr7\streamFor(json_encode($requestBody)));

        $responseBody = $this->sendHttpRequest($request, $url)->getBody();
        return json_decode($responseBody)->{'id'};
    }

    public function sendHttpRequest($request, $url) {
        $client = new GuzzleHttp\Client();
        $ts = time();

        $request = $request->withHeader('X-App-Token', SUMSUB_APP_TOKEN);
        $request = $request->withHeader('X-App-Access-Sig', $this->createSignature($ts, $request->getMethod(), $url, $request->getBody()));
        $request = $request->withHeader('X-App-Access-Ts', $ts);

        // Reset stream offset to read body in `send` method from the start
        $request->getBody()->rewind();

//        try {
        $response = $client->send($request);
        
//        echo '<pre>';print_r($response);exit;
        if ($response->getStatusCode() != 200 && $response->getStatusCode() != 201) {
            echo "Error: " . $response->getStatusCode();
            exit;
        }
//        } catch (GuzzleHttp\Exception\GuzzleException $e) {
//            error_log($e);
//        }
//echo '<pre>';print_r($response);exit;
        return $response;
    }

    private function createSignature($ts, $httpMethod, $url, $httpBody) {
        return hash_hmac('sha256', $ts . strtoupper($httpMethod) . $url . $httpBody, SUMSUB_SECRET_KEY);
    }

    public function changeApplicantStatus($applicantId) {
        $url = '/resources/applicants/' . $applicantId . '/status/pending';
        $request = new GuzzleHttp\Psr7\Request('POST', SUMSUB_TEST_BASE_URL . $url);

        $responseBody = $this->sendHttpRequest($request, $url)->getBody();

//        echo '<pre>';print_r($responseBody);exit;
        return true;
    }

    public function addDocumentFront($applicantId, $imgURL, $idDocTyp, $country) {
        $countryCode = $this->getCountryCode($country);

        global $identityCardType;
        $idDocType = $identityCardType[$idDocTyp];
        $metadata = ['idDocType' => $idDocType, 'idDocSubType' => 'FRONT_SIDE', 'country' => $countryCode];
        $file = $imgURL;
//echo '<pre>';print_r($metadata);exit;
        $multipart = new MultipartStream([
            [
                "name" => "metadata",
                "contents" => json_encode($metadata)
            ],
            [
                'name' => 'content',
                'contents' => fopen($file, 'r')
            ],
        ]);

        $url = "/resources/applicants/" . $applicantId . "/info/idDoc";
        $request = new GuzzleHttp\Psr7\Request('POST', SUMSUB_TEST_BASE_URL . $url);
        $request = $request->withBody($multipart);
        
        
        

        return $this->sendHttpRequest($request, $url)->getHeader("X-Image-Id")[0];
    }

    public function addDocumentBack($applicantId, $imgURL, $idDocTyp, $country) {
        $countryCode = $this->getCountryCode($country);

        global $identityCardType;
        $idDocType = $identityCardType[$idDocTyp];
        $metadata = ['idDocType' => $idDocType, 'idDocSubType' => 'BACK_SIDE', 'country' => $countryCode];
        $file = $imgURL;
//echo '<pre>';print_r($metadata);exit;
        $multipart = new MultipartStream([
            [
                "name" => "metadata",
                "contents" => json_encode($metadata)
            ],
            [
                'name' => 'content',
                'contents' => fopen($file, 'r')
            ],
        ]);

        $url = "/resources/applicants/" . $applicantId . "/info/idDoc";
        $request = new GuzzleHttp\Psr7\Request('POST', SUMSUB_TEST_BASE_URL . $url);
        $request = $request->withBody($multipart);

        return $this->sendHttpRequest($request, $url)->getHeader("X-Image-Id")[0];
    }

    public function addDocument($applicantId, $imgURL, $idDocTyp, $country) {
        $countryCode = $this->getCountryCode($country);

        global $identityCardType;
        $idDocType = $identityCardType[$idDocTyp];
        $metadata = ['idDocType' => $idDocType, 'country' => $countryCode];
        $file = $imgURL;
//echo '<pre>';print_r($metadata);exit;
        $multipart = new MultipartStream([
            [
                "name" => "metadata",
                "contents" => json_encode($metadata)
            ],
            [
                'name' => 'content',
                'contents' => fopen($file, 'r')
            ],
        ]);

        $url = "/resources/applicants/" . $applicantId . "/info/idDoc";
        $request = new GuzzleHttp\Psr7\Request('POST', SUMSUB_TEST_BASE_URL . $url);
        
        $request = $request->withBody($multipart);

        
        return $this->sendHttpRequest($request, $url)->getHeader("X-Image-Id")[0];
    }

    public function genrateAccNumber() {
        $adminInfo = DB::table('admins')->select('admins.last_account_number')->where('id', 1)->first();
        $accNumber = $adminInfo->last_account_number + 1;

        DB::table('admins')->where('id', 1)->update(['last_account_number' => $accNumber]);
        return $accNumber;
    }

    public function businessRegister() {
        ini_set('memory_limit', -1);
        $pageTitle = 'Business Account Registration';

        $countrList = Country::getCountryList();

        $input = Input::all();

        if (!empty($input) and Count($input) > 2) {
            $rules = array(
                'business_name' => 'required|max:50',
                'director_name' => 'required|max:50',
                'email' => 'required|email',
                'phone' => 'required',
                'country_id' => 'required',
                'currency' => 'required',
                'business_type' => 'required',
                'registration_number' => 'required',
//                'registration_document' => 'required|mimes:jpeg,png,jpg,pdf',
                'password' => 'required|min:8',
            );
            $customMessages = [
                'country_id.required' => 'The country field is required field.',
                'business_type.required' => 'The business type field is required field.',
                'registration_number.required' => 'The business registration number field is required field.',
//                'registration_document.required' => 'The business registration document field is required field.',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('failed_session_message', $message);
                return Redirect::to('/business-account-registration')->withInput(Input::except('password'));
//                return Redirect::to('/business-account-registration')->withErrors($validator)->withInput(Input::except('password'));
            } else {
                $user_id = 0;
                $userInfo = User::where('email', $input['email'])->first();
                if ($userInfo) {
                    Session::put('error_session_message', 'Email address already registered, please login.');
                    return Redirect::to('/business-account-registration')->withInput(Input::except('password'));
//                    return Redirect::to('/business-account-registration')->withErrors('Email address already registered, please login.');

                    if ($userInfo->user_type != 'Business') {
                        Session::put('error_session_message', 'Email address already registered as personal account.');
                        return Redirect::to('/business-account-registration')->withInput(Input::except('password'));
//                        return Redirect::to('/business-account-registration')->withErrors('Email address already registered as personal account.');
                    }

                    if ($userInfo->is_verify == 1 || $userInfo->status == 1) {
                        Session::put('error_session_message', 'Email address already registered, please login.');
                        return Redirect::to('/business-account-registration')->withInput(Input::except('password'));
//                        return Redirect::to('/business-account-registration')->withErrors('Email address already registered, please login.');
                    } else {
                        $user_id = $userInfo->id;
                    }
                }

                $isPhoneExists = User::where('phone', $input['phone'])->first();
                if ($isPhoneExists) {
                    Session::put('error_session_message', 'Mobile number already registered, please login.');
                    return Redirect::to('/business-account-registration')->withInput(Input::except('password'));
//                    return Redirect::to('/business-account-registration')->withErrors('Mobile number already registered, please login.');
                }

                $input['country'] = ucfirst(trim($input['country_id']));
                unset($input['country_id']);
                unset($input['terms']);

                $input['country_code'] = $input['contryCode'];
                unset($input['contryCode']);
                $input['business_name'] = ucfirst(strtolower(trim($input['business_name'])));
                $input['director_name'] = ucfirst(strtolower(trim($input['director_name'])));

                    //to explode referral link
                    if($input['referral']!="")
                    {  
                    $link=HTTP_PATH.'/choose-account?refid='.$input['referral'];       
                    $ref_link=explode(HTTP_PATH.'/choose-account?',$link);
                    if($ref_link[0]=="")
                    {
                    $ref_slug=preg_split( '/(refId=|refid=|&pid=)/',$ref_link['1']);
                    $ref_slug_string='refid='.$ref_slug['1'];
                    $ref_exist_count=Referalcode::where('referal_link',$ref_slug_string)->first();
                    if(isset($ref_exist_count->id))
                    {
                    $input['referral']=explode("refid=",$ref_exist_count->referal_link)[1]; 
                    $input['parent_id']=$ref_exist_count->user_id;   
                    }
                    else{
                    Session::put('error_session_message', 'Please provide a valid referral code');
                    return Redirect::to('/business-account-registration')->withInput(Input::except('password'));   
                    }
                    }
                    else{
                    Session::put('error_session_message', 'Please provide a valid referral code');
                    return Redirect::to('/business-account-registration')->withInput(Input::except('password'));  
                    }
                    }
                    else{
                    $input['referral']='na'; 
                    $input['parent_id']='0'; 
                    }
                
                $input['password'] = trim($input['password']);

                $serialisedData = $this->serialiseFormData($input);

                $serialisedData['status'] = 0;
                $serialisedData['is_verify'] = 0;
                $serialisedData['user_type'] = 'Business';
                $serialisedData['account_category'] = 'Gold';
                $serialisedData['password'] = $this->encpassword($input['password']);

                $otp = mt_rand(100000, 999999);
                $verifyCode = $this->encpassword($otp);
                //$verifyCode = $this->encpassword(100000);
                $serialisedData['verify_code'] = $verifyCode;
                $serialisedData['otp_time'] = date('Y-m-d H:i:s');
                //print_R($serialisedData); exit;

                if ($user_id > 0) {
                    $slug = $userInfo->slug;

//                    $accNum1 = time();
//                    $uidLength = 10 - strlen($user_id);
//                    $uniqNum = $this->generateRandomNumber($uidLength);
//                    $accountNumber = $uniqNum . ($user_id);
                    $accountNumber = $this->genrateAccNumber();
                    $serialisedData['account_number'] = $accountNumber;

                    User::where('id', $user_id)->update($serialisedData);

                    $id = TWILIO_ID;
                    $token = TWILIO_TOKEN;
                    $url = "https://free.twilio.com/2010-04-01/Accounts/$id/SMS/Messages";
                    $from = TWILIO_NUMBER;
                    $to = $input['phone'];
                    $body = 'Dear Customer, ' . $otp . ' is your One Time Password to authenticate your login to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.';
                    $data = array(
                        'From' => $from,
                        'To' => $to,
                        'Body' => $body,
                    );
                    $post = http_build_query($data);
                    $x = curl_init($url);
                    curl_setopt($x, CURLOPT_POST, true);
                    curl_setopt($x, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($x, CURLOPT_SSL_VERIFYPEER, false);
                    curl_setopt($x, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
                    curl_setopt($x, CURLOPT_USERPWD, "$id:$token");
                    curl_setopt($x, CURLOPT_POSTFIELDS, $post);
                    $y = curl_exec($x);
                    curl_close($x);

                    $emailId = $input['email'];
                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> Customer,</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">' . $otp . ' is your One Time Password to authenticate your login to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                    $emailSubject = "DafriBank Digital - OTP Requested";
//                    Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                    $emailData['subject'] = $emailSubject;
                    $emailData['userName'] = strtoupper(trim($input['business_name']));
                    $emailData['otp'] = $otp;

                    Mail::send('emails.registerOTP', $emailData, function ($message) use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });
                } else {
                    $accountNumber = $this->genrateAccNumber();

                    $serialisedData['account_number'] = $accountNumber;
                    $slug = $serialisedData['slug'] = $this->createSlug($input['business_name'], 'users');
                    Tempuser::insert($serialisedData);
                    //User::insert($serialisedData);
//                    $accNum1 = time();
//                    $uidLength = 10 - strlen($user_id);
//                    $uniqNum = $this->generateRandomNumber($uidLength);
//                    $accountNumber = $uniqNum . ($user_id);
//                    $accountNumber = $this->genrateAccNumber();
                    $user_id = DB::getPdo()->lastInsertId();
//                    Tempuser::where('id', $user_id)->update(array('account_number' => $accountNumber));

                    $id = TWILIO_ID;
                    $token = TWILIO_TOKEN;
                    $url = "https://free.twilio.com/2010-04-01/Accounts/$id/SMS/Messages";
                    $from = TWILIO_NUMBER;
                    $to = $input['phone'];
                    $body = 'Dear Customer, ' . $otp . ' is your One Time Password to authenticate your login to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.';
                    $data = array(
                        'From' => $from,
                        'To' => $to,
                        'Body' => $body,
                    );
                    $post = http_build_query($data);
                    $x = curl_init($url);
                    curl_setopt($x, CURLOPT_POST, true);
                    curl_setopt($x, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($x, CURLOPT_SSL_VERIFYPEER, false);
                    curl_setopt($x, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
                    curl_setopt($x, CURLOPT_USERPWD, "$id:$token");
                    curl_setopt($x, CURLOPT_POSTFIELDS, $post);
                    $y = curl_exec($x);
                    curl_close($x);

                    $emailId = $input['email'];
                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> Customer,</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">' . $otp . ' is your One Time Password to authenticate your login to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                    $emailSubject = "DafriBank Digital - OTP Requested";
//                    Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                    $emailData['subject'] = $emailSubject;
                    $emailData['userName'] = strtoupper(trim($input['business_name']));
                    $emailData['otp'] = $otp;

                    Mail::send('emails.registerOTP', $emailData, function ($message) use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });
                }

                /* if ($parentId > 0) {	
                  $refLink = 'refid='.$input['referral'];
                  $referalInfo = DB::table('referalcodes')->select('referalcodes.*')->where('user_id', $parentId)->where('referal_link',$refLink)->first();

                  $numRegister = $referalInfo->num_register + 1;
                  Referalcode::where('user_id', $parentId)->where('referal_link',$refLink)->update(['num_register'=> $numRegister]);
                  } */

//                Session::flash('success_message', "We have sent you an account activation code on phone. Please click on resent OTP if you do not receive the OTP within the next few minutes.");
                return Redirect::to('/business-account-verification/' . $slug);
            }
            exit;
        }

        if (!isset($input['refId'])) {
            $input['refId'] = '';
        }

        if (!isset($input['pid'])) {
            $input['pid'] = 'na';
        }

        if($input['refId']!="")  
        {
        $input['refId']=$input['refId'];
        $readonly='readonly';   
        }
        else{
        $input['refId']='';
        $readonly='';       
        }

        return view('users.businessRegister', ['title' => $pageTitle, 'countrList' => $countrList, 'refId' => $input['refId'], 'pid' => $input['pid'],'readonly'=>$readonly]);   
    }

    public function businessVerify($slug = null) {
        $pageTitle = 'Business Account Verification';
        $userInfo = Tempuser::where('slug', $slug)->orderBy('id', 'DESC')->first();
        if (empty($userInfo)) {
            Session::put('error_session_message', 'You have entered invalid verification code.');
            return Redirect::to('/personal-login/');
        }
        $input = Input::all();
        if (!empty($input)) { //echo '<pre>';print_r($input);exit;
            if ($input['otp_code'] == '' || $input['otp_code1'] == '' || $input['otp_code2'] == '' || $input['otp_code3'] == '' || $input['otp_code4'] == '' || $input['otp_code5'] == '') {
                Session::put('error_session_message', 'You have entered invalid verification code.');
                return Redirect::to('/business-account-verification/' . $slug);
//                return Redirect::to('/business-account-verification/' . $slug)->withErrors('You have entered invalid verification code.');
            } else {
                $otp_code = $input['otp_code'] . $input['otp_code1'] . $input['otp_code2'] . $input['otp_code3'] . $input['otp_code4'] . $input['otp_code5'];

                $dateChk = date('Y-m-d H:i', strtotime('+15 minutes', strtotime($userInfo->otp_time)));

                if (!password_verify($otp_code, $userInfo->verify_code) || date('Y-m-d H:i') > $dateChk) {
                    Session::put('error_session_message', 'You have entered wrong verification code.');
                    return Redirect::to('/business-account-verification/' . $slug);
//                    return Redirect::to('/business-account-verification/' . $slug)->withErrors('You have entered wrong verification code.');
                } else {
                    //User::where('slug', $slug)->update(['otp_verify'=>1]);
                    $usr = new User([
                        'director_name' => $userInfo->director_name,
                        'business_name' => $userInfo->business_name,
                        'user_type' => $userInfo->user_type,
                        'account_number' => $userInfo->account_number,
                        'account_category' => $userInfo->account_category,
                        'country_code' => $userInfo->country_code,
                        'phone' => $userInfo->phone,
                        'email' => $userInfo->email,
                        'country' => $userInfo->country,
                        'currency' => $userInfo->currency,
                        'wallet_amount' => 0,
                        'registration_number' => $userInfo->registration_number,
                        'business_type' => $userInfo->business_type,
                        'registration_document' => $userInfo->registration_document,
                        'certificate_of_incorporation' => $userInfo->certificate_of_incorporation,
                        'article' => $userInfo->article,
                        'memorandum' => $userInfo->memorandum,
                        'tax_certificate' => $userInfo->tax_certificate,
                        'address_proof' => $userInfo->address_proof,
                        'identity' => $userInfo->identity,
                        'person_identity' => $userInfo->person_identity,
                        'password' => $userInfo->password,
                        'addrs_line1' => $userInfo->addrs_line1,
                        'addrs_line2' => $userInfo->addrs_line2,
                        'referral' => $userInfo->referral,
                        'parent_id' => $userInfo->parent_id,
                        'gender' => $userInfo->gender, 
                        'is_verify' => 1,
                        'otp_verify' => 1,
                        'slug' => $userInfo->slug,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $usr->save();
                    $user_id = $usr->id;
                    //Check Invited Users Start

                    //to generate referral link
                      $user_slug=$userInfo->slug; 
                      $explode_user_slug=explode("-",$user_slug);
                      $referalCode=$explode_user_slug[0].'-'.($user_id+5);
                      $redCode = new Referalcode([
                          'user_id' => $user_id,
                          'referal_name' => 'Link ' . date('d.m.Y H:i'),
                          'referal_link' => 'refid=' . $referalCode,
                          'num_register' => 0,
                          'created_at' => date('Y-m-d H:i:s'),
                          'updated_at' => date('Y-m-d H:i:s'),
                      ]);
                      $redCode->save();

                      $invtdUsrs = InvitedUser::where('Invite_email', $userInfo->email)->where('status', 0)->orderBy('id', 'DESC')->get();
                      if (!empty($invtdUsrs)) {
                          foreach ($invtdUsrs as $invtdUsr) {
                              if (!empty($invtdUsr)) {
                                  $fees_amount = 0;
                                  $receiver_feed_description='';
                                  $host = User::where('id', $invtdUsr->host_id)->first();
                                  if($host->user_type=="Agent")
                                  {
                                      if (strtolower(trim($host->currency)) != strtolower(trim($userInfo->currency))) {
                                          $host_currency = trim($host->currency);
                                          $user_currency = trim($userInfo->currency);
                                          $amount = $invtdUsr->amount;   
                                          $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $amount);
                                          $convertedCurrArr = explode('##', $convertedCurrArr);
                                          $userAmount = $convertedCurrArr[0];
                                      }
                                      else{
                                          $userAmount =  $invtdUsr->amount;  
                                      }
                                      $user=$userInfo;
                                      if ($user->user_type == 'Personal') {
                                          if ($user->account_category == "Silver") {
                                              $fee_name = 'AGENT_DEPOSITE_REQUEST_SILVER';
                                          } else if ($user->account_category == "Gold") {
                                              $fee_name = 'AGENT_DEPOSITE_REQUEST_GOLD';
                                          } else if ($user->account_category == "Platinum") {
                                              $fee_name = 'AGENT_DEPOSITE_REQUEST_PLATINUM';
                                          } else if ($user->account_category == "Private Wealth") {
                                              $fee_name = 'AGENT_DEPOSITE_REQUEST_PRIVATE_WEALTH';
                                          } else {
                                              $fee_name = 'AGENT_DEPOSITE_REQUEST_SILVER';
                                          }
                                          $fees_convr = Fee::where('fee_name', $fee_name)->first();
                                          $fee_value = $fees_convr->fee_value;
                                          $fees_amount = ($userAmount * $fee_value) / 100;
                                      } else if ($user->user_type == 'Business') {
                                          if ($user->account_category == "Gold") {
                                              $fee_name = 'MERCHANT_AGENT_DEPOSITE_REQUEST_GOLD';
                                          } else if ($user->account_category == "Platinum") {
                                              $fee_name = 'MERCHANT_AGENT_DEPOSITE_REQUEST_PLATINUM';
                                          } else if ($user->account_category == "Enterprises") {
                                              $fee_name = 'MERCHANT_AGENT_DEPOSITE_REQUEST_ENTERPRI';
                                          } else {
                                              $fee_name = 'MERCHANT_AGENT_DEPOSITE_REQUEST_GOLD';
                                          }
          
                                          $fees_convr = Fee::where('fee_name', $fee_name)->first();
                                          $fee_value = $fees_convr->fee_value;
                                          $fees_amount = ($userAmount * $fee_value) / 100;
                                      }
  
                                      $receiver_feed_description='##RECEIVER_FEES :'.$userInfo->currency.' '.$fees_amount;
                                  }
                                  
                                  if (strtolower(trim($host->currency)) != strtolower(trim($userInfo->currency))) {
                                      $host_currency = trim($host->currency);  
                                      $user_currency = trim($userInfo->currency);
                                      $amount = $invtdUsr->amount;
                                      $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $amount);
                                      $convertedCurrArr = explode('##', $convertedCurrArr);
                                      $user_invited_amount = $convertedCurrArr[0];
                                      $convr_fee_name =$host_currency!="NGN" && $userInfo->currency!="NGN" ? 'CONVERSION_FEE' : 'NGN_CONVERSION_FEE';
                                      $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                                      $conversion_feet = $fees_convr->fee_value;
                                      $receiver_fees = ($user_invited_amount * $conversion_feet) / 100;
                                      $user_invited_amount1 = $user_invited_amount - $receiver_fees-$fees_amount;
  
                                      $user = User::where('id', $user_id)->first();
                                      $user_wallet = $user->wallet_amount + $user_invited_amount1;
                                      User::where('id', $user_id)->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
  
                                      //to credit receiver fees in admin wallet
                                      $admin_percentage = $this->convertCurrency($user_currency, 'USD', $conversion_feet+$fees_amount);
                                      $admin_fees = explode('##', $admin_percentage)[0];
                                      $adminInfo = User::where('id', 1)->first();
                                      $admin_wallet = ($adminInfo->wallet_amount + $admin_fees);
                                      User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);
  
                                      $trans = Transaction::where('id', $invtdUsr->trans_id)->first();
                                      if (!empty($trans)) {
                                          $billing_desc = $trans->billing_description;
                                          $billing_desc .= "<br>AmountConersation: " . $trans->currency . " " . $trans->amount . " X " . $convertedCurrArr[1] . " = " . $user_currency . ' ' . $user_invited_amount . '##Conversion Fee : '.$user_currency.' ' .$receiver_fees.$receiver_feed_description;
                                          Transaction::where('id', $invtdUsr->trans_id)->update(['receiver_id' => $user_id, 'billing_description' => $billing_desc, 'receiver_fees' => $receiver_fees+$fees_amount, 'receiver_currency' => $user_currency, 'real_value' => $user_invited_amount1, 'receiver_close_bal' => $user_wallet, 'status' => 1, 'updated_at' => date('Y-m-d H:i:s')]);
                                      }
                                  } else {
                                      $host_currency = trim($host->currency);
                                      $user_currency = trim($userInfo->currency);
                                      $amount = $invtdUsr->amount;
                                      $user_wallet = $userInfo->wallet_amount + $invtdUsr->amount-$fees_amount;
                                      User::where('id', $user_id)->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                      //to credit receiver fees in admin wallet
                                      $admin_percentage = $this->convertCurrency($user_currency, 'USD',$fees_amount);
                                      $admin_fees = explode('##', $admin_percentage)[0];
                                      $adminInfo = User::where('id', 1)->first();
                                      $admin_wallet = ($adminInfo->wallet_amount + $admin_fees);
                                      User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);
                                      $trans = Transaction::where('id', $invtdUsr->trans_id)->first();
                                      if (!empty($trans)) {
                                          $billing_desc = $trans->billing_description;
                                          $billing_desc .= $receiver_feed_description;
                                          Transaction::where('id', $invtdUsr->trans_id)->update(['receiver_id' => $user_id, 'receiver_currency' => $userInfo->currency,'billing_description' => $billing_desc,'receiver_fees' =>$fees_amount, 'real_value' => $amount, 'status' => 1, 'updated_at' => date('Y-m-d H:i:s')]);
                                      }
                                  }
  
                                  InvitedUser::where('id', $invtdUsr->id)->update(['status' => 1]);
                              }
                          }
                      }
                  
                    //Check Invited Users End

                    $parentId = $userInfo->parent_id;
                    if ($parentId > 0) {
                        $refLink = 'refid=' . $userInfo->referral;
                        $referalInfo = DB::table('referalcodes')->select('referalcodes.*')->where('user_id', $parentId)->where('referal_link', $refLink)->first();

                        $numRegister = $referalInfo->num_register + 1;
                        Referalcode::where('user_id', $parentId)->where('referal_link', $refLink)->update(['num_register' => $numRegister]);
                    }

                    $emailId = $userInfo->email;
                    $userName = strtoupper($userInfo->business_name);
                    Tempuser::where('email', $emailId)->where('phone', $userInfo->phone)->delete();

//                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2"><span>Hey </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Welcome to DafriBank<br><br>We established DafriBank to help you manage your finance and business on the go.The DafriBank was built for smart digital entrepreneurs and merchants just like you.<br><br>We\'d love to hear what you think of our innovation and if there is anything we can improve on.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© '.date("Y").' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Hey </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Welcome to DafriBank Digital<br><br>Digital Banking means banking on the go. Anytime, anywhere and we are delighted you chose us as your financial institution.<br><br>With the DafriBank Digital superior technology, bank with ease in a totally secure online environment. It\'s faster and cheaper than banking in a branch.<br><br>As a customer-centric bank, we are open to your feedback, hence, please do not hesitate to contact us anytime through our e-mail <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>.<br><br>Regards,<br>The DafriBank Digital Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                    $emailSubject = "Welcome Onboard";
//                    $emailData['subjects'] = $emailSubject;
//                    $emailData['userName'] = $userName;
//                    $emailData['emailId'] = $emailId;
//                    Mail::send('emails.onBoarding2', $emailData, function ($message)use ($emailData, $emailId) {
//                        $message->to($emailId, $emailId)
//                                ->subject($emailData['subjects']);
//                    });

                    $account_number = $userInfo->account_number;

                    $detl = array();
                    $detl["date"] = date("d/m/Y");
                    $detl["userName"] = $userName;
                    $detl["account_number"] = $account_number;
                    $detl["acc_type"] = strtolower($userInfo->user_type);
                    $detl["address"] = $userInfo->addrs_line1;
                    $detl["address2"] = $userInfo->addrs_line2;

                    view()->share(['detl' => $detl]);

                    $customPaper = array(0, 0, 720, 1440);
                    $pdf = PDF::loadView('emails.onBoardPdf')->setPaper($customPaper, 'portrait');
                    //                        $pdf = PDF::loadView('fundtransferPdf');

                    $emailData['subjects'] = $emailSubject;
                    $emailData['userName'] = $userName;
                    $emailData['emailId'] = $emailId;
                    Mail::send('emails.onBoarding2', $emailData, function ($message)use ($emailData, $emailId, $pdf, $account_number) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subjects'])
                                ->attachData($pdf->output(), $account_number . ".pdf");
                    });

//                    $bodyEmail = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Greetings</span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Thank you for opening a DafriBank account. Please deposit a minimum of USD 10 ' . $usdString . 'within the next 10 days to ensure your account stays active. Visit and <a href="' . HTTP_PATH . '/personal-login" target="_blank">sign in</a> to your DafriBank account to see the available funding methods.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
//                    $subjectEmail = "Keep your DafriBank account active!";
//                    $emailData['subject'] = $subjectEmail;
//                    $emailData['userName'] = $userName;
//                    $emailData['emailId'] = $emailId;
//                    $emailData['usdString'] = $usdString;
//                    Mail::send('emails.onBoarding', $emailData, function ($message)use ($emailData, $emailId) {
//                        $message->to($emailId, $emailId)
//                                ->subject($emailData['subject']);
//                    });

                    if ($userInfo->currency != 'USD') {
                        $currency_10_usd = $this->myCurrencyRate($userInfo->currency, 10);
                        $currency_10_usd = ceil($currency_10_usd);
                        $usdString = '(' . $userInfo->currency . ' ' . $currency_10_usd . ') ';
                    } else {
                        $usdString = '';
                    }

                    $bodyEmail = '';
                    $bodyEmail .= '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Greetings</span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Thank you for opening a DafriBank account. Please deposit a minimum of USD 10 ' . $usdString . 'within the next 10 days to ensure your account stays active. Visit and <a href="' . HTTP_PATH . '/business-login" target="_blank">sign in</a> to your DafriBank account to see the available funding methods.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';

//                    $subjectEmail = "Keep your DafriBank Account Active!";
                    $subjectEmail = "Keep your DafriBank account active!";
                    $emailData['subject'] = $subjectEmail;
                    $emailData['userName'] = $userName;
                    $emailData['emailId'] = $emailId;
                    $emailData['usdString'] = $usdString;
                    Mail::send('emails.onBoarding', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });
//                    Mail::to($emailId)->send(new SendMailable($bodyEmail, $subjectEmail, Null));

                    return Redirect::to('/business-kyc-verification/' . $slug);
                }
            }
        }
        return view('users.businessVerify', ['title' => $pageTitle, 'userInfo' => $userInfo]);
    }

    public function businessKycVerify($slug = null) {
        $pageTitle = 'Business Account Verification';
        $userInfo = User::where('slug', $slug)->first();

        $input = Input::all();

        if (!empty($input)) { //echo '<pre>';print_r($input);exit;
            $rules = array(
//                'identity_card_type' => 'required',
//                'identity_image' => 'required|mimes:jpeg,png,jpg,pdf',
//                'address_proof_type' => 'required',
//                'address_document' => 'required|mimes:jpeg,png,jpg,pdf',
            );
            $customMessages = [
//                'identity_card_type.required' => 'The identity card is required field.',
//                'identity_image.required' => 'The identity document is required field.',
//                'address_proof_type.required' => 'The proof of address is required field.',
//                'address_document.required' => 'The proof of address document is required field.',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('/business-kyc-verification/' . $slug)->withInput();
//                return Redirect::to('/business-kyc-verification/' . $slug)->withErrors($validator)->withInput();
            } else {
                
                
                
                $h = $c = 0;
                if ((Input::hasFile('identity_image') || (Input::hasFile('identity_image_front') && Input::hasFile('identity_image_back'))) && $input['identity_card_type'] != '') {
                    $c++;
                    $h++;
                } else if ($userInfo->identity_status != 0) {
                    $c++;
                }
                if (Input::hasFile('address_document') && $input['address_proof_type'] != '') {
                    $c++;
                    $h++;
                } else if ($userInfo->address_status != 0) {
                    $c++;
                }
                if ((Input::hasFile('profile_image') || $input['selfiedata'] != '')) {
                    $c++;
                    $h++;
                } else if ($userInfo->selfie_status != 0) {
                    $c++;
                }
                
                

                if ($c > 0 && $c < 3) {
                    Session::put('failed_session_message', 'Please upload all documents.');
                    return Redirect::to('/business-kyc-verification/' . $slug);
                }
                
                if (($userInfo->kyc_decline_type == 2) && $h > 0) {
                    Session::put('failed_session_message', 'Your KYC status is finally rejected so you can not upload it again. Please contact admin for more details.');
                    return Redirect::to('/business-kyc-verification/' . $slug);
                }

                $applicantId = $userInfo->kyc_applicant_id;

                if ($input['identity_card_type'] != '' && $input['identity_card_type'] == 'Passport') {
                    if (Input::hasFile('identity_image')) {
                        $file = Input::file('identity_image');
                        $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $input['identity_image'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['identity_image'];
                        // $idDocTyp = $input['identity_card_type'];
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['identity_image']);
                    }
                } else if ($input['identity_card_type'] != '') {
                    if (Input::hasFile('identity_image_front')) {
                        $file = Input::file('identity_image_front');
                        $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $input['identity_image'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['identity_image'];
                        // $idDocTyp = $input['identity_card_type'];
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocumentFront($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['identity_image']);
                    }



                    if (Input::hasFile('identity_image_back')) {
                        $file = Input::file('identity_image_back');
                        $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $input['identity_image_back'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['back_identity_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['back_identity_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['identity_image_back'];
                        // $idDocTyp = $input['identity_card_type'];
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocumentBack($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['identity_image_back']);
                    }
                }

                unset($input['identity_image_front']);

                if (Input::hasFile('address_document')) {
                    $file = Input::file('address_document');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['address_document'] = $uploadedFileName;

                    // if ($applicantId == '') {
                    //     $applicantId = $this->createApplicant($userInfo->id);
                    //     User::where('id', $userInfo->id)->update(['address_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                    // } else {
                    //     $applicantId = $applicantId;
                    //     User::where('id', $userInfo->id)->update(['address_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                    // }

                    // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['address_document'];
                    // $idDocTyp = $input['address_proof_type'];
                    // $country = $userInfo->country;
                    // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                } else {
                    unset($input['address_document']);
                }

                if (Input::hasFile('profile_image')) {
                    $file = Input::file('profile_image');
                    $uploadedFileName = $this->uploadImage($file, PROFILE_FULL_UPLOAD_PATH);
//                    $this->resizeImage($uploadedFileName, PROFILE_FULL_UPLOAD_PATH, PROFILE_SMALL_UPLOAD_PATH, PROFILE_MW, PROFILE_MH);
                    $input['profile_image'] = $uploadedFileName;

                    // if ($applicantId == '') {
                    //     $applicantId = $this->createApplicant($userInfo->id);
                    //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                    // } else {
                    //     $applicantId = $applicantId;
                    //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                    // }

                    // $imgURL = PROFILE_FULL_UPLOAD_PATH . $input['profile_image'];
                    // $idDocTyp = 'Selfie';
                    // $country = $userInfo->country;
                    // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                } else {
                    if ($input['selfiedata'] != '') {
                        $encoded_data = $input['selfiedata'];
                        $binary_data = base64_decode($encoded_data);
//                        echo '<pre>123';
//            print_r($binary_data);
//            exit;
                        $uploadedFileName = 'webcam' . time() . '.jpg';
                        $result = file_put_contents(PROFILE_FULL_UPLOAD_PATH . $uploadedFileName, $binary_data);
//                        $uploadedFileName = $this->uploadImage($binary_data, PROFILE_FULL_UPLOAD_PATH);
//                        $this->resizeImage($uploadedFileName, PROFILE_FULL_UPLOAD_PATH, PROFILE_SMALL_UPLOAD_PATH, PROFILE_MW, PROFILE_MH);
                        $input['profile_image'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = PROFILE_FULL_UPLOAD_PATH . $input['profile_image'];
                        // $idDocTyp = 'Selfie';
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['profile_image']);
                    }
                }
                if (Input::hasFile('written_notes')) {
                    $file = Input::file('written_notes');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['written_notes'] = $uploadedFileName;
                } else {
                    unset($input['written_notes']);
                }
                if (Input::hasFile('registration_document')) {
                    $file = Input::file('registration_document');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['registration_document'] = $uploadedFileName;
                } else {
                    unset($input['registration_document']);
                }
                /*                 * ********* */
                if (Input::hasFile('certificate_of_incorporation')) {
                    $file = Input::file('certificate_of_incorporation');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['certificate_of_incorporation'] = $uploadedFileName;
                } else {
                    unset($input['certificate_of_incorporation']);
                }
                if (Input::hasFile('article')) {
                    $file = Input::file('article');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['article'] = $uploadedFileName;
                } else {
                    unset($input['article']);
                }
                if (Input::hasFile('memorandum')) {
                    $file = Input::file('memorandum');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['memorandum'] = $uploadedFileName;
                } else {
                    unset($input['memorandum']);
                }
                if (Input::hasFile('tax_certificate')) {
                    $file = Input::file('tax_certificate');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['tax_certificate'] = $uploadedFileName;
                } else {
                    unset($input['tax_certificate']);
                }
                if (Input::hasFile('address_proof')) {
                    $file = Input::file('address_proof');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['address_proof'] = $uploadedFileName;
                } else {
                    unset($input['address_proof']);
                }
                if (Input::hasFile('identity')) {
                    $file = Input::file('identity');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['identity'] = $uploadedFileName;
                } else {
                    unset($input['identity']);
                }
                if (Input::hasFile('person_identity')) {
                    $file = Input::file('person_identity');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['person_identity'] = $uploadedFileName;
                } else {
                    unset($input['person_identity']);
                }
                unset($input['selfiedata']);
                
                if(empty($input['identity_card_type'])){
                    unset($input['identity_card_type']);
                }
                if(empty($input['address_proof_type'])){
                    unset($input['address_proof_type']);
                }
                if(empty($input['national_identity_number'])){
                    unset($input['national_identity_number']);
                }
                if(empty($input['address_proof_number'])){
                    unset($input['address_proof_number']);
                }

                $serialisedData = $this->serialiseFormData($input);
                $serialisedData['status'] = 1;

                if (Input::hasFile('identity_image') || (Input::hasFile('identity_image_front') && Input::hasFile('identity_image_back')) || Input::hasFile('address_document') || Input::hasFile('profile_image') || Input::hasFile('selfiedata')) {
                $serialisedData['is_kyc_done'] = 0;
                $serialisedData['back_identity_status'] = 0;
                $serialisedData['identity_status'] = 0;
                $serialisedData['selfie_status'] = 0;
                $serialisedData['address_status'] = 0;
               // $this->changeApplicantStatus($applicantId);
                }

                User::where('id', $userInfo->id)->update($serialisedData);

                Session::put('user_id', $userInfo->id);
                Session::put('user_name', strtoupper($userInfo->first_name));
                Session::put('email', $userInfo->email);
                return Redirect::to('/overview');

                //Session::flash('success_message', "Your account has been registered successfully. We will notify you after the admin approval.");
                //return Redirect::to('/business-login');
            }
        }
        return view('users.businessKycVerify', ['title' => $pageTitle]);
    }

    public function businessKycUpdate($slug = null) {
        $pageTitle = 'Business Account Verification';
        $userInfo = User::where('slug', $slug)->first();

        $input = Input::all();

        if (!empty($input)) { //echo '<pre>';print_r($input);exit;
            $rules = array(
//                'identity_card_type' => 'required',
//                'identity_image' => 'required|mimes:jpeg,png,jpg,pdf',
//                'address_proof_type' => 'required',
//                'address_document' => 'required|mimes:jpeg,png,jpg,pdf',
            );
            $customMessages = [
//                'identity_card_type.required' => 'The identity card is required field.',
//                'identity_image.required' => 'The identity document is required field.',
//                'address_proof_type.required' => 'The proof of address is required field.',
//                'address_document.required' => 'The proof of address document is required field.',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('/business-kyc-verification/' . $slug)->withInput();
//                return Redirect::to('/business-kyc-verification/' . $slug)->withErrors($validator)->withInput();
            } else {

                $h = $c = 0;
                if ((Input::hasFile('identity_image') || (Input::hasFile('identity_image_front') && Input::hasFile('identity_image_back'))) && $input['identity_card_type'] != '') {
                    $c++;
                    $h++;
                } else if ($userInfo->identity_status != 0) {
                    $c++;
                }
                if (Input::hasFile('address_document') && $input['address_proof_type'] != '') {
                    $c++;
                    $h++;
                } else if ($userInfo->address_status != 0) {
                    $c++;
                }
                if ((Input::hasFile('profile_image') || $input['selfiedata'] != '')) {
                    $c++;
                    $h++;
                } else if ($userInfo->selfie_status != 0) {
                    $c++;
                }

                if ($c > 0 && $c < 3) {
                    Session::put('failed_session_message', 'Please upload all documents.');
                    return Redirect::to('/business-kyc-update/' . $slug);
                }
                
                if (($userInfo->kyc_decline_type == 2) && $h > 0) {
                    Session::put('failed_session_message', 'Your KYC status is finally rejected so you can not upload it again. Please contact admin for more details.');
                    return Redirect::to('/business-kyc-update/' . $slug);
                }

                $applicantId = $userInfo->kyc_applicant_id;

                if ($input['identity_card_type'] != '' && $input['identity_card_type'] == 'Passport') {
                    if (Input::hasFile('identity_image')) {
                        $file = Input::file('identity_image');
                        $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $input['identity_image'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['identity_image'];
                        // $idDocTyp = $input['identity_card_type'];
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['identity_image']);
                    }
                } else if ($input['identity_card_type'] != '') {
                    if (Input::hasFile('identity_image_front')) {
                        $file = Input::file('identity_image_front');
                        $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $input['identity_image'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['identity_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['identity_image'];
                        // $idDocTyp = $input['identity_card_type'];
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocumentFront($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['identity_image']);
                    }



                    if (Input::hasFile('identity_image_back')) {
                        $file = Input::file('identity_image_back');
                        $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $input['identity_image_back'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['back_identity_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['back_identity_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['identity_image_back'];
                        // $idDocTyp = $input['identity_card_type'];
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocumentBack($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['identity_image_back']);
                    }
                }

                unset($input['identity_image_front']);

                if (Input::hasFile('address_document')) {
                    $file = Input::file('address_document');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['address_document'] = $uploadedFileName;

                    // if ($applicantId == '') {
                    //     $applicantId = $this->createApplicant($userInfo->id);
                    //     User::where('id', $userInfo->id)->update(['address_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                    // } else {
                    //     $applicantId = $applicantId;
                    //     User::where('id', $userInfo->id)->update(['address_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                    // }

                    // $imgURL = DOCUMENT_FULL_UPLOAD_PATH . $input['address_document'];
                    // $idDocTyp = $input['address_proof_type'];
                    // $country = $userInfo->country;
                    // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                } else {
                    unset($input['address_document']);
                }

                /*                 * ********* */
                if (Input::hasFile('certificate_of_incorporation')) {
                    $file = Input::file('certificate_of_incorporation');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['certificate_of_incorporation'] = $uploadedFileName;
                } else {
                    unset($input['certificate_of_incorporation']);
                }
                if (Input::hasFile('article')) {
                    $file = Input::file('article');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['article'] = $uploadedFileName;
                } else {
                    unset($input['article']);
                }
                if (Input::hasFile('memorandum')) {
                    $file = Input::file('memorandum');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['memorandum'] = $uploadedFileName;
                } else {
                    unset($input['memorandum']);
                }
                if (Input::hasFile('written_notes')) {
                    $file = Input::file('written_notes');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['written_notes'] = $uploadedFileName;
                } else {
                    unset($input['written_notes']);
                }
                if (Input::hasFile('tax_certificate')) {
                    $file = Input::file('tax_certificate');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['tax_certificate'] = $uploadedFileName;
                } else {
                    unset($input['tax_certificate']);
                }
                if (Input::hasFile('address_proof')) {
                    $file = Input::file('address_proof');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['address_proof'] = $uploadedFileName;
                } else {
                    unset($input['address_proof']);
                }
                if (Input::hasFile('identity')) {
                    $file = Input::file('identity');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['identity'] = $uploadedFileName;
                } else {
                    unset($input['identity']);
                }
                if (Input::hasFile('person_identity')) {
                    $file = Input::file('person_identity');
                    $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                    //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                    $input['person_identity'] = $uploadedFileName;
                } else {
                    unset($input['person_identity']);
                }

                if (Input::hasFile('profile_image')) {
                    $file = Input::file('profile_image');
                    $uploadedFileName = $this->uploadImage($file, PROFILE_FULL_UPLOAD_PATH);
//                    $this->resizeImage($uploadedFileName, PROFILE_FULL_UPLOAD_PATH, PROFILE_SMALL_UPLOAD_PATH, PROFILE_MW, PROFILE_MH);
                    $input['profile_image'] = $uploadedFileName;

                    // if ($applicantId == '') {
                    //     $applicantId = $this->createApplicant($userInfo->id);
                    //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                    // } else {
                    //     $applicantId = $applicantId;
                    //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                    // }

                    // $imgURL = PROFILE_FULL_UPLOAD_PATH . $input['profile_image'];
                    // $idDocTyp = 'Selfie';
                    // $country = $userInfo->country;
                    // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                } else {
                    if ($input['selfiedata'] != '') {
                        $encoded_data = $input['selfiedata'];
                        $binary_data = base64_decode($encoded_data);
//                        echo '<pre>123';
//            print_r($binary_data);
//            exit;
                        $uploadedFileName = 'webcam' . time() . '.jpg';
                        $result = file_put_contents(PROFILE_FULL_UPLOAD_PATH . $uploadedFileName, $binary_data);
//                        $uploadedFileName = $this->uploadImage($binary_data, PROFILE_FULL_UPLOAD_PATH);
//                        $this->resizeImage($uploadedFileName, PROFILE_FULL_UPLOAD_PATH, PROFILE_SMALL_UPLOAD_PATH, PROFILE_MW, PROFILE_MH);
                        $input['profile_image'] = $uploadedFileName;

                        // if ($applicantId == '') {
                        //     $applicantId = $this->createApplicant($userInfo->id);
                        //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'kyc_applicant_id' => $applicantId, 'updated_at' => date('Y-m-d H:i:s')]);
                        // } else {
                        //     $applicantId = $applicantId;
                        //     User::where('id', $userInfo->id)->update(['selfie_status' => 0, 'updated_at' => date('Y-m-d H:i:s')]);
                        // }

                        // $imgURL = PROFILE_FULL_UPLOAD_PATH . $input['profile_image'];
                        // $idDocTyp = 'Selfie';
                        // $country = $userInfo->country;
                        // $imgID = $this->addDocument($applicantId, $imgURL, $idDocTyp, $country);
                    } else {
                        unset($input['profile_image']);
                    }
                }
                unset($input['selfiedata']);

                if (empty($input['identity_card_type'])) {
                    unset($input['identity_card_type']);
                }
                if (empty($input['address_proof_type'])) {
                    unset($input['address_proof_type']);
                }
                if (empty($input['national_identity_number'])) {
                    unset($input['national_identity_number']);
                }
                if (empty($input['address_proof_number'])) {
                    unset($input['address_proof_number']);
                }

                $serialisedData = $this->serialiseFormData($input);
                $serialisedData['status'] = 1;
                if (Input::hasFile('identity_image') || (Input::hasFile('identity_image_front') && Input::hasFile('identity_image_back')) || Input::hasFile('address_document') || Input::hasFile('profile_image') || Input::hasFile('selfiedata')) {
                    $serialisedData['is_kyc_done'] = 0;
                    $serialisedData['back_identity_status'] = 0;
                    $serialisedData['identity_status'] = 0;
                    $serialisedData['selfie_status'] = 0;
                    $serialisedData['address_status'] = 0;
                 //   $this->changeApplicantStatus($applicantId);
                }

                User::where('id', $userInfo->id)->update($serialisedData);

                Session::put('user_id', $userInfo->id);
                Session::put('user_name', strtoupper($userInfo->first_name));
                Session::put('email', $userInfo->email);
                return Redirect::to('/overview');

                //Session::flash('success_message', "Your account has been registered successfully. We will notify you after the admin approval.");
                //return Redirect::to('/business-login');
            }
        }
        return view('users.businessKycVerify', ['title' => $pageTitle, 'recordInfo' => $userInfo]);
    }

    public function personalLogin() {
        $pageTitle = 'Personal Login';
  
        return view('users.personalLogin', ['title' => $pageTitle]);
    }

    public function businessLogin() {
        $pageTitle = 'Business Login';
        $input = Input::all();

        //echo"<pre>";print_r($input);die;
       if (!empty($input)) {
           $rules = array(
               'email' => 'required|email',
               'password' => 'required'
           );
           $input['password'] = trim($input['password']);
//            echo $input['password']; exit;
           $input['email'] = trim($input['email']);
           $validator = Validator::make($input, $rules);
           if ($validator->fails()) {
               $messages = $validator->messages();
               $message = implode('<br>', $messages->all());

               Session::put('error_session_message', $message);
               return Redirect::to('/personal-login')->withInput(Input::except('password'));
//                return Redirect::to('/personal-login')->withErrors($validator)->withInput(Input::except('password'));
           } else {
               $time = time();
               $time1 = date('Y-m-d H:i:s', $time);
               
               $userInfo = User::where('email', $input['email'])->first();
               if (!empty($userInfo)) {

                       if ($userInfo->user_type == 'Personal') {
                       $userName = strtoupper(trim($userInfo->first_name) . ' ' . trim($userInfo->last_name));
                       }
                       elseif ($userInfo->user_type == 'Business') {
                       $userName = strtoupper(trim($userInfo->business_name));
                       }
                       else if ($userInfo->user_type == 'Agent' && $userInfo->first_name == "") {
                       $userName = strtoupper(trim($userInfo->business_name));
                       }
                       else if ($userInfo->user_type == 'Agent' && $userInfo->first_name != "") {
                       $userName = strtoupper(trim($userInfo->first_name) . ' ' . trim($userInfo->last_name));
                       }

                   if (strtotime($userInfo->updated_at) > strtotime($time1)) {
                       $error = 'Your account has been blocked. Please try again after 24 hours.';
                   } else {
//                    echo '<pre>';print_r($userInfo);
                       if (password_verify($input['password'], $userInfo->password)) {
                           if ($userInfo->user_type == 'Business') {
//                            Session::flash('error_message', "Please login as Business Account.");
                               Session::put('error_session_message', "Please login as Business Account.");
                               return Redirect::to('/business-login');
                           } else if ($userInfo->user_type == 'Agent' and $userInfo->first_name == "") {
//                            Session::flash('error_message', "Please login as Business Account.");
                               Session::put('error_session_message', "Please login as Business Account.");
                               return Redirect::to('/business-login');
                           }

                           if ($userInfo->otp_verify == 1 && $userInfo->is_verify == 1) {
                               if ($userInfo->is_kyc_done == 2) {
                                   return Redirect::to('/personal-kyc-verification/' . $userInfo->slug);
                               } else {


                                   $last_login = date('Y-m-d h:i:s', strtotime($userInfo->last_login));
                                   $currTime = date('Y-m-d h:i:s');
                                   $timestamp1 = strtotime($last_login);
                                   $timestamp2 = strtotime($currTime);
                                   $totalHours = abs($timestamp2 - $timestamp1) / (60 * 60);
                                   if ($totalHours < 24) {
                                       if($userInfo->user_device_ip!=$this->get_client_ip())
                                       {
                                      
                                       $emailId = $userInfo->email;
                                       $emailSubject = 'DafriBank Digital - OTP Requested';

                                       $emailData['subject'] = $emailSubject;
                                       $emailData['userName'] = $userName;
                                       $otp = mt_rand(100000, 999999);
                                       $verifyCode = $this->encpassword($otp);
                                       $emailData['otp'] = $otp;

                                       User::where('id', $userInfo->id)->update(array('verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s')));

                                       Mail::send('emails.loginOTP', $emailData, function ($message)use ($emailData, $emailId) {
                                           $message->to($emailId, $emailId)
                                                   ->subject($emailData['subject']);
                                       });

                                       return Redirect::to('/account-verification/' . $userInfo->slug);
                                       }
                                       
                                       if (isset($input['user_remember']) && $input['user_remember'] == '1') {
                                           Cookie::queue('user_email_address', $userInfo->email, time() + 60 * 60 * 24 * 7, "/");
                                           Cookie::queue('user_password', $input['password'], time() + 60 * 60 * 24 * 7, "/");
                                           Cookie::queue('user_remember', '1', time() + 60 * 60 * 24 * 100, "/");
                                       } else {
                                           Cookie::queue('user_email_address', '', time() + 60 * 60 * 24 * 7, "/");
                                           Cookie::queue('user_password', '', time() + 60 * 60 * 24 * 7, "/");
                                           Cookie::queue('user_remember', '', time() + 60 * 60 * 24 * 7, "/");
                                       }

                                       $emailSubject = 'DafriBank Digital | Login successful';

                                       $emailId = $userInfo->email;
                                       $emailData['subject'] = $emailSubject;
                                       $emailData['userName'] = $userName;
                                       $emailData['ip'] = $this->get_client_ip();

                                       Mail::send('emails.login', $emailData, function ($message)use ($emailData, $emailId) {
                                           $message->to($emailId, $emailId)
                                                   ->subject($emailData['subject']);
                                       });

                                       $modified = date('Y-m-d H:i:s', time());
                                       $is_logged_in=1;
                                       $session_id = Session::getId();
                                       User::where('id', $userInfo->id)->update(array('last_login' => $modified,'is_logged_in'=>$is_logged_in,'current_session_id'=>$session_id));

                                       Session::put('user_id', $userInfo->id);
                                       Session::put('user_name', strtoupper($userInfo->first_name));
                                       Session::put('email', $userInfo->email);
                                       Session::forget('Userloginstatus');
                                       return Redirect::to('/overview');
                                   } else {
                                       $emailId = $userInfo->email;
                                       $emailSubject = 'DafriBank Digital - OTP Requested';

                                       $emailData['subject'] = $emailSubject;
                                       $emailData['userName'] = $userName;
                                       $otp = mt_rand(100000, 999999);
                                       $verifyCode = $this->encpassword($otp);
                                       $emailData['otp'] = $otp;

                                       User::where('id', $userInfo->id)->update(array('verify_code' => $verifyCode, 'user_device_ip' => $this->get_client_ip(),'otp_time' => date('Y-m-d H:i:s')));

                                       Mail::send('emails.loginOTP', $emailData, function ($message)use ($emailData, $emailId) {
                                           $message->to($emailId, $emailId)
                                                   ->subject($emailData['subject']);
                                       });

                                       return Redirect::to('/account-verification/' . $userInfo->slug);
                                   }
                               }
                           } else if ($userInfo->otp_verify == 0 || $userInfo->is_verify == 0) {
                               $error = 'Your account might have been temporarily disabled. Please contact us for more details.';
                           }
               
                       } else {
                          
                            
                           Session::forget('user_id');

                           $i = Session::get('Userloginstatus');
                           if ($i < 4) {
                               $i = 1 + $i;
                               Session::put('Userloginstatus', $i);
                           }
                           if ($i == 1) {
                               $error = 'Invalid email or password. you have three more attempts.';
                           }
                           if ($i == 2) {
                               $error = 'Invalid email or password. you have two more attempts.';
                           }
                           if ($i == 3) {
                               $error = 'Invalid email or password. you have one more attempts.';
                           }
                           if ($i == 4) {
                               if (!empty($userInfo)) {
                                   $emailSubject = 'DafriBank Digital | Login failed';

                                   $emailId = $userInfo->email;
                                   $emailData['subject'] = $emailSubject;
                                   $emailData['userName'] = $userName;
                                   $emailData['ip'] = $this->get_client_ip();

                                   Mail::send('emails.loginFail', $emailData, function ($message)use ($emailData, $emailId) {
                                       $message->to($emailId, $emailId)
                                               ->subject($emailData['subject']);
                                   });
                               }
                               if ($userInfo->updated_at <= date('Y-m-d H:i:s', time())) {
                                   $modified = date('Y-m-d H:i:s', time() + 30 * 60);

                                   User::where('id', $userInfo->id)->update(array('updated_at' => $modified));
                               }

                               $error = 'Invalid email or password. now your account is deactivated for 24 hours.';
                           }
                       }
                   }
               } else {
                   $error = 'Invalid email or password.';
               }
               Session::put('error_session_message', $error);
               return Redirect::to('/personal-login')->withInput(Input::except('password'));
           }
       }
        return view('users.businessLogin', ['title' => $pageTitle]);
    }

    public function otpVerify($slug = null) {
        $pageTitle = 'Account Verification';
        $userInfo = User::where('slug', $slug)->orderBy('id', 'DESC')->first();

        $input = Input::all();

        if (!empty($input)) { //echo '<pre>';print_r($input);exit;
            if ($input['otp_code'] == '' || $input['otp_code1'] == '' || $input['otp_code2'] == '' || $input['otp_code3'] == '' || $input['otp_code4'] == '' || $input['otp_code5'] == '') {
                Session::put('error_session_message', 'You have entered invalid verification code.');
                return Redirect::to('/account-verification/' . $slug);
            } else {
                $otp_code = $input['otp_code'] . $input['otp_code1'] . $input['otp_code2'] . $input['otp_code3'] . $input['otp_code4'] . $input['otp_code5'];

                $dateChk = date('Y-m-d H:i', strtotime('+15 minutes', strtotime($userInfo->otp_time)));

                if (!password_verify($otp_code, $userInfo->verify_code) || date('Y-m-d H:i') > $dateChk) {
                    Session::put('error_session_message', 'You have entered wrong verification code.');
                    return Redirect::to('/account-verification/' . $slug);
//                    return Redirect::to('/business-account-verification/' . $slug)->withErrors('You have entered wrong verification code.');
                } else {

                    User::where('id', $userInfo->id)->update(array('user_device_ip' => $this->get_client_ip()));


                    $emailSubject = 'DafriBank Digital | Login successful';

                    $emailId = $userInfo->email;
                    $emailData['subject'] = $emailSubject;
                
                        if ($userInfo->user_type == 'Personal') {
                        $emailData['userName']  = strtoupper(trim($userInfo->first_name) . ' ' . trim($userInfo->last_name));
                        }
                        elseif ($userInfo->user_type == 'Business') {
                        $emailData['userName'] = strtoupper(trim($userInfo->business_name));
                        }
                        else if ($userInfo->user_type == 'Agent' && $userInfo->first_name == "") {
                        $emailData['userName'] = strtoupper(trim($userInfo->business_name));
                        }
                        else if ($userInfo->user_type == 'Agent' && $userInfo->first_name != "") {
                        $emailData['userName']  = strtoupper(trim($userInfo->first_name) . ' ' . trim($userInfo->last_name));
                        }

                    $emailData['ip'] = $this->get_client_ip();

                    Mail::send('emails.login', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });

                    $modified = date('Y-m-d H:i:s', time());
                    $session_id = Session::getId();
                    $is_logged_in=1;
                    User::where('id', $userInfo->id)->update(array('last_login' => $modified,'is_logged_in'=>$is_logged_in,'current_session_id'=>$session_id));

                    Session::put('user_id', $userInfo->id);
                    Session::put('user_name', strtoupper($userInfo->first_name));
                    Session::put('email', $userInfo->email);
                    Session::forget('Userloginstatus');
                    return Redirect::to('/overview');
                }
            }
        }
        return view('users.otpVerify', ['title' => $pageTitle, 'userInfo' => $userInfo]);
    }

    public function forgotPassword() {
        $pageTitle = 'Forgot Password';
        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'email' => 'required|email',
            );
            $validator = Validator::make($input, $rules);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('/forgot-password');
//                return Redirect::to('/forgot-password')->withErrors($validator);
            } else {
                $userInfo = User::where('email', $input['email'])->first();
                if (!empty($userInfo)) {
                    $uniqueKey = bin2hex(openssl_random_pseudo_bytes(25));
                    User::where('id', $userInfo->id)->update(array('forget_password_status' => 1, 'unique_key' => $uniqueKey, 'forgot_req_time' => date('Y-m-d H:i:s')));

                    $link = HTTP_PATH . "/reset-password/" . $uniqueKey;
//                    if ($userInfo->user_type == 'Personal') {
//                        $name = ucwords($userInfo->first_name);
//                    } else {
//                        $name = ucwords($userInfo->business_name);
//                    }

                    if ($userInfo->user_type == 'Personal') {
                        $name = strtoupper($userInfo->first_name);
                    } else if ($userInfo->user_type == 'Business') {
                        $name = strtoupper($userInfo->business_name);
                    } else if ($userInfo->user_type == 'Agent' and $userInfo->first_name != "") {
                        $name = strtoupper($userInfo->first_name);
                    } else if ($userInfo->user_type == 'Agent' and $userInfo->business_name != "") {
                        $name = strtoupper($userInfo->business_name);
                    }

                    $emailId = $userInfo->email;

                    $emailSubject = 'Forgot Password';
//                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2"><span>Dear</span> ' . $name . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">You recently requested to reset your password for your DafriBank account. Use the button below to reset it. This password reset is only valid for the next 24 hours.<br><br><a style="background:#000; color:#FFF; padding:8px 20px; border-radius:5px; display:inline-block;" href="' . $link . '" target="_blank">Click here</a><br><br>If you did not request a password reset, please ignore this email or contact us for any questions.<br><br>For Security, this request was received from I.P. address: ' . $this->get_client_ip() . '<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
//                    $emailBody = '<table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"> <tr> <td> <h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2"><span>Dear</span> ' . $name . ',</h4> <p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">You recently requested to reset your password for your DafriBank account. Use the button below to reset it. This password reset is only valid for the next 24 hours.<br><br><a style="background:#000; color:#FFF; padding:8px 20px; border-radius:5px; display:inline-block;" href="' . $link . '" target="_blank">Click here</a><br><br>If you did not request a password reset, please ignore this email or contact us for any questions.<br><br>For Security, this request was received from I.P. address: ' . $this->get_client_ip() . '<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p> </td> </tr> </table>';
                    //                    Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                    $emailData['subject'] = $emailSubject;
                    $emailData['name'] = $name;
                    $emailData['link'] = $link;
                    $emailData['ip'] = $this->get_client_ip();

                    Mail::send('emails.template', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->from('noreply@dafribank.co.za', 'DafriBank')
                                ->subject($emailData['subject']);
                    });

                    Session::put('success_session_message', "A link to reset your password has been sent to your email address.");
//                    Session::flash('success_message', "A link to reset your password has been sent to your email address.");
                    return Redirect::to('/verify-email?email='.$input['email']);
                } else {
                    $error = 'Please enter valid email address.';
                }
                Session::put('error_session_message', $error);
                return Redirect::to('/forgot-password');
            }
        }
        return view('users.forgotPassword', ['title' => $pageTitle]);
    }

    public function verifyEmail(Request $request){
        return view('users.verify-email',);
    }

    public function verify($ukey = null) {
        $pageTitle = 'Verify Account';
        $userInfo = User::where('unique_key', $ukey)->first();
        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'code' => 'required'
            );
            $validator = Validator::make($input, $rules);
            $dateChk = date('Y-m-d H:i', strtotime('+15 minutes', strtotime($userInfo->otp_time)));

            if ($validator->fails()) {
                return Redirect::to('/verify/' . $ukey)->withErrors($validator);
            } elseif (!password_verify($input['code'], $userInfo->verify_code) || date('Y-m-d H:i') > $dateChk) {
                return Redirect::to('/verify/' . $ukey)->withErrors('You have entered invalid verification code.');
            } else {
                User::where('id', $userInfo->id)->update(array('status' => 1, 'is_verify' => 1, 'is_email_verify' => 1));
                Session::flash('success_message', "User account verified successfully.");
                return Redirect::to('/login');
            }
        }
        return view('users.verify', ['title' => $pageTitle]);
    }

    public function resetPassword($ukey = null) {
        $pageTitle = 'Reset Password';
        $userInfo = User::where('unique_key', $ukey)->first();
        $userForgotTime = $userInfo->forgot_req_time;
        if ($userInfo && $userInfo->forget_password_status == 1) {

            $current_time = date('Y-m-d H:i:s');
            $to_time = strtotime($current_time);
            $from_time = strtotime($userForgotTime);
            $timedifference = round(abs($to_time - $from_time) / 60);
            if ($timedifference > 60) {
                User::where('id', $userInfo->id)->update(array('forget_password_status' => 0, 'forgot_req_time' => NULL));
                Session::put('error_session_message', "Your reset password link has been expired.Please generate a new link again !");
                return Redirect::to('/forgot-password');
            }

            $input = Input::all();
            if (!empty($input)) {
                $rules = array(
                    'password' => 'required|min:8',
                    'confirm_password' => 'required|same:password',
                );
                $validator = Validator::make($input, $rules);
                if ($validator->fails()) {
                    $messages = $validator->messages();
                    $message = implode('<br>', $messages->all());

                    Session::put('error_session_message', $message);
                    return Redirect::to('/reset-password/' . $ukey);
//                    return Redirect::to('/reset-password/' . $ukey)->withErrors($validator);
                } elseif (password_verify($input['password'], $userInfo->password)) {
                    Session::put('error_session_message', "You cannot put your old password as new password, please use another password.");
                    return Redirect::to('/reset-password/' . $ukey);
//                    return Redirect::to('/reset-password/' . $ukey)->withErrors('You cannot put your old password as new password, please use another password.');
                } else {
                    $new_password = $this->encpassword($input['password']);
                    User::where('id', $userInfo->id)->update(array('forget_password_status' => 0, 'password' => $new_password));

                    $emailId = $userInfo->email;
                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> Customer,</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">This is to inform you that your account password has been successfully changed by you using DafriBank\'s Digital services.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                    $emailSubject = "Login Password Changed";
//                    Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                    if ($userInfo->user_type == 'Personal') {
                        $userName = strtoupper($userInfo->first_name);
                    } else {
                        $userName = strtoupper($userInfo->business_name);
                    }

                    $emailData['subject'] = $emailSubject;
                    $emailData['ip'] = $this->get_client_ip();
                    $emailData['userName'] = $userName;
                    Mail::send('emails.passwordTemplate', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });

//                    Session::flash('success_message', "Password updated successfully.");
                    Session::put('success_session_message', "Password updated successfully.");
                    if ($userInfo->user_type == 'Personal') {
                        return Redirect::to('/');
                    } else {
                        return Redirect::to('/');
                    }
                }
            }
            return view('users.resetPassword', ['title' => $pageTitle]);
        } else {
            Session::put('error_session_message', "You have already use this link!");
//            Session::flash('error_message', "You have already use this link!");
            return Redirect::to('/personal-login');
        }
    }

    public function logout() {
        //$user_type = Session::get('user_type');
        $userID = Session::get('user_id');
        $user = User::where('id', $userID)->first();
        User::where('id', $userID)->update(array('is_logged_in'=>0));
        $userTyp = '';
        if (isset($user->user_type)) {
            $userTyp = $user->user_type;
        }
        Session::forget('user_id');
        Session::forget('user_name');
        Session::forget('email');
        Session::save();
        if ($userTyp == "Personal") {
            return Redirect::to('/personal-login');
        } else if ($userTyp == "Business") {
            return Redirect::to('/business-login');
        } else if ($userTyp == "Agent" && $user->first_name != "") {
            return Redirect::to('/personal-login');
        } else if ($userTyp == "Agent" && $user->business_name != "") {
            return Redirect::to('/business-login');
        } else {
            return Redirect::to('/personal-login');
        }
        //Session::flash('success_message', "Logout successfully.");
        //print_r($user);
        //$user = User::where('id',$userID)->first();
//        if ($userTyp == 'Personal') {
//            return Redirect::to('/personal-login');
//        } else {
//            return Redirect::to('/business-login');
//        }
    }

    public function overview() {
        $pageTitle = 'User Overview';
        $activetab = 'actdashboard';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        if ($recordInfo->user_type == 'Agent') {
            $agent = Agent::where('user_id', $recordInfo->id)->first();
        }

        if ($recordInfo->user_type == "Personal") {
            $accountName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == "Business") {
            $accountName = strtoupper($recordInfo->business_name);
        } else if ($recordInfo->user_type == "Agent" && $recordInfo->first_name != "") {
            $accountName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == "Agent" && $recordInfo->business_name != "") {
            $accountName = strtoupper($recordInfo->business_name);
        }
       
        $enc_user_id=$this->encstring($recordInfo->id);

        Session::forget('depositMthd6_4');
        Session::forget('withdrawMthd6_4');
        Session::forget('withdrawAmntAgnt64');
        if ($recordInfo->user_type == 'Agent') {
            //DB::enableQueryLog();	
            $query = new Transaction();
            $query = $query->sortable();
            $query = $query->where("user_id", Session::get('user_id'));
            $query = $query->orWhere("receiver_id", Session::get('user_id'))->orWhere('receiver_id', $agent->id);
            $trans = $query->orderBy('id', 'DESC')->paginate(6);
            //dd(DB::getQueryLog());
        } else {
            $trans = Transaction::where("user_id", Session::get('user_id'))->orWhere('receiver_id', Session::get('user_id'))->orderBy('id', 'DESC')->paginate(6);
        }

        $getLastWeek = DB::select("SELECT created_at FROM transactions WHERE created_at >= curdate() - INTERVAL DAYOFWEEK(curdate())+6 DAY AND created_at < curdate() - INTERVAL DAYOFWEEK(curdate())-1 DAY");
        //print_r($getLastWeek); //exit;

        $startDate = date("Y-m-d", strtotime("last week monday"));
        $startDate = new \DateTime($startDate);
        $endDate = date("Y-m-d", strtotime("last week sunday"));
        $endDate = new \DateTime($endDate);

        $total_income = 0;
        $dayAmountArr = array();
        $incomeArr = array();
        $total_expense = 0;
        $expensArr = array();
        $i = 0;
        //foreach($getLastWeek as $lastweek)
        for ($g = $startDate; $g < $endDate; $g->modify('+1 day')) {
            //$dt = date_create($lastweek->created_at);
            //$date = date_format($dt,'Y-m-d');
            $date = $g->format('Y-m-d');
            $toDate = $date . ' 00:00:00';
            $fromDate = $date . ' 23:59:59';
            //echo "To Date: ".$toDate." :: From Date: ".$fromDate."<br><br>";
            if (!array_key_exists($date, $dayAmountArr)) {
                //DB::enableQueryLog();	  

                $dayTtlAmount1 = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->whereBetween('created_at', array($toDate, $fromDate))->sum('transactions.real_value');

                $dayTtlAmount2 = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('status', 1)->whereBetween('created_at', array($toDate, $fromDate))->sum('transactions.real_value');
                $total_income = $total_income + $dayTtlAmount1 + $dayTtlAmount2;
                //dd(DB::getQueryLog());
                $dayAmountArr[$date] = $dayTtlAmount1 + $dayTtlAmount2;
                if ($dayAmountArr[$date] > 0) {
                    $incomeArr[$i] = (($dayTtlAmount1 + $dayTtlAmount2) / 40000) * 100;
                    if ($incomeArr[$i] > 100) {
                        $incomeArr[$i] = 100;
                    }
                } else {
                    $incomeArr[$i] = 0;
                }

                $expnsTtlAmnt = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->whereBetween('created_at', array($toDate, $fromDate))->sum('transactions.real_value');
                $expnsTtlAmnt1 = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->whereBetween('created_at', array($toDate, $fromDate))->sum('transactions.sender_real_value');
                // echo$expnsTtlAmnt1;die;
                $expnsTtlAmnt=$expnsTtlAmnt+$expnsTtlAmnt1;
                $total_expense = $total_expense + $expnsTtlAmnt;
              
                if ($expnsTtlAmnt > 0) {
                    $expensArr[$i] = ($expnsTtlAmnt / 40000) * 100;
                    if ($expensArr[$i] > 100) {
                        $expensArr[$i] = 100;
                    }
                } else {
                    $expensArr[$i] = 0;
                }

                $i++;
            }
        }

        //print_r($expensArr);

        return view('users.overview', ['title' => $pageTitle, $activetab => 1, 'recordInfo' => $recordInfo, 'trans' => $trans, 'incomeArr' => $incomeArr, 'expensArr' => $expensArr, 'total_income' => $total_income, 'total_expense' => $total_expense,'enc_user_id'=>$enc_user_id,'account_name' => $accountName]);
    }

    public function affiliateProgram() {
        $pageTitle = 'Affiliate Program';
        $activetab = 'actdap';
        $userInfo = User::where('id', Session::get('user_id'))->first();
        $user_id=$this->encstring($userInfo->id);
        

        $refCodes = Referalcode::where('user_id', Session::get('user_id'))->get();
        $user_slug=$userInfo->slug;
        $explode_user_slug=explode("-",$user_slug);
        $referalCode='refid='.$explode_user_slug[0].'-'.($userInfo->id+5);

        $refCodes_exist = Referalcode::where('user_id', Session::get('user_id'))->where('referal_link',$referalCode)->count();

        $refrlHistry = ReferralCommission::where('referrer_id', Session::get('user_id'))->orderBy('id', 'DESC')->get();

        return view('users.affiliateProgram', ['title' => $pageTitle, $activetab => 1, 'user' => $userInfo, 'refCodes' => $refCodes,'referalCode'=>$referalCode, 'recordInfo' => $userInfo, 'refrlHistry' => $refrlHistry,'refCodes_exist'=>$refCodes_exist,'enc_user_id'=>$user_id]);
    }

    public function encstring($simple_string)
    {
        $token =$simple_string;
        $encrypted = Crypt::encryptString($simple_string);
        // $cipher_method = 'aes-128-ctr';
        // $enc_key = openssl_digest(php_uname(), 'SHA256', TRUE);
        // $enc_iv = openssl_random_pseudo_bytes(openssl_cipher_iv_length($cipher_method));
        // $crypted_token = openssl_encrypt($token, $cipher_method, $enc_key, 0, $enc_iv) . "::" . bin2hex($enc_iv);
        return $encrypted;
    }



    public function generateReferral() {
        $pageTitle = 'Generate Referral Code';
        $userInfo = User::where('id', Session::get('user_id'))->first();
        $user_slug=$userInfo->slug;
        $explode_user_slug=explode("-",$user_slug);
        $referalCode=$explode_user_slug[0].'-'.($userInfo->id+5);
       // $referalCode = $this->generateReferralCode($userInfo->first_name);
        $redCode = new Referalcode([
            'user_id' => Session::get('user_id'),
            'referal_name' => 'Link ' . date('d.m.Y H:i'),
            'referal_link' => 'refid=' . $referalCode,
            'num_register' => 0,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s'),
        ]);
        $redCode->save();
        Session::put('success_session_message', "Referral link generated successfully.");
        return Redirect::to('auth/affiliate-program');
    }

    private function generateReferralCode($slug = null) {
        $bytes = random_bytes(8);
        $encoded = base64_encode($bytes);
        $stripped = str_replace(['=', '+', '/'], '', $encoded);
        $prefix = strtolower(substr($slug, 0, 4));
        $prefix = str_shuffle($prefix);
        return ($prefix . $stripped);
    }

    public function deleteRefCode($slug = null) {
        if ($slug) {
            Referalcode::where('id', $slug)->delete();
            return Redirect::to('auth/affiliate-program');
        }
    }

    public function settings() {
        $pageTitle = 'Manage Settings';
        $page_heading = 'User Setting';
        $activetab = 'actdashboard';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $image = '';
        $input = Input::all();
        if (!empty($input)) {
            //echo '<pre>';print_r($input);exit;
            if (Input::hasFile('profile_image')) {
                $file = Input::file('profile_image');
                $uploadedFileName = $this->uploadImage($file, PROFILE_FULL_UPLOAD_PATH);
                //$this->resizeImage($uploadedFileName, PROFILE_FULL_UPLOAD_PATH, PROFILE_SMALL_UPLOAD_PATH, PROFILE_MW, PROFILE_MH);
                $recordInfo = User::select('profile_image')->where('id', Session::get('user_id'))->first();
                @unlink(PROFILE_FULL_UPLOAD_PATH . $recordInfo->profile_image);
                @unlink(PROFILE_SMALL_UPLOAD_PATH . $recordInfo->profile_image);
                User::where('id', Session::get('user_id'))->update(array('profile_image' => $uploadedFileName));
                $image = $uploadedFileName;
            } else {
                $image = $recordInfo->profile_image;
            }

            $name = ucfirst(trim($input['name']));
            $phone = ucfirst(trim($input['phone']));

            User::where('id', Session::get('user_id'))->update(array('name' => $name, 'phone' => $phone, 'profile_image' => $image));

            Session::flash('success_message', "Your Account details updated successfully.");
            return Redirect::to('/users/dashboard');
        }
        return view('users.settings', ['title' => $pageTitle, 'page_heading' => $page_heading, $activetab => 1, 'recordInfo' => $recordInfo]);
    }

    public function uploadprofileimage() {
        $input = Input::all();
        if (Input::hasFile('image')) {
            $file = Input::file('image');
            $uploadedFileName = $this->uploadImage($file, PROFILE_FULL_UPLOAD_PATH);
            //$this->resizeImage($uploadedFileName, PROFILE_FULL_UPLOAD_PATH, PROFILE_SMALL_UPLOAD_PATH, PROFILE_MW, PROFILE_MH);
            $recordInfo = User::select('image')->where('id', Session::get('user_id'))->first();
            @unlink(PROFILE_FULL_UPLOAD_PATH . $recordInfo->image);
            @unlink(PROFILE_SMALL_UPLOAD_PATH . $recordInfo->image);
            User::where('id', Session::get('user_id'))->update(array('image' => $uploadedFileName));
            echo $uploadedFileName;
        }
    }

    public function updatesettings(Request $request) {
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        if ($request->has('old_password')) {
            $old_password = $request->get('old_password');
            $newpassword = $request->get('newpassword');
            if (!password_verify($old_password, $recordInfo->password)) {
                echo 'Current password is not correct.';
            } else if ($old_password == $newpassword) {
                echo 'You can not change new password same as current password';
                exit;
            } else {
                $new_password = $this->encpassword($newpassword);
                User::where('id', Session::get('user_id'))->update(array('password' => $new_password));
                echo '1';
            }
        }
    }

    public function myAccount(Request $request) {
        $pageTitle = 'My Account';
        $page_heading = 'My Account';
        $activetab = 'actdashboard';

        $recordInfo = User::where('id', Session::get('user_id'))->first();
        return view('users.myAccount', ['title' => $pageTitle, 'page_heading' => $page_heading, $activetab => 1, 'recordInfo' => $recordInfo]);
    }

    public function accountDetail(Request $request) {
        $pageTitle = 'Account Detail';
        $page_heading = 'Account Detail';
        $activetab = 'actdashboard';

        $recordInfo = User::where('id', Session::get('user_id'))->first();
        if ($recordInfo->user_type == "Personal") {
            $accountName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == "Business") {
            $accountName = strtoupper($recordInfo->business_name);
        } else if ($recordInfo->user_type == "Agent" && $recordInfo->first_name != "") {
            $accountName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == "Agent" && $recordInfo->business_name != "") {
            $accountName = strtoupper($recordInfo->business_name);
        }

        $input = Input::all();
        if (!empty($input)) {
            $gender=$input['gender'];
            User::where('id', $recordInfo->id)->update(['gender' => $gender]);
            Session::put('success_session_message', "Account detail has been updated successfully");
            return Redirect::to('overview');
        }


        if ($recordInfo->user_type == "Agent") {
            $agent = Agent::where("user_id", Session::get('user_id'))->first();
        } else {
            $agent = false;
        }
        return view('users.accountDetail', ['title' => $pageTitle, 'page_heading' => $page_heading, $activetab => 1, 'recordInfo' => $recordInfo, 'agent' => $agent, 'accountName' => $accountName]);
    }

    private function cc_encrypt($str) {
        $ciphering = env('CIPHERING');
        $iv_length = openssl_cipher_iv_length($ciphering);
        $options = 0;
        $encryption_iv = env('ENCRYPT_IV');
        $encryption_key = env('ENCRYPT_KEY');
        $encryption = openssl_encrypt($str, $ciphering, $encryption_key, $options, $encryption_iv);
        return $encryption;
    }

    private function cc_decrypt($str) {
        $ciphering = env('CIPHERING');
        $options = 0;
        $decryption_iv = env('ENCRYPT_IV');
        $decryption_key = env('ENCRYPT_KEY');
        $decryption = openssl_decrypt($str, $ciphering, $decryption_key, $options, $decryption_iv);
        return $decryption;
    }

    private function encrypt3Des($data, $key) {
        $encData = openssl_encrypt($data, 'DES-EDE3', $key, OPENSSL_RAW_DATA);
        return base64_encode($encData);
    }

    private function getKey($seckey) {
        $hashedkey = md5($seckey);
        $hashedkeylast12 = substr($hashedkey, -12);

        $seckeyadjusted = str_replace("FLWSECK-", "", $seckey);
        $seckeyadjustedfirst12 = substr($seckeyadjusted, 0, 12);

        $encryptionkey = $seckeyadjustedfirst12 . $hashedkeylast12;
        return $encryptionkey;
    }

    private function checkUserTransLimit($user_id, $user_category, $user_type, $amount) {
        if ($user_type == 'Personal') {
            $cateFor = 1;
        } else if ($user_type == 'Business') {
            $cateFor = 2;
        }

        $user = User::where('id', $user_id)->first();
        if ($user_type != 'Agent') {

            $getLimit=WalletLimitUser::where('user_id',$user_id)->orderBy('id','desc')->first();
            if(!isset($getLimit->id))
            {
            $getLimit = Walletlimit::where('account_category', $user_category)->where('category_for', $cateFor)->first();
            }
            $dateTrans = date('Y-m-d');
            $startDate = $dateTrans . ' 00:00:00';
            $endDate = $dateTrans . ' 23:59:59';
            //DB::enableQueryLog(); 
            $DailyTrans = Transaction::where('user_id', $user_id)->where('trans_type', 2)->whereBetween('created_at', array($startDate, $endDate))->sum('amount');
            $DailyTrans = $DailyTrans + $amount;
            $DailyTransUSD = $this->fetchCurrencyRate($user->currency, $DailyTrans);
            if ($DailyTransUSD > $getLimit->daily_limit) {
                return "false###Sorry, Your daily spending limit is over.";
            }

            $mondaydt = date('Y-m-d', strtotime('monday this week'));
            $sundaydt = date('Y-m-d', strtotime('sunday this week'));
            $thisModay = $mondaydt . ' 00:00:00';
            $thisSunday = $sundaydt . ' 23:59:59';
            $WeekTrans = Transaction::where('user_id', $user_id)->where('trans_type', 2)->whereBetween('created_at', array($thisModay, $thisSunday))->sum('amount');
            $WeekTrans = $WeekTrans + $amount;
            $WeekTransUSD = $this->fetchCurrencyRate($user->currency, $WeekTrans);
            if ($WeekTransUSD > $getLimit->week_limit) {
                return "false###Sorry, Your weekly spending limit is over.";
            }

            $monthStartDate = date('Y-m-01');
            $monthStartDate = $monthStartDate . ' 00:00:00';
            $monthEndDate = date('Y-m-t');
            $monthEndDate = $monthEndDate . ' 23.59:59';
            $MonthTrans = Transaction::where('user_id', $user_id)->where('trans_type', 2)->whereBetween('created_at', array($monthStartDate, $monthEndDate))->sum('amount');
            $MonthTrans = $MonthTrans + $amount;
            $MonthTransUSD = $this->fetchCurrencyRate($user->currency, $MonthTrans);
            if ($MonthTransUSD > $getLimit->month_limit) {
                return "false###Sorry, Your monthly spending limit is over.";
            }
        } elseif ($user_type == 'Agent') {
            $getLimit=WalletLimitUser::where('user_id',$user_id)->orderBy('id','desc')->first();
            if(!isset($getLimit->id))
            {
            $getLimit = AgentsTransactionLimit::where('agent_id', $user_id)->first();
            }
            if (!empty($getLimit)) {
                $daily_limit = $getLimit->trans_limit;
            } else {
                $limit = Agentlimit::where('id', 1)->first();
                $daily_limit = $limit->daily_limit;
            }
            $dateTrans = date('Y-m-d');
            $startDate = $dateTrans . ' 00:00:00';
            $endDate = $dateTrans . ' 23:59:59';
            //DB::enableQueryLog(); 
            $DailyTrans = Transaction::where('user_id', $user_id)->where('trans_type', 2)->whereBetween('created_at', array($startDate, $endDate))->sum('amount');
            $DailyTrans = $DailyTrans + $amount;
            $DailyTransUSD = $this->fetchCurrencyRate($user->currency, $DailyTrans);
            if ($DailyTransUSD > $daily_limit) {
                return "false###Sorry, Your daily spending limit is over.";
            }
        }

        return true;
    }

    private function checkAgentTransLimit($user_id, $user_category, $user_type, $amount) {
        if ($user_type == 'Personal') {
            return true;
        } else if ($user_type == 'Business') {
            return true;
        }

        $user = User::where('id', $user_id)->first();

//         $getLimit = DB::table('agents_transaction_limits')->where('user_id', $user_id)->first();
//         if (!empty($getLimit)) {
// //        echo '<pre>';print_r($getLimit);exit;
//             $dateTrans = date('Y-m-d');
//             $startDate = $dateTrans . ' 00:00:00';
//             $endDate = $dateTrans . ' 23:59:59';
//             //DB::enableQueryLog();
//             $DailyTrans = Transaction::where('user_id', $user_id)->where('trans_type', 2)->whereBetween('created_at', array($startDate, $endDate))->sum('amount');
//             $DailyTrans = $DailyTrans + $amount;
//             $DailyTransUSD = $this->fetchCurrencyRate($user->currency, $DailyTrans);
//             if ($DailyTransUSD >= $getLimit->trans_limit) {
//                 return "false###Sorry, Your daily spending limit is over.";
//             }
//         }
           $getLimit=WalletLimitUser::where('user_id',$user_id)->orderBy('id','desc')->first();
           if(!isset($getLimit->id))
           {
           $getLimit = DB::table('agentlimits')->first();
           }

        $dateTrans = date('Y-m-d');
        $startDate = $dateTrans . ' 00:00:00';
        $endDate = $dateTrans . ' 23:59:59';
        //DB::enableQueryLog();
        $DailyTrans = Transaction::where('user_id', $user_id)->where('trans_type', 2)->whereBetween('created_at', array($startDate, $endDate))->sum('amount');
        $DailyTrans = $DailyTrans + $amount;
        $DailyTransUSD = $this->fetchCurrencyRate($user->currency, $DailyTrans);
        if ($DailyTransUSD > $getLimit->daily_limit) {
            return "false###Sorry, Your daily spending limit is over.";
        }

        return true;
    }

    
    public function check_card_payment(Request $request)
    {

    $recordInfo = User::where('id', Session::get('user_id'))->first();
    $amount = $request->get('tranAmnt');
    $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
    if ($chkAmount < 5) {
        $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 5);
        $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
        echo "You can't add less than " . $recordInfo->currency . " " . $user_currncy_250 . ".";
    }
    else{
        echo 1;
    }

    die;
   
        
    }

    public function addFund(Request $request) {
        $pageTitle = 'Add Fund';
        $page_heading = 'Add Fund';
        $activetab = 'actdashboard';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
//         $amount = $request->get('tranAmnt');
//        
//             $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
////                echo $recordInfo->currency;
////                echo "USD: ".$chkAmount." EUR: ".$amount; exit;
//                if ($chkAmount < 10) {
//                    $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 10);
//                    $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
////				  Session::flash('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
//                    Session::put('error_session_message', "You can't add less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
//                    //Session::put('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
//                    return Redirect::to('auth/add-fund');
//                }

        if ($request->has('payment_method') && ($request->get('payment_method') == 'bank_transfer' or $request->get('payment_method') == 'ga_transfer' or $request->get('payment_method') == 'dba_transfer')) {



            if ($request->get('payment_method') == "-1") {
//                Session::flash('error_message', "Choose Payment Method!");
                Session::put('error_session_message', "Choose Payment Method!");
                return Redirect::to('auth/add-fund');
            }
            $amount = $request->get('tranAmnt');
            if ($amount == "") {
//                Session::flash('error_message', "Amount field can't be left blank");
                Session::put('error_session_message', "Amount field can't be left blank");
                return Redirect::to('auth/add-fund');
            } else if (!is_numeric($amount)) {
//                Session::flash('error_message', "Invalid Amount value! Use number only.");
                Session::put('error_session_message', "Invalid Amount value! Use number only.");
                return Redirect::to('auth/add-fund');
            }
//echo $amount;exit;
            $amount = $request->get('tranAmnt');

            $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
//                echo $recordInfo->currency;
//                echo "USD: ".$chkAmount." EUR: ".$amount; exit;
            if ($chkAmount < 10) {
                $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 10);
                $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
//				  Session::flash('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                Session::put('error_session_message', "You can't add less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                //Session::put('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                return Redirect::to('auth/add-fund');
            }

            Session::put('creditAmount', $amount);

            return Redirect::to('/auth/comming-soon');
//            echo Session::get('creditAmount');exit;
            /* $currency = $recordInfo->currency;
              $card = $request->get('card');
              //$full_name = $recordInfo->first_name." ".$recordInfo->last_name;
              $tx_ref = "DB-" . mt_rand(1001, 9999);

              $trans = new Transaction([
              "user_id" => Session::get('user_id'),
              "receiver_id" => 0,
              "amount" => $amount,
              "fees" => 0,
              "currency" => $currency,
              "trans_type" => 1, //Credit
              "trans_to" => 'Dafri_Wallet',
              "trans_for" => 'Card,Account',
              "refrence_id" => 'na',
              "billing_description" => 'na',
              "user_close_bal" => ($recordInfo->wallet_amount + $amount),
              "status" => 4,
              "created_at" => date('Y-m-d H:i:s'),
              "updated_at" => date('Y-m-d H:i:s'),
              ]);
              $trans->save();
              $TransId = $trans->id; */

            return Redirect::to('auth/add-credit-fund');

            /* $url = "https://free.flutterwave.com/v3/payments";
              $header = array();
              $header[] = 'Content-type: application/json';
              $header[] = 'Authorization: Bearer ' . env('FLU_SECRET_KEY');
              //FLWSECK-41b27576022c6b6e22a449065073f3d8-X ||.env('FLU_SECRET_KEY') || FLWSECK_TEST-SANDBOXDEMOKEY-X
              $data = '{
              "tx_ref":' . $TransId . ',
              "amount":' . $amount . ',
              "currency":"' . $currency . '",
              "redirect_url":"' . HTTP_PATH . '/auth/authencticatePayment",
              "payment_options":"account",
              "meta":{
              "consumer_id":' . $recordInfo->id . ',
              "consumer_mac":"88a4-717ba-2283a"
              },
              "customer":{
              "email":"' . $recordInfo->email . '",
              "phonenumber":"' . $recordInfo->phone . '",
              "name":"' . $recordInfo->phone . '"
              },
              "customizations":{
              "title":"DafriBank Payments",
              "description":"Add fund to DafriBank Wallet",
              "logo":"' . HTTP_PATH . '/public/img/dafribank-logo-04.png"}}';
              //print_R($data);
              $x = curl_init($url);
              curl_setopt($x, CURLOPT_HTTPHEADER, $header);
              curl_setopt($x, CURLOPT_POST, true);
              curl_setopt($x, CURLOPT_RETURNTRANSFER, true);
              curl_setopt($x, CURLOPT_SSL_VERIFYPEER, false);
              curl_setopt($x, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
              curl_setopt($x, CURLOPT_POSTFIELDS, $data);
              $y = curl_exec($x);
              curl_close($x);
              $response = json_decode($y);

              if ($response->status == "success") {
              $paymentURL = $response->data->link;
              return Redirect::to($paymentURL);
              //echo "Payment URL: ".$paymentURL;
              } */

//            $url = 'https://api-sandbox.circle.com/v1/configuration';
//            $header = array();
//            $header[] = 'Accept: application/json';
//            $header[] = 'Authorization: Bearer '.CIRCLE_API;
//            $x = curl_init($url);
//            curl_setopt($x, CURLOPT_HTTPHEADER, $header);
//            curl_setopt($x, CURLOPT_POST, true);
//            curl_setopt($x, CURLOPT_RETURNTRANSFER, true);
//            curl_setopt($x, CURLOPT_SSL_VERIFYPEER, false);
//            curl_setopt($x, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
//            $y = curl_exec($x);
//            curl_close($x);
//            $response = json_decode($y);
//            print_r($response);
//            $data = '{"metadata":
//                {"email":"' . $recordInfo->email . '",
//                "sessionId":"' . hash('md5', $recordInfo->id) . '",
//                "ipAddress":"' . $this->get_client_ip() . '"},
//                    "amount":
//                    {"amount":"' . $amount . '",
//                    "currency":"' . $currency . '"},
//                        "source":
//                        {"id":"36ed1cea-84e6-4347-9499-06f736524851"},
//                        "verification":"none",
//                        "idempotencyKey":"' . $TransId . '"}';
//            $data = '{
//              "idempotencyKey":' . $TransId . ',
//                  "email":"' . $recordInfo->email . '",
//                  "sessionId":"' . $recordInfo->email . '",
//                  "ipAddress":"' . $this->get_client_ip() . '",
//              "amount":' . $amount . ',
//              "currency":"' . $currency . '",
//              "redirect_url":"' . HTTP_PATH . '/auth/authencticatePayment",
//              "payment_options":"account",
//              "meta":{
//              "consumer_id":' . $recordInfo->id . ',
//              "consumer_mac":"88a4-717ba-2283a"
//              },
//              "customer":{
//              
//              "phonenumber":"' . $recordInfo->phone . '",
//              "name":"' . $recordInfo->phone . '"
//              },
//              "customizations":{
//              "title":"DafriBank Payments",
//              "description":"Add fund to DafriBank Wallet",
//              "logo":"' . HTTP_PATH . '/public/img/dafribank-logo-04.png"}}';
//            echo '<pre>';
//            print_r($data);
//            $curl = curl_init();
//
//            curl_setopt_array($curl, [
//                CURLOPT_URL => "https://api-sandbox.circle.com/v1/payments",
//                CURLOPT_RETURNTRANSFER => true,
//                CURLOPT_ENCODING => "",
//                CURLOPT_MAXREDIRS => 10,
//                CURLOPT_TIMEOUT => 30,
//                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
//                CURLOPT_POSTFIELDS => $data,
//                CURLOPT_CUSTOMREQUEST => "POST",
//                CURLOPT_HTTPHEADER => [
//                    "Accept: application/json",
//                    "Authorization: Bearer " . CIRCLE_API,
//                    "Content-Type: application/json"
//                ],
//            ]);
//
//            $response = curl_exec($curl);
//            $err = curl_error($curl);
//
//            curl_close($curl);
//
//            echo '<pre>';
//            print_r($response);
//            exit;
        } else if ($request->has('payment_method') && $request->get('payment_method') == 'OZOW_EFT') {
            $amount = $request->get('tranAmnt');
            $currency = $recordInfo->currency; //$request->get('transCurrnc');

            if ($recordInfo->user_type == 'Personal') {
                $cust_name = $recordInfo->first_name . " " . $recordInfo->last_name;
            } else if ($recordInfo->user_type == 'Business') {
                $cust_name = $recordInfo->business_name;
            } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                $cust_name = $recordInfo->first_name . " " . $recordInfo->last_name;
            } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                $cust_name = $recordInfo->business_name;
            }

            if ($amount == "" or!is_numeric($amount)) {
//                Session::flash('error_message', "Amount field can't be left and user number only");
                Session::put('error_session_message', "Amount field can't be left blank");
                return Redirect::to('auth/add-fund');
            } else if (strtolower($currency) != 'zar') {
//                Session::flash('error_message', "OZOW EFT currently support only ZAR currency.");
                Session::put('error_session_message', "OZOW EFT currently support only ZAR currency.");
                return Redirect::to('auth/add-fund');
            }
            $amount = $request->get('tranAmnt');

            $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
//                echo $recordInfo->currency;
//                echo "USD: ".$chkAmount." EUR: ".$amount; exit;
            if ($chkAmount < 10) {
                $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 10);
                $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
//				  Session::flash('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                Session::put('error_session_message', "You can't add less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                //Session::put('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                return Redirect::to('auth/add-fund');
            }

            $trans = new Transaction([
                "user_id" => Session::get('user_id'),
                "receiver_id" => 0,
                "amount" => $amount,
                "fees" => 0,
                "currency" => $currency,
                "trans_type" => 1, //Credit
                "trans_to" => 'Dafri_Wallet',
                "trans_for" => 'OZOW_EFT',
                "refrence_id" => 'na',
                "billing_description" =>'IP : ' . $this->get_client_ip(),  
                "real_value" => $amount,
//                "user_close_bal" => $recordInfo->wallet_amount + $amount,
                "status" => 2,
                "created_at" => date('Y-m-d H:i:s'),
                "updated_at" => date('Y-m-d H:i:s'),
            ]);
            $trans->save();
            $TransId = $trans->id;
            $bankRef = 'DB-' . $TransId;
            $isTest = IS_OZOW_TEST;
            //$reqHash = strtolower('DAF-DAF-002ZAZAR'.$amount.$TransId.$bankRef.$cust_name.''.HTTP_PATH.'/auth/verifyEFTPayment'.HTTP_PATH.'/auth/verifyEFTPayment'.HTTP_PATH.'/auth/verifyEFTPayment'.HTTP_PATH.'/auth/verifyEFTPayment'.$isTest.'VYph1PiBozBZsGOk2mrt4CpnAFvx98xh');
            $reqHash = strtolower('DAF-DAF-002ZAZAR' . $amount . $TransId . $bankRef . $cust_name . HTTP_PATH . '/auth/verifyEFTPayment' . HTTP_PATH . '/auth/verifyEFTPayment' . HTTP_PATH . '/auth/verifyEFTPayment' . HTTP_PATH . '/auth/verifyEFTPayment' . $isTest . 'VYph1PiBozBZsGOk2mrt4CpnAFvx98xh');
            $reqHash = hash("sha512", $reqHash);

            echo "<form name='ozowEft' id='ozowEft' action='https://pay.ozow.com' method='post'>
		<input type='hidden' name='SiteCode' value='DAF-DAF-002'>
		<input type='hidden' name='CountryCode' value='ZA'>
		<input type='hidden' name='CurrencyCode' value='ZAR'>
		<input type='hidden' name='Amount' value='" . $amount . "'>
		<input type='hidden' name='TransactionReference' value='" . $TransId . "'>
		<input type='hidden' name='BankReference' value='" . $bankRef . "'>
		<input type='hidden' name='Customer' value='" . $cust_name . "'>
		<input type='hidden' name='CancelUrl' value='" . HTTP_PATH . "/auth/verifyEFTPayment'>
		<input type='hidden' name='ErrorUrl' value='" . HTTP_PATH . "/auth/verifyEFTPayment'>
		<input type='hidden' name='SuccessUrl' value='" . HTTP_PATH . "/auth/verifyEFTPayment'>
		<input type='hidden' name='NotifyUrl' value='" . HTTP_PATH . "/auth/verifyEFTPayment'>
		<input type='hidden' name='IsTest' value='" . $isTest . "'>
		<input type='hidden' name='HashCheck' value='" . $reqHash . "'>
		</form>
		<script>
		document.getElementById('ozowEft').submit();
		</script>";
            exit;
        } else if ($request->has('payment_method') && $request->get('payment_method') == 'agent') {

            if ($request->get('payment_method') == "-1") {
//                Session::flash('error_message', "Choose Payment Method!");
                Session::put('error_session_message', "Choose Payment Method!");
                return Redirect::to('auth/add-fund');
            }
            $amount = $request->get('tranAmnt');
            if ($amount == "") {
//                Session::flash('error_message', "Amount field can't be left blank");
                Session::put('error_session_message', "Amount field can't be left blank");
                return Redirect::to('auth/add-fund');
            } else if (!is_numeric($amount)) {
//                Session::flash('error_message', "Invalid Amount value! Use number only.");
                Session::put('error_session_message', "Invalid Amount value! Use number only.");
                return Redirect::to('auth/add-fund');
            }
            $amount = $request->get('tranAmnt');

            $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
//                echo $recordInfo->currency;
//                echo "USD: ".$chkAmount." EUR: ".$amount; exit;
            if ($chkAmount < 10) {
                $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 10);
                $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
//				  Session::flash('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                Session::put('error_session_message', "You can't add less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                //Session::put('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                return Redirect::to('auth/add-fund');
            }
            Session::put('depositMthd6_4', 'agent');
            Session::forget('withdrawMthd6_4');
            Session::forget('withdrawAmntAgnt64');
            Session::save();
            //Session::put('withdrawAmntAgnt64', base64_encode($amount));
            Session::put('addMthd6_4', 'agent');
            return Redirect::to('/auth/agent-list');
        } else if ($request->has('payment_method') && $request->get('payment_method') == 'crypto') {

            if ($request->get('payment_method') == "-1") {
//                Session::flash('error_message', "Choose Payment Method!");
                Session::put('error_session_message', "Choose Payment Method!");
                return Redirect::to('auth/add-fund');
            }
            $amount = $request->get('tranAmnt');

            if ($amount == "") {
//                Session::flash('error_message', "Amount field can't be left blank");
                Session::put('error_session_message', "Amount field can't be left blank");
                return Redirect::to('auth/add-fund');
            } else if (!is_numeric($amount)) {
//                Session::flash('error_message', "Invalid Amount value! Use number only.");
                Session::put('error_session_message', "Invalid Amount value! Use number only.");
                return Redirect::to('auth/add-fund');
            }
            $amount = $request->get('tranAmnt');

            $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
//                echo $recordInfo->currency;
//                echo "USD: ".$chkAmount." EUR: ".$amount; exit;
            if ($chkAmount < 25) {
                $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 25);
                $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
//				  Session::flash('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                Session::put('error_session_message', "You can't add less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                //Session::put('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                return Redirect::to('auth/add-fund');
            }
            Session::forget('withdrawMthd6_4');
            Session::forget('withdrawAmntAgnt64');
            Session::save();
            $amount = $request->get('tranAmnt');
            $currency = $recordInfo->currency;
            $amountUSD = $this->fetchCurrencyRate($currency, $amount);


            Session::put('cryptoAmnt', $amountUSD);
            Session::put('cryptoAmntBaseCurr', $amount);
            return Redirect::to('/auth/crypto-deposit');
        }
        else if ($request->has('payment_method') && $request->get('payment_method') == 'card_transfer') {
                            if ($request->get('payment_method') == "-1") {
                                Session::put('error_session_message', "Choose Payment Method!");
                                return Redirect::to('auth/add-fund');
                            }

                            $amount = $request->get('tranAmnt');
                            if ($amount == "") {
                                Session::put('error_session_message', "Amount field can't be left blank");
                                return Redirect::to('auth/add-fund');
                            } else if (!is_numeric($amount)) {
                                Session::put('error_session_message', "Invalid Amount value! Use number only.");
                                return Redirect::to('auth/add-fund');
                            }

                            $amount = $request->get('tranAmnt');
                
                            $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
                            if ($chkAmount < 50) {
                                $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 50);
                                $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                                Session::put('error_session_message', "You can't add less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                                return Redirect::to('auth/add-fund');
                            }
                            Session::put('card_payment_amount', $amount);
                            return Redirect::to('auth/card-payment');
        }
           else if ($request->has('payment_method') && $request->get('payment_method') == 'dafri_me') {

            if ($request->get('payment_method') == "-1") {
                Session::put('error_session_message', "Choose Payment Method!");
                return Redirect::to('auth/add-fund');
            }

            $amount = $request->get('tranAmnt');
            if ($amount == "") {
                Session::put('error_session_message', "Amount field can't be left blank");
                return Redirect::to('auth/add-fund');
            } else if (!is_numeric($amount)) {
                Session::put('error_session_message', "Invalid Amount value! Use number only.");
                return Redirect::to('auth/add-fund');
            }

            $amount = $request->get('tranAmnt');

            $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
            if ($chkAmount < 50) {
                $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 50);
                $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                Session::put('error_session_message', "You can't add less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                return Redirect::to('auth/add-fund');
            }
            Session::put('dafri_me_payment_amount', $amount);
            return Redirect::to('get_stripe_response');


        }
        else if ($request->has('payment_method') && $request->get('payment_method') == 'paypal') {

            $amount = $request->get('tranAmnt');
            if ($amount == "") {
//                Session::flash('error_message', "Amount field can't be left blank");
                Session::put('error_session_message', "Amount field can't be left blank");
                return Redirect::to('auth/add-fund');
            } else if (!is_numeric($amount)) {
//                Session::flash('error_message', "Invalid Amount value! Use number only.");
                Session::put('error_session_message', "Invalid Amount value! Use number only.");
                return Redirect::to('auth/add-fund');
            }
            $amount = $request->get('tranAmnt');

            $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
//                echo $recordInfo->currency;
//                echo "USD: ".$chkAmount." EUR: ".$amount; exit;
            if ($chkAmount < 10) {
                $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 10);
                $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
//				  Session::flash('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                Session::put('error_session_message', "You can't add less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                //Session::put('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                return Redirect::to('auth/add-fund');
            }
            if ($request->get('payment_method') == "-1") {
//                Session::flash('error_message', "Choose Payment Method!");
                Session::put('error_session_message', "Choose Payment Method!");
                return Redirect::to('auth/add-fund');
            }

            $amount = $request->get('tranAmnt');
            $currency = $recordInfo->currency;

            $trans = new Transaction([
                "user_id" => Session::get('user_id'),
                "receiver_id" => 0,
                "amount" => $amount,
                "fees" => 0,
                "currency" => $currency,
                "trans_type" => 1, //Credit
                "trans_to" => 'Dafri_Wallet',
                "trans_for" => 'paypal',
                "refrence_id" => 'na',
                "billing_description" => 'na',
                "user_close_bal" => $recordInfo->wallet_amount + $amount,
                "status" => 4,
                "created_at" => date('Y-m-d H:i:s'),
                "updated_at" => date('Y-m-d H:i:s'),
            ]);
            $trans->save();
            $TransId = $trans->id;

            $paypal_email = 'niketans@outlook.com'; //medu4.com@gmail.com'niketans@outlook.com';
            $return_url = HTTP_PATH . '/auth/paypal-successful/' . $TransId . '/';
            $cancel_url = HTTP_PATH . '/auth/paypal-cancelled/' . $TransId . '/';
            $notify_url = HTTP_PATH . '/auth/palpal-notify-payments/';

            $em = $recordInfo->email;
            $amt = $amount;
            $item_name = 'DafriBank Wallet Topup';
            $item_amount = $amt;
            $addr1 = '304, 3rd floor, Ok Plus Tower, New Sanganer Road';
            $city = 'Jaipur';
            $first_name = $recordInfo->first_name;
            $last_name = $recordInfo->last_name;
            $district = 'Jaipur';
            $zip = '302021';
            if (!isset($_POST["txn_id"]) && !isset($_POST["txn_type"])) {
                $querystring = '';
                $querystring .= "?business=" . urlencode($paypal_email) . "&";
                $querystring .= "item_name=" . urlencode($item_name) . "&";
                $querystring .= "amount=" . urlencode($amount) . "&";

                $post = array("cmd" => "_xclick", "no_note" => "1", "lc" => "IN", "currency_code" => $currency, "bn" => "PP-BuyNowBF:btn_buynow_LG.gif:NonHostedGuest", "item_number" => $TransId, "send_form_flag" => "true", "no_shipping" => 1, "item_name" => $item_name);
                //$post = array("cmd" => "_hosted-payment", "subtotal" => $amount, "lc" => "US", "currency_code" => $currency, "bn" => "PP-BuyNowBF:btn_buynow_LG.gif:NonHostedGuest", "item_number" => "4969", "send_form_flag" => "true", "paymentaction" => "sale", "template" => "templateD", "billing_address1" => $addr1, "billing_address2" => $city, "billing_city" => $city, "billing_country" => "JP", "billing_first_name" => $first_name, "billing_last_name" => $last_name, "billing_state" => $district, "billing_zip" => $zip);

                foreach ($post as $key => $value) {
                    $value = urlencode(stripslashes($value));
                    $querystring .= "$key=$value&";
                }
                $querystring .= "email=" . urlencode($em) . "&";
                $querystring .= "return=" . urlencode(stripslashes($return_url)) . "&";
                $querystring .= "cancel_return=" . urlencode(stripslashes($cancel_url)) . "&";
                $querystring .= "notify_url=" . urlencode($notify_url);

                //$rdURL = 'https://www.paypal.com/cgi-bin/webscr'.$querystring;
                $rdURL = 'https://www.sandbox.paypal.com/cgi-bin/webscr' . $querystring;
                //echo $rdURL; exit;

                return Redirect::to($rdURL);
            }
        } else if ($request->has('payment_method') && $request->get('payment_method') == 'manual_deposit') {

            $amount = $request->get('tranAmnt');
            if ($amount == "") {
//                Session::flash('error_message', "Amount field can't be left blank");
                Session::put('error_session_message', "Amount field can't be left blank");
                return Redirect::to('auth/add-fund');
            } else if (!is_numeric($amount)) {
//                Session::flash('error_message', "Invalid Amount value! Use number only.");
                Session::put('error_session_message', "Invalid Amount value! Use number only.");
                return Redirect::to('auth/add-fund');
            } $amount = $request->get('tranAmnt');

            $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
//                echo $recordInfo->currency;
//                echo "USD: ".$chkAmount." EUR: ".$amount; exit;
            if ($chkAmount < 10) {
                $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 10);
                $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
//				  Session::flash('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                Session::put('error_session_message', "You can't add less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                //Session::put('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                return Redirect::to('auth/add-fund');
            }
            $amount = $request->get('tranAmnt');
            $currency = $recordInfo->currency;
            Session::put('manualDepstAmnt', $amount);
            Session::put('manualDepstCurrnc', $currency);
            return Redirect::to('/auth/manual-deposit');

            //return Redirect::to('auth/comming-soon'); 
        }

        Session::put('alert_addFund_model', "eDeposit Guide <a href='https://link.medium.com/AubfPw7ZVpb'>Read More</a>");

        $cards = Card::where('user_id', Session::get('user_id'))->get();

        return view('users.addFund', ['title' => $pageTitle, 'page_heading' => $page_heading, $activetab => 1, 'recordInfo' => $recordInfo, 'cards' => $cards]);
    }


    function encryptPass($password) {
        $sSalt = '20adeb83e85f03cfc84d0fb7e5f4d290';
        $sSalt = substr(hash('sha256', $sSalt, true), 0, 32);
        $method = 'aes-256-cbc';

        $iv = chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0);

        $encrypted = base64_encode(openssl_encrypt($password, $method, $sSalt, OPENSSL_RAW_DATA, $iv));
        return $encrypted;
    }

    public function addCreditFund_old(Request $request) {
        $pageTitle = 'Add Fund';
        $page_heading = 'Add Fund';
        $activetab = 'actdashboard';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $input = Input::all();
        if (!empty($input)) {
            //            echo '<pre>';print_r($input);exit;
            $card_number = $input['card_number'];
            $expiry_month = $input['expiry_month'];
            $expiry_year = $input['expiry_year'];
            $cvv = $input['cvv'];
            $name = $input['name'];
            $address_line1 = $input['address_line1'];
            $address_line2 = $input['address_line2'];
            $postcode = $input['postcode'];
            $city = $input['city'];
            $district = $input['district'];
            $address_line2 = $input['address_line2'];
            //            $email = $input['email'];
            //            $phone = $input['phone'];

            $countryArr = Country::orderBy('name', 'ASC')->where('name', $recordInfo->country)->first();
            $country = $countryArr->sortname;
            $currency = $recordInfo->currency;

            $amount = $input['amount'];
            $card = $request->get('card');
            //$full_name = $recordInfo->first_name." ".$recordInfo->last_name;
            $tx_ref = "DB-" . mt_rand(1001, 9999);

            $trans = new Transaction([
                "user_id" => Session::get('user_id'),
                "receiver_id" => 0,
                "amount" => $amount,
                "fees" => 0,
                "currency" => $currency,
                "trans_type" => 1, //Credit
                "trans_to" => 'Dafri_Wallet',
                "trans_for" => 'Card,Account',
                "refrence_id" => 'na',
                "billing_description" => 'na',
                "user_close_bal" => ($recordInfo->wallet_amount + $amount),
                "status" => 4,
                "created_at" => date('Y-m-d H:i:s'),
                "updated_at" => date('Y-m-d H:i:s'),
            ]);
            $trans->save();
            $TransId = $trans->id;

            //            $res = gnupg_init();
            //gnupg_addencryptkey($res,"8660281B6051D071D94B5B230549F9DC851566DC");
            //$enc = gnupg_encrypt($res, "just a test");
            //echo $enc;


            $myuuid = Uuid::uuid4();
            $idempotencyKey = $myuuid->toString();
            //                $characters = '0123456789@#$!==<>?abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';

            $username = "dummy";       // Your username on the server
            $pgp = "/usr/local/bin/gpg"; // path to GnuPG
            // Where the encrypted mail comes from. Dummy address from your keyring.
            $from = "Example.com website <website@example.com>";

            // The recipient. This is the imported address from your public key.
            $recp = "Example orders <orders@example.com>";
            // The data to be encrypted
            $data = "{\"number\":\"4111111111111111\",\"cvv\":\"123\"}";
            $data = "gd gddfg fdg tyffgd hfh fghhfhfgh";

            $gnupg = new gnupg();
            $gnupg->import('public.asc');
            $gnupg->addencryptkey('fingerprint');
            $encrypted = $gnupg->encrypt('json');
            echo '<pre>';
            print_r($encrypted);


            $sSalt = 'key1';
            //            $sSalt = hash('sha256', $sSalt, true);
            $method = 'aes-256-cbc';
            echo '<pre>';
            print_r($sSalt);
            $iv = chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0) . chr(0x0);

            $ar = array($card_number, $cvv);

            $encrypted = base64_encode(encrypt($ar, $method, $sSalt, 0, $iv));
            echo '<pre>';
            print_r($encrypted);
            //    $decrypted = decrypt(base64_decode($encrypted), $method, $sSalt, OPENSSL_RAW_DATA, $iv);
            //  echo '<pre>';
            //            print_r($decrypted);exit;
            ////    $encrypted ="LS0tLS1CRUdJTiBQR1AgTUVTU0FHRS0tLS0tDQpWZXJzaW9uOiBPcGVuUEdQLmpzIHY0LjEwLjQNCkNvbW1lbnQ6IGh0dHBzOi8vb3BlbnBncGpzLm9yZw0KDQp3Y0JNQTBYV1NGbEZScFZoQVFmOERtYjNRNXpTR3M3SDErcHNPUVVHTEw0d1JRcGtWMWF3STZJZVp6UkgNCnFYVDYrMEtkUy9XbzhuVW5xR3JjTEhYWStwU2I1bTk5TTBYTS9DRFd1Y3hsK3ZscE4xS1BwdVFVYXUzMg0KRmFRQkxyb2g1NVA1SjNlOUpFeG5UNHBiRHpPTlFWTzZQWHEwUU5kdnp2RDdBQ1h2MDZZeGRMK3MwZWY2DQp3REF2Wis4ZWppUElvZ3BTMXkxWXNvTEJwQXZRWDdhaWM0RGRUUzRVZWJ4Mk9HaWpsL0xxTHVNQm9kdkENCmxDL2FpQUkyaUVuQkJ5REVMR3JzYWtMTEFNTS85cWMvZlhIaGp1bzdvcFBPc0EzWGdWOFlQVld5dDJHdw0KaEV2WStCeE9CU0xTOGNzZzd0bnI4MGNLT0YvVjZWZHZpMlZNVG9zQmRadm02QkZlTUljK1NyYmxqOVRaDQpROUpoQVF6SkVhWDAvelJCVzBaVXBtWFQwNFBiQkVuM1dJZ05jNFNtZUNHNE03WmIyZjZKUnVSc3hwWVUNCmQ4M3Z5ZlhoRWRqMnFVYTV1NGJKelVaSjRiOXBQTXB4SmViaGhIeHlHNEUxblpKMnpDU1BZaWE5M0U1dA0KYkpvK2NEOFpkYWlvNkE9PQ0KPXhxVU0NCi0tLS0tRU5EIFBHUCBNRVNTQUdFLS0tLS0NCg==";
            //        $output = openssl_decrypt(base64_decode($encrypted), $method, $sSalt, 0, $iv);
            //    $encrypted1 = $encrypted.$encrypted2;
            //    echo '<pre>';
            //            print_r($sSalt);
            //    echo '<pre>';
            //            print_r($cvv);
            //    echo '<pre>';
            //            print_r($encrypted1);
            //    echo '<pre>';
            //            print_r($output);
            //    echo '<pre>';
            //            print_r($encrypted2);exit;
            //            $dataCard = '{"metadata":
            //                {"email":"' . $recordInfo->email . '",
            //                "sessionId":"' . hash('md5', $recordInfo->id) . '",
            //                "ipAddress":"' . $this->get_client_ip() . '"},
            //                    "amount":
            //                    {"amount":"' . $amount . '",
            //                    "currency":"' . $currency . '"},
            //                        "source":
            //                        {"id":"36ed1cea-84e6-4347-9499-06f736524851"},
            //                        "verification":"none",
            //                        "idempotencyKey":"' . $TransId . '"}';
            //            $dataCard = '{
            //"idempotencyKey": "549cc15c-8372-4614-ab25-1e643ff38332",
            //"expMonth": 5,
            //"expYear": 2025,
            //"keyId": "key1",
            //"encryptedData": "LS0tLS1CRUdJTiBQR1AgTUVTU0FHRS0tLS0tDQpWZXJzaW9uOiBPcGVuUEdQLmpzIHY0LjEwLjQNCkNvbW1lbnQ6IGh0dHBzOi8vb3BlbnBncGpzLm9yZw0KDQp3Y0JNQTBYV1NGbEZScFZoQVFmOERtYjNRNXpTR3M3SDErcHNPUVVHTEw0d1JRcGtWMWF3STZJZVp6UkgNCnFYVDYrMEtkUy9XbzhuVW5xR3JjTEhYWStwU2I1bTk5TTBYTS9DRFd1Y3hsK3ZscE4xS1BwdVFVYXUzMg0KRmFRQkxyb2g1NVA1SjNlOUpFeG5UNHBiRHpPTlFWTzZQWHEwUU5kdnp2RDdBQ1h2MDZZeGRMK3MwZWY2DQp3REF2Wis4ZWppUElvZ3BTMXkxWXNvTEJwQXZRWDdhaWM0RGRUUzRVZWJ4Mk9HaWpsL0xxTHVNQm9kdkENCmxDL2FpQUkyaUVuQkJ5REVMR3JzYWtMTEFNTS85cWMvZlhIaGp1bzdvcFBPc0EzWGdWOFlQVld5dDJHdw0KaEV2WStCeE9CU0xTOGNzZzd0bnI4MGNLT0YvVjZWZHZpMlZNVG9zQmRadm02QkZlTUljK1NyYmxqOVRaDQpROUpoQVF6SkVhWDAvelJCVzBaVXBtWFQwNFBiQkVuM1dJZ05jNFNtZUNHNE03WmIyZjZKUnVSc3hwWVUNCmQ4M3Z5ZlhoRWRqMnFVYTV1NGJKelVaSjRiOXBQTXB4SmViaGhIeHlHNEUxblpKMnpDU1BZaWE5M0U1dA0KYkpvK2NEOFpkYWlvNkE9PQ0KPXhxVU0NCi0tLS0tRU5EIFBHUCBNRVNTQUdFLS0tLS0NCg==",
            //"billingDetails": {
            //"name": "Customer madd",
            //"country": "US",
            //"district": "MA",
            //"line1": "Test",
            //"line2": "",
            //"city": "Test City",
            //"postalCode": "11111"
            //},
            //"metadata": {
            //"email": "' . $recordInfo->email . '",
            //"phoneNumber": "+12025550180",
            //"sessionId": "xxx",
            //"ipAddress": "172.33.222.1"
            //}
            //}';
            $dataCard = '{
					"idempotencyKey": "' . $idempotencyKey . '",
					"expMonth": ' . $expiry_month . ',
					"expYear": ' . $expiry_year . ',
					"keyId": "key1",
					"encryptedData": "' . $message . '",
					"billingDetails": {
					"name": "' . $name . '",
					"country": "' . $country . '",
					"district": "' . $district . '",
					"line1": "' . $address_line1 . '",
					"line2": "' . $address_line2 . '",
					"city": "' . $city . '",
					"postalCode": "' . $postcode . '"
					},
					"metadata": {
					"email": "' . $recordInfo->email . '",
					"phoneNumber": "' . $recordInfo->phone . '",
					"sessionId": "' . hash('md5', $recordInfo->id) . '",
					"ipAddress": "' . $this->get_client_ip() . '"
					}
					}';
            //            $dataCard = '{
            //"idempotencyKey": "'.$idempotencyKey.'",
            //"expMonth": '.$expiry_month.',
            //"expYear": '.$expiry_year.',
            //"keyId": "key1",
            //"encryptedData": "LS0tLS1CRUdJTiBQR1AgTUVTU0FHRS0tLS0tDQpWZXJzaW9uOiBPcGVuUEdQLmpzIHY0LjEwLjQNCkNvbW1lbnQ6IGh0dHBzOi8vb3BlbnBncGpzLm9yZw0KDQp3Y0JNQTBYV1NGbEZScFZoQVFmOERtYjNRNXpTR3M3SDErcHNPUVVHTEw0d1JRcGtWMWF3STZJZVp6UkgNCnFYVDYrMEtkUy9XbzhuVW5xR3JjTEhYWStwU2I1bTk5TTBYTS9DRFd1Y3hsK3ZscE4xS1BwdVFVYXUzMg0KRmFRQkxyb2g1NVA1SjNlOUpFeG5UNHBiRHpPTlFWTzZQWHEwUU5kdnp2RDdBQ1h2MDZZeGRMK3MwZWY2DQp3REF2Wis4ZWppUElvZ3BTMXkxWXNvTEJwQXZRWDdhaWM0RGRUUzRVZWJ4Mk9HaWpsL0xxTHVNQm9kdkENCmxDL2FpQUkyaUVuQkJ5REVMR3JzYWtMTEFNTS85cWMvZlhIaGp1bzdvcFBPc0EzWGdWOFlQVld5dDJHdw0KaEV2WStCeE9CU0xTOGNzZzd0bnI4MGNLT0YvVjZWZHZpMlZNVG9zQmRadm02QkZlTUljK1NyYmxqOVRaDQpROUpoQVF6SkVhWDAvelJCVzBaVXBtWFQwNFBiQkVuM1dJZ05jNFNtZUNHNE03WmIyZjZKUnVSc3hwWVUNCmQ4M3Z5ZlhoRWRqMnFVYTV1NGJKelVaSjRiOXBQTXB4SmViaGhIeHlHNEUxblpKMnpDU1BZaWE5M0U1dA0KYkpvK2NEOFpkYWlvNkE9PQ0KPXhxVU0NCi0tLS0tRU5EIFBHUCBNRVNTQUdFLS0tLS0NCg==",
            //"billingDetails": {
            //"name": "'.$name.'",
            //"country": "'.$country.'",
            //"district": "'.$district.'",
            //"line1": "'.$address_line1.'",
            //"line2": "'.$address_line2.'",
            //"city": "'.$city.'",
            //"postalCode": "'.$postcode.'"
            //},
            //"metadata": {
            //"email": "' . $recordInfo->email . '",
            //"phoneNumber": "' . $recordInfo->phone . '",
            //"sessionId": "' . hash('md5', $recordInfo->id) . '",
            //"ipAddress": "' . $this->get_client_ip() . '"
            //}
            //}';
            //            $gpg = new gnupg();
            //$info = $gpg -> import('{"number":"4007410000000006","cvv":"256"}');
            //print_r($info);

            echo '<pre>';
            print_r($dataCard);

            $curl = curl_init();

            curl_setopt_array($curl, [
                CURLOPT_URL => "https://api-sandbox.circle.com/v1/cards",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS => $dataCard,
                CURLOPT_HTTPHEADER => [
                    "Accept: application/json",
                    "Authorization: Bearer " . CIRCLE_API,
                    "Content-Type: application/json"
                ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            $response = json_decode($response);
            echo '<pre>';
            print_r($response);
            exit;
            $sourceId = $response->data->id;

            $data = '
				{
				"idempotencyKey": "' . $idempotencyKey . '",
				"amount": {
				"amount": "' . $amount . '",
				"currency": "' . $currency . '"
				},
				"source": {
				"id": "' . $sourceId . '",
				"type": "card"
				},
				"description": "Test",
				"metadata": {
				"email": "' . $recordInfo->email . '",
				"phoneNumber": "' . $recordInfo->phone . '",
				"sessionId": "' . hash('md5', $recordInfo->id) . '",
				"ipAddress": "' . $this->get_client_ip() . '"
				},
				"verification": "none"
				} ';

            echo '<pre>';
            print_r($data);
            $curl = curl_init();

            curl_setopt_array($curl, [
                CURLOPT_URL => "https://api-sandbox.circle.com/v1/payments",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_POSTFIELDS => $data,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_HTTPHEADER => [
                    "Accept: application/json",
                    "Authorization: Bearer " . CIRCLE_API,
                    "Content-Type: application/json"
                ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            echo '<pre>';
            print_r($response);
            exit;
        }

        $countrList = Country::getCountryList();

        return view('users.addCreditFund', ['title' => $pageTitle, 'page_heading' => $page_heading, $activetab => 1, 'recordInfo' => $recordInfo, 'countrList' => $countrList]);
    }

    function generateRandomString($length = 10) {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }

    public function addCreditFund(Request $request) {
        $pageTitle = 'Add Fund';
        $page_heading = 'Add Fund';
        $activetab = 'actdashboard';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $input = Input::all();
        if (!empty($input)) {
            //            echo '<pre>';print_r($input);exit;
            $card_number = $input['card_number'];
            $expiry_month = $input['expiry_month'];
            $expiry_year = $input['expiry_year'];
            $cvv = $input['cvv'];
            $name = $input['name'];
            $address_line1 = $input['address_line1'];
            $address_line2 = $input['address_line2'];
            $postcode = $input['postcode'];
            $city = $input['city'];
            $district = $input['district'];
            $address_line2 = $input['address_line2'];
            //            $email = $input['email'];
            //            $phone = $input['phone'];

            $countryArr = Country::orderBy('name', 'ASC')->where('name', $recordInfo->country)->first();
            $country = $countryArr->sortname;
            $currency = $recordInfo->currency;

            $amount = $input['amount'];
            $card = $request->get('card');
            //$full_name = $recordInfo->first_name." ".$recordInfo->last_name;
            $tx_ref = "DB-" . mt_rand(1001, 9999);

            $trans = new Transaction([
                "user_id" => Session::get('user_id'),
                "receiver_id" => 0,
                "amount" => $amount,
                "fees" => 0,
                "currency" => $currency,
                "trans_type" => 1, //Credit
                "trans_to" => 'Dafri_Wallet',
                "trans_for" => 'Card,Account',
                "refrence_id" => 'na',
                "billing_description" => 'na',
                "user_close_bal" => ($recordInfo->wallet_amount + $amount),
                "status" => 4,
                "created_at" => date('Y-m-d H:i:s'),
                "updated_at" => date('Y-m-d H:i:s'),
            ]);
            $trans->save();
            $TransId = $trans->id;

            $cardDetail = array(
                'number' => $card_number,
                'cvv' => $cvv,
            );

            $cardDetailJson = json_encode($cardDetail);

            $gnupg = new gnupg();
// not really needed. Clearsign is default
            $gnupg->setsignmode(gnupg::SIG_MODE_CLEAR);
// add key with passphrase 'test' for signing
            $gnupg->addsignkey("8660281B6051D071D94B5B230549F9DC851566DC", "test");
// sign
            $signed = $gnupg->sign("just a test");
            echo $signed;
            exit;

            $keyDetail = implode(',', $cardDetail);
            $gpg = new gnupg();
            $info = $gpg->import('0DAA2C747B1974BE9EB9E6DCF7EE249AD00A46AA');
            echo '<pre>';
            print_r($info);
            exit;
            // Encrypt
            $gpg = new gnupg();
            $gpg->seterrormode(gnupg::ERROR_EXCEPTION);

// Check key ring for recipient public key, otherwise import it
            $keyInfo = $gpg->keyinfo('0DAA2C747B1974BE9EB9E6DCF7EE249AD00A46AA');
            if (empty($keyInfo)) {
                $gpg->import('recipients-public-key.asc');
            }
            $gpg->addencryptkey('0DAA2C747B1974BE9EB9E6DCF7EE249AD00A46AA');
            echo $gpg->encrypt('This is a test!');

            echo '<pre>';
            print_r($gpg);

            exit;

            $res = gnupg_init();
            gnupg_seterrormode($res, GNUPG_ERROR_WARNING);
            gnupg_addencryptkey($res, "8660281B6051D071D94B5B230549F9DC851566DC");
            $enc = gnupg_encrypt($res, "just a test");
//echo $enc;
//            echo '<pre>';print_r($res);
            echo '<pre>';
            print_r($enc);

            exit;

            $gpg = new gnupg();
            $gpg->seterrormode(gnupg::ERROR_EXCEPTION);
// Check key ring for recipient public key, otherwise import it
            $keyInfo = $gpg->keyinfo('0DAA2C747B1974BE9EB9E6DCF7EE249AD00A46AA');
            if (empty($keyInfo)) {
                $gpg->import('recipients-public-key.asc');
            }
            $gpg->addencryptkey('0DAA2C747B1974BE9EB9E6DCF7EE249AD00A46AA');
            $enc = $gpg->encrypt('This is a test!');

            echo '<pre>';
            print_r($gpg);
//$enc = $gpg -> encrypt($cardDetailJson);
            echo '<pre>';
            print_r($gpg);
            echo '<pre>';
            print_r($enc);

            exit;

            $idempotencyKey = $this->generateRandomString(24);
            $arr_fin = array(
                'idempotencyKey' => $idempotencyKey,
                'expMonth' => $expiry_month,
                'expYear' => $expiry_year,
                'keyId' => 'fe57d4b1-988e-4606-a869-827eb4ac5bdf',
                'encryptedData' =>
                array(
                    'number' => $card_number,
                    'cvv' => $cvv,
                ),
                'billingDetails' =>
                array(
                    'name' => $name,
                    'country' => $country,
                    'district' => $district,
                    'line1' => $address_line1,
                    'line2' => $address_line2,
                    'city' => $city,
                    'postalCode' => $postcode,
                ),
                'metadata' =>
                array(
                    'email' => $recordInfo->email,
                    'phoneNumber' => $recordInfo->phone,
                    'sessionId' => hash('md5', $recordInfo->id),
                    'ipAddress' => $this->get_client_ip(),
                ),
            );
            //        $dataCard = '{
            // "idempotencyKey": "' . $idempotencyKey . '",
            // "expMonth": ' . $expiry_month . ',
            // "expYear": ' . $expiry_year . ',
            // "keyId": "fe57d4b1-988e-4606-a869-827eb4ac5bdf",
            // "encryptedData":{"number":"'.$card_number.'","cvv":"123"},
            // "billingDetails": {
            // "name": "' . $name . '",
            // "country": "' . $country . '",
            // "district": "' . $district . '",
            // "line1": "' . $address_line1 . '",
            // "line2": "' . $address_line2 . '",
            // "city": "' . $city . '",
            // "postalCode": "' . $postcode . '"
            // },
            // "metadata": {
            // "email": "' . $recordInfo->email . '",
            // "phoneNumber": "' . $recordInfo->phone . '",
            // "sessionId": "' . hash('md5', $recordInfo->id) . '",
            // "ipAddress": "' . $this->get_client_ip() . '"
            // }
            // }';







            $dataCard = json_encode($arr_fin);
            echo '<pre>';
            print_r($dataCard);

            $curl = curl_init();

            curl_setopt_array($curl, [
                CURLOPT_URL => "https://api-sandbox.circle.com/v1/cards",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_POSTFIELDS => $dataCard,
                CURLOPT_HTTPHEADER => [
                    "Accept: application/json",
                    "Authorization: Bearer " . CIRCLE_API,
                    "Content-Type: application/json"
                ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            $response = json_decode($response);
            echo '<pre>';
            print_r($response);

            exit;
            $sourceId = $response->data->id;

            $data = '
				{
				"idempotencyKey": "' . $idempotencyKey . '",
				"amount": {
				"amount": "' . $amount . '",
				"currency": "' . $currency . '"
				},
				"source": {
				"id": "' . $sourceId . '",
				"type": "card"
				},
				"description": "Test",
				"metadata": {
				"email": "' . $recordInfo->email . '",
				"phoneNumber": "' . $recordInfo->phone . '",
				"sessionId": "' . hash('md5', $recordInfo->id) . '",
				"ipAddress": "' . $this->get_client_ip() . '"
				},
				"verification": "none"
				} ';

            echo '<pre>';
            print_r($data);
            $curl = curl_init();

            curl_setopt_array($curl, [
                CURLOPT_URL => "https://api-sandbox.circle.com/v1/payments",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_POSTFIELDS => $data,
                CURLOPT_CUSTOMREQUEST => "POST",
                CURLOPT_HTTPHEADER => [
                    "Accept: application/json",
                    "Authorization: Bearer " . CIRCLE_API,
                    "Content-Type: application/json"
                ],
            ]);

            $response = curl_exec($curl);
            $err = curl_error($curl);

            curl_close($curl);

            echo '<pre>';
            print_r($response);
            exit;
        }

        $countrList = Country::getCountryList();

        return view('users.addCreditFund', ['title' => $pageTitle, 'page_heading' => $page_heading, $activetab => 1, 'recordInfo' => $recordInfo, 'countrList' => $countrList]);
    }

    public function manualDeposit(Request $request) {
        $pageTitle = 'Manual Deposit';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $input = Input::all();
        if (!empty($input)) { //echo '<pre>';print_r($input);
//		$rules = array(
//                'refNum' => 'required',
//                'payment_method' => 'required',
//            );  
//			
//			$customMessages = [
//                'refNum.required' => 'Reference Number field can\'t be left blank.',
//				'payment_method.required' => 'Select Bank',
//            ];
//            $validator = Validator::make($input, $rules, $customMessages);             
//            if ($validator->fails()) {
            if (!isset($input['payment_method'])) {
//                return Redirect::to('/auth/manual-deposit')->withErrors($validator)->withInput();
                Session::put('failed_session_message', 'Select Bank');
                return Redirect::to('/auth/manual-deposit');
            } else {
                if ($recordInfo->user_type == 'Personal') {
                    $user_name = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($recordInfo->user_type == 'Business') {
                    $user_name = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name == "") {
                    $user_name = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
                    $user_name = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                }

                $amount = Session::get('manualDepstAmnt');
                $currency = Session::get('manualDepstCurrnc');


                $requestExist = ManualDeposit::where('user_id', Session::get('user_id'))->where('amount', $amount)->whereIn('status', array(0, 2))->first();
            
                if ($requestExist) {
                    Session::put('error_session_message', 'Your previous same amount deposit request not completed yet.');
                    return Redirect::to('auth/manual-deposit');
                }


                $requestExistcount = ManualDeposit::where('user_id', Session::get('user_id'))->whereIn('status', array(0, 2))->count();
           
                if ($requestExistcount >= 2) {
                    Session::put('error_session_message', 'Your previous deposit request not completed yet.');
                    return Redirect::to('auth/manual-deposit');
                }
                $refrence_id = time() . rand() . Session::get('user_id');
                $trans = new Transaction([
                    "user_id" => Session::get('user_id'),
                    "receiver_id" => 0,
                    "amount" => $amount,
                    "fees" => 0,
                    "currency" => $currency,
                    "trans_type" => 1, //Debit-Withdraw
                    "trans_to" => 'Dafri_Wallet',
                    "trans_for" => 'ManualDeposit',
                    "refrence_id" => 'na',
                    "billing_description" => 'na',
                    "user_close_bal"=>$recordInfo->wallet_amount,
                    "real_value" => $amount,
                    "status" => 2,
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s'),
                ]);
                $trans->save();
                $TransId = $trans->id;

                $md = new ManualDeposit([
                    'user_id' => Session::get('user_id'),
                    'user_name' => $user_name,
                    'user_email' => $recordInfo->email,
                    'trans_id' => $TransId,
                    'bank_name' => $input['payment_method'],
                    'currency' => $currency,
                    'amount' => $amount,
                    'ref_number' => $input['refNum'],
                    'status' => 0,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $md->save();
                $depositID = $md->id;
                //Mail Start

                $TransId = $TransId;
                $emailId = $recordInfo->email;
                $userName = $user_name;

                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your Manual deposit request with transaction ID ' . $TransId . ' has been created successfully. Our finance team will check and get back to you soon.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . $loginLnk . '"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                $emailSubject = 'DafriBank Digital | Manual Deposit Request Received';
//                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));


                $emailData['subject'] = $emailSubject;
                $emailData['userName'] = $userName;
                $emailData['TransId'] = $TransId;
//                $emailData['amount_cc'] = $user->currency . ' ' . $amount_cc;
                $emailData['loginLnk'] = $loginLnk;

                Mail::send('emails.manualRequest', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });

                $notif = new Notification([
                    'user_id' => $recordInfo->id,
                    'notif_subj' => $emailSubject,
                    'notif_body' => $emailBody,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $notif->save();
                //Mail End

                Session::forget('manualDepstAmnt');
                Session::forget('manualDepstCurrnc');
                Session::save();
//                Session::put('success_session_message', "Manual Deposit Request Saved Successfully and will be processed shortly.");
                Session::put('success_session_message', 'Manual deposit step one success. Step two, please copy your reference No and our banking details and deposit within the next 60 minutes. Please remember that deposits made without your DafriBank account as a reference will not be credited.');
//                Session::put('success_session_message', "Manual Deposit Request Saved Successfully, Our finance team will check and get back to you soon.");
//			  Session::flash('success_message', "Manual Deposit Request Saved Successfully, Our finance team will check and get back to you soon.");
                return Redirect::to('auth/add-fund');
            }
        }

        return view('users.manual_deposit', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function sendLevelChangeMail($user_id, $newLevel) {
        $user = User::where('id', $user_id)->first();
        if ($user->user_type == 'Personal') {
            $user_name = strtoupper($user->first_name);
            $loginURL = HTTP_PATH . "/personal-login";
        } else if ($user->user_type == 'Business') {
            $user_name = strtoupper($user->business_name);
            $loginURL = HTTP_PATH . "/business-login";
        } else if ($user->user_type == 'Agent' and $user->first_name != "") {
            $user_name = strtoupper($user->first_name);
            $loginURL = HTTP_PATH . "/personal-login";
        } else if ($user->user_type == 'Agent' and $user->business_name != "") {
            $user_name = strtoupper($user->business_name);
            $loginURL = HTTP_PATH . "/business-login";
        }

        if ($user->user_type == 'Business' && strtolower(trim($newLevel)) == 'gold') {
            return true;
        }

        $emailId = $user->email;
        $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hi</span> ' . $user_name . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Congratulations! You have earned a ' . $newLevel . ' membership in DafriBank.<br><br>From now, you are eligible to get the benefits of ' . $newLevel . ' Membership.<br><br>Keep Going.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . $loginURL . '"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
        $emailSubject = "DafriBank Digital | You have earned a " . $newLevel . " membership";
//        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

        $emailData['subject'] = $emailSubject;
        $emailData['name'] = $user_name;
        $emailData['newLevel'] = $newLevel;
        $emailData['loginURL'] = $loginURL;

        Mail::send('emails.upgradeLevel', $emailData, function ($message)use ($emailData, $emailId) {
            $message->to($emailId, $emailId)
                    ->subject($emailData['subject']);
        });
    }

    public function verifyEFTPayment(Request $request) {
        $paymntFlag = $request->get('Status');
        $remainFee = 0;
        if ($paymntFlag == 'Complete') {
            $transID = $request->get('TransactionReference');
            $refID = $request->get('TransactionId');
            $billingDesc = $request->get('StatusMessage');
            $transAmnt = $request->get('Amount');
            $transCurrency = $request->get('CurrencyCode');

            $transDetail = Transaction::where("id", $transID)->where('status', 1)->first();
            if ($transDetail) {
                $fundAmnt = base64_encode($transCurrency . " " . $transAmnt);
                return Redirect::to('auth/success-add-fund/' . base64_encode($transID) . '/' . base64_encode($refID) . '/' . $fundAmnt);
            } else {

                
                $user = User::where('id', Session::get('user_id'))->first();
                
                $transData = Transaction::where("id", $transID)->first();
//                echo '<pre>';print_r($transData);exit;
                if ($user->user_type == 'Personal' || ($user->user_type == 'Agent' && $user->first_name != '')) {

                    if ($user->account_category == "Silver") {
                        $fee_name = 'EFT_COMPLETE';
                    } else if ($user->account_category == "Gold") {
                        $fee_name = 'EFT_COMPLETE_GOLD';
                    } else if ($user->account_category == "Platinum") {
                        $fee_name = 'EFT_COMPLETE_PLATINUM';
                    } else if ($user->account_category == "Private Wealth") {
                        $fee_name = 'EFT_COMPLETE_PRIVATE_WEALTH';
                    } else {
                        $fee_name = 'EFT_COMPLETE';
                    }

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fee_amount = ($transAmnt * $fees->fee_value) / 100;
                    $userName = strtoupper($user->first_name);
                    $loginURL = HTTP_PATH . "/personal-login";
                    
                    
                    $remainFee = $fee_amount;
                    if ($user->referral != 'na') {
                        $currency = $user->currency;
                        $refrlComm = ($fee_amount * 25) / 100;
                        $refrlComm = $refrlComm;
                        
                        $remainFee = $fee_amount-$refrlComm;
                        
                        if ($currency != 'USD') {

                            $amountt = $refrlComm;
                            $convr_fee_name = 'CONVERSION_FEE';
                            $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                            $conversion_feet = $fees_convr->fee_value;

                            $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                            $host_currency = trim($currency);
                            $user_currency = 'USD';

                            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                            $convertedCurrArr = explode('##', $convertedCurrArr);
                            $user_invited_amountt = $convertedCurrArr[0];
                        } else {
                            $user_invited_amountt = $refrlComm;
                        }

                        $referlCode = 'refid=' . $user->referral;
                        $referrer = Referalcode::where('referal_link', $referlCode)->first();
                        if (!empty($referrer)) {
                            $refComm = new ReferralCommission([
                                'user_id' => Session::get('user_id'),
                                'referrer_id' => $referrer->user_id,
                                'amount' => $user_invited_amountt,
                                'trans_id' => $transID,
                                'action' => 'WALLET_TOPUP',
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                            ]);
                            $refComm->save();
                        }
                    }
                } else {
                    if ($user->account_category == "Gold") {
                        $fee_name = 'MERCHANT_EFT_COMPLETE_GOLD';
                    } else if ($user->account_category == "Platinum") {
                        $fee_name = 'MERCHANT_EFT_COMPLETE_PLATINUM';
                    } else if ($user->account_category == "Enterprises") {
                        $fee_name = 'MERCHANT_EFT_COMPLETE_Enterprises';
                    } else {
                        $fee_name = 'MERCHANT_EFT_COMPLETE_GOLD';
                    }

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fee_amount = ($transAmnt * $fees->fee_value) / 100;
                    $userName = strtoupper($user->business_name);
                    $loginURL = HTTP_PATH . "/business-login";
                    
                    $remainFee = $fee_amount;
                    if ($user->referral != 'na') {
                        $currency = $user->currency;
                        $refrlComm = ($fee_amount * 25) / 100;
                        $refrlComm =$refrlComm;
                        
                        $remainFee = $fee_amount-$refrlComm;
                        
                        if ($currency != 'USD') {

                            $amountt = $refrlComm;
                            $convr_fee_name = 'CONVERSION_FEE';
                            $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                            $conversion_feet = $fees_convr->fee_value;

                            $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                            $host_currency = trim($currency);
                            $user_currency = 'USD';

                            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                            $convertedCurrArr = explode('##', $convertedCurrArr);
                            $user_invited_amountt = $convertedCurrArr[0];
                        } else {
                            $user_invited_amountt = $refrlComm;
                        }

                        $referlCode = 'refid=' . $user->referral;
                        $referrer = Referalcode::where('referal_link', $referlCode)->first();
                        if (!empty($referrer)) {
                            $refComm = new ReferralCommission([
                                'user_id' => Session::get('user_id'),
                                'referrer_id' => $referrer->user_id,
                                'amount' => $user_invited_amountt,
                                'trans_id' => $transID,
                                'action' => 'WALLET_TOPUP',
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                            ]);
                            $refComm->save();
                        }
                    }
                }
                
//                $remainFee = $fee_amount-$refrlComm;
                
                

                $userWallet = ($user->wallet_amount + ($transAmnt - $fee_amount));
                Transaction::where("id", $transID)->update(['real_value'=>($transAmnt - $fee_amount),'user_close_bal' => $userWallet, 'fees' => $fee_amount, 'receiver_fees' => $fee_amount, 'receiver_currency' => $user->currency, 'refrence_id' => $refID, 'billing_description' => $transData->billing_description.'##'.$billingDesc, 'status' => 1,'ozow_update'=>1, 'updated_at' => date('Y-m-d H:i:s')]);


                $userWalletUSD = $this->fetchCurrencyRate($user->currency, $userWallet);

                $this->updateCard($userWalletUSD, $userWallet, $user);
                
                $currency = $user->currency;
                $host_currency = trim($currency);
                $user_currency = 'USD';

                $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $remainFee);
                $convertedCurrArr = explode('##', $convertedCurrArr);
                $admin_amountt = $convertedCurrArr[0];
                
                $adminInfo = User::where('id', 1)->first();
                $admin_wallet = ($adminInfo->wallet_amount + $admin_amountt);
                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                /* if ($user->user_type == 'Personal') {
                  if ($userWalletUSD >= 21000 and $userWalletUSD <= 50000) {
                  User::where('id', Session::get('user_id'))->update(['account_category' => 'Gold', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                  $this->sendLevelChangeMail(Session::get('user_id'), 'Gold');
                  } else if ($userWalletUSD >= 50000 and $userWalletUSD <= 100000) {
                  User::where('id', Session::get('user_id'))->update(['account_category' => 'Platinum', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                  $this->sendLevelChangeMail(Session::get('user_id'), 'Platinum');
                  } else if ($userWalletUSD >= 100000) {
                  User::where('id', Session::get('user_id'))->update(['account_category' => 'Private Wealth', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                  $this->sendLevelChangeMail(Session::get('user_id'), 'Private Wealth');
                  } else {
                  User::where('id', Session::get('user_id'))->update(['wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                  }
                  } else if ($user->user_type == 'Business') {
                  if ($userWalletUSD <= 1000000) {
                  User::where('id', Session::get('user_id'))->update(['account_category' => 'Gold', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                  $this->sendLevelChangeMail(Session::get('user_id'), 'Gold');
                  } else if ($userWalletUSD > 1000000 and $userWalletUSD <= 5000000) {
                  User::where('id', Session::get('user_id'))->update(['account_category' => 'Platinum', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                  $this->sendLevelChangeMail(Session::get('user_id'), 'Platinum');
                  } else if ($userWalletUSD > 5000000) {
                  User::where('id', Session::get('user_id'))->update(['account_category' => 'Enterprises', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                  $this->sendLevelChangeMail(Session::get('user_id'), 'Enterprises');
                  } else {
                  User::where('id', Session::get('user_id'))->update(['wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                  }
                  } else {
                  User::where('id', Session::get('user_id'))->update(['wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                  } */

                $emailId = $user->email;

                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hey</span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your account has been credited with ' . $transCurrency . ' ' . $transAmnt . ' and fees for this transaction is ' . $fee_amount . '. The transaction ID is ' . $transID . ' and reference ID is ' . $refID . '.<br><br>If this is not you, please contact DafriBank Admin.<br><br>Please contact DafriBank Admin for any assistance.<br><br>If this is not you, please contact DafriBank Admin.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . $loginURL . '"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . $loginURL . '" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody> </table></body></html>';
                $emailSubject = "DafriBank Digital | Account has been credited with " . $transCurrency . " " . $transAmnt;
//            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                $emailData['subject'] = $emailSubject;
                $emailData['userName'] = $userName;
                $emailData['amount'] = $transCurrency . ' ' . $transAmnt;
                $emailData['fee_amount'] = $transCurrency . ' ' . $fee_amount;
                $emailData['transID'] = $transID;
                $emailData['refID'] = $refID;
                $emailData['loginLnk'] = $loginURL;

                Mail::send('emails.accountCredit', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });

                $notif = new Notification([
                    'user_id' => $user->id,
                    'notif_subj' => $emailSubject,
                    'notif_body' => $emailBody,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $notif->save();

                //Session::flash('success_message', "Your Wallet has been credited with ".$transCurrency." ".$transAmnt);
                //return Redirect::to('auth/add-fund');	
                $fundAmnt = base64_encode($transCurrency . " " . $transAmnt);
                return Redirect::to('auth/success-add-fund/' . base64_encode($transID) . '/' . base64_encode($refID) . '/' . $fundAmnt);
            }
        } else if ($paymntFlag == 'Cancelled') {
            $transID = $request->get('TransactionReference');
            $refID = $request->get('TransactionId');
            $billingDesc = $request->get('StatusMessage');
            $transAmnt = $request->get('Amount');
            $transCurrency = $request->get('CurrencyCode');

            $user = User::where('id', Session::get('user_id'))->first();
            if ($user->user_type == 'Personal' || ($user->user_type == 'Agent' && $user->first_name != '')) {

                if ($user->account_category == "Silver") {
                    $fee_name = 'EFT_CANCELLED';
                } else if ($user->account_category == "Gold") {
                    $fee_name = 'EFT_CANCELLED_GOLD';
                } else if ($user->account_category == "Platinum") {
                    $fee_name = 'EFT_CANCELLED_PLATINUM';
                } else if ($user->account_category == "Private Wealth") {
                    $fee_name = 'EFT_CANCELLED_PRIVATE_WEALTH';
                } else {
                    $fee_name = 'EFT_CANCELLED';
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fee_amount = ($transAmnt * $fees->fee_value) / 100;
                $userName = strtoupper($user->first_name);

                $remainFee = $fee_amount;
                if ($user->referral != 'na') {
                    $currency = $user->currency;
                    $refrlComm = ($fee_amount * 25) / 100;
                    $refrlComm = $refrlComm;
                    
                    $remainFee = $fee_amount-$refrlComm;
                    
                    if ($currency != 'USD') {

                            $amountt = $refrlComm;
                            $convr_fee_name = 'CONVERSION_FEE';
                            $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                            $conversion_feet = $fees_convr->fee_value;

                            $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                            $host_currency = trim($currency);
                            $user_currency = 'USD';

                            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                            $convertedCurrArr = explode('##', $convertedCurrArr);
                            $user_invited_amountt = $convertedCurrArr[0];
                        } else {
                            $user_invited_amountt = $refrlComm;
                        }

                    $referlCode = 'refid=' . $user->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([
                            'user_id' => Session::get('user_id'),
                            'referrer_id' => $referrer->user_id,
                            'amount' => $user_invited_amountt,
                            'trans_id' => $transID,
                            'action' => 'WALLET_TOPUP',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }
                }
            } else {
                if ($user->account_category == "Gold") {
                    $fee_name = 'MERCHANT_EFT_CANCELLED_GOLD';
                } else if ($user->account_category == "Platinum") {
                    $fee_name = 'MERCHANT_EFT_CANCELLED_PLATINUM';
                } else if ($user->account_category == "Enterprises") {
                    $fee_name = 'MERCHANT_EFT_CANCELLED_Enterprises';
                } else {
                    $fee_name = 'MERCHANT_EFT_CANCELLED_GOLD';
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fee_amount = ($transAmnt * $fees->fee_value) / 100;
                $userName = strtoupper($user->business_name);

                $remainFee = $fee_amount;
                if ($user->referral != 'na') {
                    $currency = $user->currency;
                    $refrlComm = ($fee_amount * 25) / 100;
                    $refrlComm = $refrlComm;
                    
                    $remainFee = $fee_amount-$refrlComm;
                    
                    if ($currency != 'USD') {

                            $amountt = $refrlComm;
                            $convr_fee_name = 'CONVERSION_FEE';
                            $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                            $conversion_feet = $fees_convr->fee_value;

                            $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                            $host_currency = trim($currency);
                            $user_currency = 'USD';

                            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                            $convertedCurrArr = explode('##', $convertedCurrArr);
                            $user_invited_amountt = $convertedCurrArr[0];
                        } else {
                            $user_invited_amountt = $refrlComm;
                        }

                    $referlCode = 'refid=' . $user->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([
                            'user_id' => Session::get('user_id'),
                            'referrer_id' => $referrer->user_id,
                            'amount' => $user_invited_amountt,
                            'trans_id' => $transID,
                            'action' => 'WALLET_TOPUP',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }
                }
            }

            $userWallet = ($user->wallet_amount - $fee_amount);
            $transData = Transaction::where("id", $transID)->first();
            Transaction::where("id", $transID)->update(['real_value'=>($fee_amount),'user_close_bal' => $userWallet, 'fees' => $fee_amount, 'receiver_fees' => $fee_amount, 'receiver_currency' => $user->currency, 'refrence_id' => $refID, 'billing_description' =>$transData->billing_description.'##'.$billingDesc,'ozow_update'=>1, 'status' => 3, 'updated_at' => date('Y-m-d H:i:s')]);

            $currency = $user->currency;
            $host_currency = trim($currency);
            $user_currency = 'USD';

            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $remainFee);
            $convertedCurrArr = explode('##', $convertedCurrArr);
            $admin_amountt = $convertedCurrArr[0];

            $adminInfo = User::where('id', 1)->first();
            $admin_wallet = ($adminInfo->wallet_amount + $admin_amountt);
            User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

            User::where('id', Session::get('user_id'))->update(['wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);

            $emailId = $user->email;

            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hey</span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your transaction for amount  ' . $transCurrency . ' ' . $transAmnt . ' has been cancelled by issuing bank. Fees for this transaction is ' . $transCurrency . ' ' . $fee_amount . '.<br><br>If this is not you, please contact DafriBank Admin.<br><br>Please contact DafriBank Admin for any assistance.<br><br>If this is not you, please contact DafriBank Admin.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . HTTP_PATH . '/business-login" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody> </table></body></html>';
            $emailSubject = "DafriBank Digital | Transaction Cancelled";
            $emailData['subject'] = $emailSubject;
            $emailData['userName'] = $userName;
            $emailData['amount'] = $transCurrency . ' ' . $transAmnt;
            $emailData['fee_amount'] = $transCurrency . ' ' . $fee_amount;
            $emailData['transCurrency'] = $transCurrency;
            $emailData['transID'] = $transID;
            $emailData['refID'] = $refID;

            Mail::send('emails.transactionCancelled', $emailData, function ($message)use ($emailData, $emailId) {
                $message->to($emailId, $emailId)
                        ->subject($emailData['subject']);
            });
//            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

            $notif = new Notification([
                'user_id' => $user->id,
                'notif_subj' => $emailSubject,
                'notif_body' => $emailBody,
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s'),
            ]);
            $notif->save();

            Session::put('error_session_message', "Your Transaction has been Unsuccessful.");
//            Session::flash('error_message', "Your Transaction has been Unsuccessfull.");
            return Redirect::to('auth/add-fund');
        } else if ($paymntFlag == 'Error') {
            $transID = $request->get('TransactionReference');
            $refID = $request->get('TransactionId');
            $billingDesc = $request->get('StatusMessage');
            $transAmnt = $request->get('Amount');
            $transCurrency = $request->get('CurrencyCode');

            $user = User::where('id', Session::get('user_id'))->first();
            if ($user->user_type == 'Personal' || ($user->user_type == 'Agent' && $user->first_name != '')) {
                if ($user->account_category == "Silver") {
                    $fee_name = 'EFT_ERROR';
                } else if ($user->account_category == "Gold") {
                    $fee_name = 'EFT_ERROR_GOLD';
                } else if ($user->account_category == "Platinum") {
                    $fee_name = 'EFT_ERROR_PLATINUM';
                } else if ($user->account_category == "Private Wealth") {
                    $fee_name = 'EFT_ERROR_PRIVATE_WEALTH';
                } else {
                    $fee_name = 'EFT_ERROR';
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fee_amount = ($transAmnt * $fees->fee_value) / 100;
                $userName = strtoupper($user->first_name);

                $remainFee = $fee_amount;
                if ($user->referral != 'na') {
                    $currency = $user->currency;
                    $refrlComm = ($fee_amount * 25) / 100;
                    $refrlComm = $refrlComm;
                    
                    $remainFee = $fee_amount-$refrlComm;
                    
                    if ($currency != 'USD') {

                            $amountt = $refrlComm;
                            $convr_fee_name = 'CONVERSION_FEE';
                            $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                            $conversion_feet = $fees_convr->fee_value;

                            $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                            $host_currency = trim($currency);
                            $user_currency = 'USD';

                            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                            $convertedCurrArr = explode('##', $convertedCurrArr);
                            $user_invited_amountt = $convertedCurrArr[0];
                        } else {
                            $user_invited_amountt = $refrlComm;
                        }

                    $referlCode = 'refid=' . $user->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([
                            'user_id' => Session::get('user_id'),
                            'referrer_id' => $referrer->user_id,
                            'amount' => $user_invited_amountt,
                            'trans_id' => $transID,
                            'action' => 'WALLET_TOPUP',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }
                }
            } else {
                if ($user->account_category == "Gold") {
                    $fee_name = 'MERCHANT_EFT_ERROR_GOLD';
                } else if ($user->account_category == "Platinum") {
                    $fee_name = 'MERCHANT_EFT_ERROR_PLATINUM';
                } else if ($user->account_category == "Enterprises") {
                    $fee_name = 'MERCHANT_EFT_ERROR_Enterprises';
                } else {
                    $fee_name = 'MERCHANT_EFT_ERROR_GOLD';
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fee_amount = ($transAmnt * $fees->fee_value) / 100;
                $userName = strtoupper($user->business_name);

                $remainFee = $fee_amount;
                if ($user->referral != 'na') {
                    $currency = $user->currency;
                    $refrlComm = ($fee_amount * 25) / 100;
                    $refrlComm = $refrlComm;
                    
                    $remainFee = $fee_amount-$refrlComm;
                    
                    if ($currency != 'USD') {

                            $amountt = $refrlComm;
                            $convr_fee_name = 'CONVERSION_FEE';
                            $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                            $conversion_feet = $fees_convr->fee_value;

                            $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                            $host_currency = trim($currency);
                            $user_currency = 'USD';

                            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                            $convertedCurrArr = explode('##', $convertedCurrArr);
                            $user_invited_amountt = $convertedCurrArr[0];
                        } else {
                            $user_invited_amountt = $refrlComm;
                        }

                    $referlCode = 'refid=' . $user->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([
                            'user_id' => Session::get('user_id'),
                            'referrer_id' => $referrer->user_id,
                            'amount' => $user_invited_amountt,
                            'trans_id' => $transID,
                            'action' => 'WALLET_TOPUP',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }
                }
            }

            $userWallet = ($user->wallet_amount - $fee_amount);
            User::where('id', Session::get('user_id'))->update(['wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
            
            $currency = $user->currency;
            $host_currency = trim($currency);
            $user_currency = 'USD';

            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $remainFee);
            $convertedCurrArr = explode('##', $convertedCurrArr);
            $admin_amountt = $convertedCurrArr[0];

            $adminInfo = User::where('id', 1)->first();
            $admin_wallet = ($adminInfo->wallet_amount + $admin_amountt);
            User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hey</span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your transaction for amount   ' . $transCurrency . ' ' . $transAmnt . ' has been failed. Fees for this transaction is ' . $transCurrency . ' ' . $fee_amount . '.<br><br>If this is not you, please contact DafriBank Admin.<br><br>Please contact DafriBank Admin for any assistance.<br><br>If this is not you, please contact DafriBank Admin.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . HTTP_PATH . '/business-login" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody> </table></body></html>';
            $emailSubject = "DafriBank Digital | Transaction Failed";

            $notif = new Notification([
                'user_id' => $user->id,
                'notif_subj' => $emailSubject,
                'notif_body' => $emailBody,
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s'),
            ]);
            $notif->save();
            $transData = Transaction::where("id", $transID)->first();
            Transaction::where("id", $transID)->update(['real_value'=>($fee_amount),'user_close_bal' => $userWallet, 'fees' => $fee_amount, 'receiver_fees' => $fee_amount, 'receiver_currency' => $user->currency, 'refrence_id' => $refID, 'billing_description' =>$transData->billing_description.'##'.$billingDesc,'ozow_update'=>1, 'status' => 5, 'updated_at' => date('Y-m-d H:i:s')]);

            $emailId = $user->email;


            $emailData['subject'] = $emailSubject;
            $emailData['userName'] = $userName;
            $emailData['amount'] = $transCurrency . ' ' . $transAmnt;
            $emailData['fee_amount'] = $transCurrency . ' ' . $fee_amount;
            $emailData['transCurrency'] = $transCurrency;
            $emailData['transID'] = $transID;
            $emailData['refID'] = $refID;

            Mail::send('emails.verifyEFTPaymentFailed', $emailData, function ($message)use ($emailData, $emailId) {
                $message->to($emailId, $emailId)
                        ->subject($emailData['subject']);
            });

//            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

            Session::put('error_session_message', "Your Transaction has been Unsuccessful.");
//            Session::flash('error_message', "Your Transaction has been Unsuccessfull.");
            return Redirect::to('auth/add-fund');
        } else if ($paymntFlag == 'Abandoned') {
            $transID = $request->get('TransactionReference');
            $refID = $request->get('TransactionId');
            $billingDesc = $request->get('StatusMessage');
            $transAmnt = $request->get('Amount');
            $transCurrency = $request->get('CurrencyCode');

            $user = User::where('id', Session::get('user_id'))->first();
            if ($user->user_type == 'Personal' || ($user->user_type == 'Agent' && $user->first_name != '')) {
                if ($user->account_category == "Silver") {
                    $fee_name = 'EFT_ABANDONED';
                } else if ($user->account_category == "Gold") {
                    $fee_name = 'EFT_ABANDONED_GOLD';
                } else if ($user->account_category == "Platinum") {
                    $fee_name = 'EFT_ABANDONED_PLATINUM';
                } else if ($user->account_category == "Private Wealth") {
                    $fee_name = 'EFT_ABANDONED_PRIVATE_WEALTH';
                } else {
                    $fee_name = 'EFT_ABANDONED';
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fee_amount = ($transAmnt * $fees->fee_value) / 100;
                $userName = strtoupper($user->first_name);

                $remainFee = $fee_amount;
                if ($user->referral != 'na') {
                    $currency = $user->currency;
                    $refrlComm = ($fee_amount * 25) / 100;
                    $refrlComm = $refrlComm;
                    
                    $remainFee = $fee_amount-$refrlComm;
                    
                    if ($currency != 'USD') {

                            $amountt = $refrlComm;
                            $convr_fee_name = 'CONVERSION_FEE';
                            $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                            $conversion_feet = $fees_convr->fee_value;

                            $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                            $host_currency = trim($currency);
                            $user_currency = 'USD';

                            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                            $convertedCurrArr = explode('##', $convertedCurrArr);
                            $user_invited_amountt = $convertedCurrArr[0];
                        } else {
                            $user_invited_amountt = $refrlComm;
                        }

                    $referlCode = 'refid=' . $user->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([
                            'user_id' => Session::get('user_id'),
                            'referrer_id' => $referrer->user_id,
                            'amount' => $user_invited_amountt,
                            'trans_id' => $transID,
                            'action' => 'WALLET_TOPUP',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }
                }
            } else {
                if ($user->account_category == "Gold") {
                    $fee_name = 'MERCHANT_EFT_ABANDONED_GOLD';
                } else if ($user->account_category == "Platinum") {
                    $fee_name = 'MERCHANT_EFT_ABANDONED_PLATINUM';
                } else if ($user->account_category == "Enterprises") {
                    $fee_name = 'MERCHANT_EFT_ABANDONED_Enterprises';
                } else {
                    $fee_name = 'MERCHANT_EFT_ABANDONED_GOLD';
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fee_amount = ($transAmnt * $fees->fee_value) / 100;
                $userName = strtoupper($user->business_name);

                $remainFee = $fee_amount;
                if ($user->referral != 'na') {
                    $currency = $user->currency;
                    $refrlComm = ($fee_amount * 25) / 100;
                    $refrlComm = $refrlComm;
                    
                    $remainFee = $fee_amount-$refrlComm;
                    
                    if ($currency != 'USD') {

                            $amountt = $refrlComm;
                            $convr_fee_name = 'CONVERSION_FEE';
                            $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                            $conversion_feet = $fees_convr->fee_value;

                            $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                            $host_currency = trim($currency);
                            $user_currency = 'USD';

                            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                            $convertedCurrArr = explode('##', $convertedCurrArr);
                            $user_invited_amountt = $convertedCurrArr[0];
                        } else {
                            $user_invited_amountt = $refrlComm;
                        }

                    $referlCode = 'refid=' . $user->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([
                            'user_id' => Session::get('user_id'),
                            'referrer_id' => $referrer->user_id,
                            'amount' => $user_invited_amountt,
                            'trans_id' => $transID,
                            'action' => 'WALLET_TOPUP',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }
                }
            }

            $userWallet = ($user->wallet_amount - $fee_amount);
            User::where('id', Session::get('user_id'))->update(['wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
          
            $transData = Transaction::where("id", $transID)->first();
            Transaction::where("id", $transID)->update(['real_value'=>($fee_amount),'user_close_bal' => $userWallet, 'fees' => $fee_amount,'receiver_fees' => $fee_amount, 'receiver_currency' => $user->currency, 'refrence_id' => $refID, 'billing_description' =>$transData->billing_description.'##'.$billingDesc,'ozow_update'=>1, 'status' => 6, 'updated_at' => date('Y-m-d H:i:s')]);

            $currency = $user->currency;
            $host_currency = trim($currency);
            $user_currency = 'USD';

            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $remainFee);
            $convertedCurrArr = explode('##', $convertedCurrArr);
            $admin_amountt = $convertedCurrArr[0];

            $adminInfo = User::where('id', 1)->first();
            $admin_wallet = ($adminInfo->wallet_amount + $admin_amountt);
            User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);
            
            $emailId = $user->email;

            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hey</span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your transaction for amount   ' . $transCurrency . ' ' . $transAmnt . ' has been Abandoned. Fees for this transaction is ' . $transCurrency . ' ' . $fee_amount . '.<br><br>If this is not you, please contact DafriBank Admin.<br><br>Please contact DafriBank Admin for any assistance.<br><br>If this is not you, please contact DafriBank Admin.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . HTTP_PATH . '/business-login" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody> </table></body></html>';
            $emailSubject = "DafriBank Digital | Transaction Abandoned";

            $emailData['subject'] = $emailSubject;
            $emailData['userName'] = $userName;
            $emailData['amount'] = $transCurrency . ' ' . $transAmnt;
            $emailData['fee_amount'] = $transCurrency . ' ' . $fee_amount;
            $emailData['transCurrency'] = $transCurrency;
            $emailData['transID'] = $transID;
            $emailData['refID'] = $refID;

            Mail::send('emails.verifyEFTPaymentAbandoned', $emailData, function ($message)use ($emailData, $emailId) {
                $message->to($emailId, $emailId)
                        ->subject($emailData['subject']);
            });
//            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

            $notif = new Notification([
                'user_id' => $user->id,
                'notif_subj' => $emailSubject,
                'notif_body' => $emailBody,
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s'),
            ]);
            $notif->save();

//            Session::flash('error_message', "Your Transaction has been Unsuccessfull.");
            Session::put('error_session_message', "Your Transaction has been Unsuccessful.");
            return Redirect::to('auth/add-fund');
        } else if ($paymntFlag == 'PendingInvestigation') {
            $transID = $request->get('TransactionReference');
            $refID = $request->get('TransactionId');
            $billingDesc = $request->get('StatusMessage');
            $transAmnt = $request->get('Amount');
            $transCurrency = $request->get('CurrencyCode');

            $user = User::where('id', Session::get('user_id'))->first();
            $userWallet = $user->wallet_amount;
            $transData = Transaction::where("id", $transID)->first();
            Transaction::where("id", $transID)->update(['user_close_bal' => $userWallet,'refrence_id' => $refID, 'billing_description' => $transData->billing_description.'##'.$billingDesc,'ozow_update'=>1, 'status' => 7, 'updated_at' => date('Y-m-d H:i:s')]);

            $user = User::where('id', Session::get('user_id'))->first();
            $emailId = $user->email;
            if ($user->user_type == 'Personal') {
                $userName = strtoupper($user->first_name);
            } else {
                $userName = strtoupper($user->business_name);
            }

            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hey</span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your transaction for amount   ' . $transCurrency . ' ' . $transAmnt . ' has been Pending for Investigation.<br><br>If this is not you, please contact DafriBank Admin.<br><br>Please contact DafriBank Admin for any assistance.<br><br>If this is not you, please contact DafriBank Admin.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . HTTP_PATH . '/business-login" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody> </table></body></html>';
            $emailSubject = "DafriBank Digital | Transaction Pending for Investigation";
            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

            $notif = new Notification([
                'user_id' => $user->id,
                'notif_subj' => $emailSubject,
                'notif_body' => $emailBody,
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s'),
            ]);
            $notif->save();

//            Session::flash('error_message', "Your Transaction is Pending for Investigation.");
            Session::put('error_session_message', "Your Transaction is Pending for Investigation.");
            return Redirect::to('auth/add-fund');
        } else {
            echo "Invalid Status Code!";
            exit;
        }
    }

    public function authencticatePayment(Request $request) {
        $paymntFlag = $request->get('status');
        if ($paymntFlag == "successful") {
            $transID = $request->get('tx_ref');
            $refID = $request->get('transaction_id');

            $user = User::where('id', Session::get('user_id'))->first();
            $trans = Transaction::where("id", $transID)->first();

            if ($user->user_type == 'Personal') {
                if ($user->account_category == "Silver") {
                    $fee_name = 'BANK_CARD_SUCCESS';
                } else if ($user->account_category == "Gold") {
                    $fee_name = 'BANK_CARD_SUCCESS_GOLD';
                } else if ($user->account_category == "Platinum") {
                    $fee_name = 'BANK_CARD_SUCCESS_PLATINUM';
                } else if ($user->account_category == "Private Wealth") {
                    $fee_name = 'BANK_CARD_SUCCESS_PRIVATE_WEALTH';
                } else {
                    $fee_name = 'BANK_CARD_SUCCESS';
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fee_amount = ($trans->amount * $fees->fee_value) / 100;
                if ($user->referral != 'na') {
                    $refrlComm = ($fee_amount * 25) / 100;
                    $refrlComm = $refrlComm;

                    $referlCode = 'refid=' . $user->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([
                            'user_id' => Session::get('user_id'),
                            'referrer_id' => $referrer->user_id,
                            'amount' => $refrlComm,
                            'action' => 'WALLET_TOPUP',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }
                }
            } else {
                if ($user->account_category == "Gold") {
                    $fee_name = 'MERCHANT_BANK_CARD_SUCCESS_GOLD';
                } else if ($user->account_category == "Platinum") {
                    $fee_name = 'MERCHANT_BANK_CARD_SUCCESS_PLATINUM';
                } else if ($user->account_category == "Enterprises") {
                    $fee_name = 'MERCHANT_BANK_CARD_SUCCESS_Enterprises';
                } else {
                    $fee_name = 'MERCHANT_BANK_CARD_SUCCESS_GOLD';
                }
                $fees = Fee::where('fee_name', $fee_name)->first();
                $fee_amount = ($trans->amount * $fees->fee_value) / 100;
                if ($user->referral != 'na') {
                    $refrlComm = ($fee_amount * 25) / 100;
                    $refrlComm = $refrlComm;

                    $referlCode = 'refid=' . $user->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([
                            'user_id' => Session::get('user_id'),
                            'referrer_id' => $referrer->user_id,
                            'amount' => $refrlComm,
                            'action' => 'WALLET_TOPUP',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }
                }
            }

            Transaction::where("id", $transID)->update(['fees' => $fee_amount, 'refrence_id' => $refID, 'status' => 1, 'updated_at' => date('Y-m-d H:i:s')]);

            $userWallet = ($user->wallet_amount + ($trans->amount - $fee_amount));
            $userWalletUSD = $this->fetchCurrencyRate($user->currency, $userWallet);

            $this->updateCard($userWalletUSD, $userWallet, $user);

            /* if ($user->user_type == 'Personal') {
              if ($userWalletUSD >= 21000 and $userWalletUSD <= 50000) {
              User::where('id', Session::get('user_id'))->update(['account_category' => 'Gold', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
              $this->sendLevelChangeMail(Session::get('user_id'), 'Gold');
              } else if ($userWalletUSD >= 50000 and $userWalletUSD <= 100000) {
              User::where('id', Session::get('user_id'))->update(['account_category' => 'Platinum', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
              $this->sendLevelChangeMail(Session::get('user_id'), 'Platinum');
              } else if ($userWalletUSD >= 100000) {
              User::where('id', Session::get('user_id'))->update(['account_category' => 'Private Wealth', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
              $this->sendLevelChangeMail(Session::get('user_id'), 'Private Wealth');
              } else {
              User::where('id', Session::get('user_id'))->update(['wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
              }
              } else if ($user->user_type == 'Business') {
              if ($userWalletUSD <= 1000000) {
              User::where('id', Session::get('user_id'))->update(['account_category' => 'Gold', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
              $this->sendLevelChangeMail(Session::get('user_id'), 'Gold');
              } else if ($userWalletUSD > 1000000 and $userWalletUSD <= 5000000) {
              User::where('id', Session::get('user_id'))->update(['account_category' => 'Platinum', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
              $this->sendLevelChangeMail(Session::get('user_id'), 'Platinum');
              } else if ($userWalletUSD > 5000000) {
              User::where('id', Session::get('user_id'))->update(['account_category' => 'Enterprises', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
              $this->sendLevelChangeMail(Session::get('user_id'), 'Enterprises');
              } else {
              User::where('id', Session::get('user_id'))->update(['account_category' => 'Gold', 'wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
              }
              } else {
              User::where('id', Session::get('user_id'))->update(['wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
              } */

            $emailId = $user->email;
            if ($user->user_type == 'Personal') {
                $userName = strtoupper($user->first_name);
            } else {
                $userName = strtoupper($user->business_name);
            }

            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hey</span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your account has been credited with ' . $trans->currency . ' ' . $trans->amount . ' and fees for this transaction is ' . $trans->currency . ' ' . $fee_amount . '. The transaction ID is ' . $transID . ' and reference ID is: ' . $refID . '.<br><br>If this is not you, please contact DafriBank Admin.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . HTTP_PATH . '/business-login" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody> </table></body></html>';
            $emailSubject = 'DafriBank Digital | Fund Added Successfully.';
            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

            $notif = new Notification([
                'user_id' => Session::get('user_id'),
                'notif_subj' => $emailSubject,
                'notif_body' => $emailBody,
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s'),
            ]);
            $notif->save();

            //Session::flash('success_message', "Your Wallet has been credited with ".$trans->currency." ".$trans->amount);
            //return Redirect::to('auth/add-fund');
            $passAmnt = base64_encode($trans->currency . " " . $trans->amount);
            return Redirect::to('auth/success-add-fund/' . base64_encode($transID) . '/' . base64_encode($refID) . '/' . $passAmnt);
        } else if ($paymntFlag == "cancelled") {
            $transID = $request->get('tx_ref');

            $user = User::where('id', Session::get('user_id'))->first();
            $trans = Transaction::where("id", $transID)->first();

            if ($user->user_type == 'Personal') {
                if ($user->account_category == "Silver") {
                    $fee_name = 'BANK_CARD_CANCEL';
                } else if ($user->account_category == "Gold") {
                    $fee_name = 'BANK_CARD_CANCEL_GOLD';
                } else if ($user->account_category == "Platinum") {
                    $fee_name = 'BANK_CARD_CANCEL_PLATINUM';
                } else if ($user->account_category == "Private Wealth") {
                    $fee_name = 'BANK_CARD_CANCEL_PRIVATE_WEALTH';
                } else {
                    $fee_name = 'BANK_CARD_CANCEL';
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fee_amount = ($trans->amount * $fees->fee_value) / 100;
                $userName = strtoupper($user->first_name);

                if ($user->referral != 'na') {
                    $refrlComm = ($fee_amount * 25) / 100;
                    $refrlComm = $refrlComm;

                    $referlCode = 'refid=' . $user->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([
                            'user_id' => Session::get('user_id'),
                            'referrer_id' => $referrer->user_id,
                            'amount' => $refrlComm,
                            'action' => 'WALLET_TOPUP',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }
                }
            } else {
                if ($user->account_category == "Gold") {
                    $fee_name = 'MERCHANT_BANK_CARD_CANCEL_GOLD';
                } else if ($user->account_category == "Platinum") {
                    $fee_name = 'MERCHANT_BANK_CARD_CANCEL_PLATINUM';
                } else if ($user->account_category == "Enterprises") {
                    $fee_name = 'MERCHANT_BANK_CARD_CANCEL_Enterprises';
                } else {
                    $fee_name = 'MERCHANT_BANK_CARD_CANCEL_GOLD';
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fee_amount = ($trans->amount * $fees->fee_value) / 100;
                $userName = strtoupper($user->business_name);

                if ($user->referral != 'na') {
                    $refrlComm = ($fee_amount * 25) / 100;
                    $refrlComm = $refrlComm;

                    $referlCode = 'refid=' . $user->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([
                            'user_id' => Session::get('user_id'),
                            'referrer_id' => $referrer->user_id,
                            'amount' => $refrlComm,
                            'action' => 'WALLET_TOPUP',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }
                }
            }

            Transaction::where("id", $transID)->update(['fees' => $fee_amount, 'status' => 3, 'updated_at' => date('Y-m-d H:i:s')]);

            $userWallet = ($user->wallet_amount - $fee_amount);
            User::where('id', Session::get('user_id'))->update(['wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);

            $emailId = $user->email;

            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hey</span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your transaction for amount  ' . $trans->currency . ' ' . $trans->amount . ' has been cancelled by issuing bank. Fees for this transaction is' . $trans->currency . ' ' . $fee_amount . '.<br><br>Please contact DafriBank Admin for any assistance.<br><br>If this is not you, please contact DafriBank Admin.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . HTTP_PATH . '/business-login" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
            $emailSubject = "DafriBank Digital | Transaction Cancelled";
            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

            $notif = new Notification([
                'user_id' => Session::get('user_id'),
                'notif_subj' => $emailSubject,
                'notif_body' => $emailBody,
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s'),
            ]);
            $notif->save();

            Session::put('error_session_message', "Your Transaction has been Unsuccessful.");
//            Session::flash('error_message', "Your Transaction has been Unsuccessfull.");
            return Redirect::to('auth/add-fund');
        } else if ($paymntFlag == "failed") {
            $transID = $request->get('tx_ref');
            $refID = $request->get('transaction_id');

            $user = User::where('id', Session::get('user_id'))->first();
            $trans = Transaction::where("id", $transID)->first();

            if ($user->user_type == 'Personal') {
                if ($user->account_category == "Silver") {
                    $fee_name = 'BANK_CARD_FAILED';
                } else if ($user->account_category == "Gold") {
                    $fee_name = 'BANK_CARD_FAILED_GOLD';
                } else if ($user->account_category == "Platinum") {
                    $fee_name = 'BANK_CARD_FAILED_PLATINUM';
                } else if ($user->account_category == "Private Wealth") {
                    $fee_name = 'BANK_CARD_FAILED_PRIVATE_WEALTH';
                } else {
                    $fee_name = 'BANK_CARD_FAILED';
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fee_amount = ($trans->amount * $fees->fee_value) / 100;
                $userName = strtoupper($user->first_name);

                if ($user->referral != 'na') {
                    $refrlComm = ($fee_amount * 25) / 100;
                    $refrlComm = $refrlComm;

                    $referlCode = 'refid=' . $user->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([
                            'user_id' => Session::get('user_id'),
                            'referrer_id' => $referrer->user_id,
                            'amount' => $refrlComm,
                            'action' => 'WALLET_TOPUP',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }
                }
            } else {
                if ($user->account_category == "Gold") {
                    $fee_name = 'MERCHANT_BANK_CARD_FAILED_GOLD';
                } else if ($user->account_category == "Platinum") {
                    $fee_name = 'MERCHANT_BANK_CARD_FAILED_PLATINUM';
                } else if ($user->account_category == "Enterprises") {
                    $fee_name = 'MERCHANT_BANK_CARD_FAILED_Enterprises';
                } else {
                    $fee_name = 'MERCHANT_BANK_CARD_FAILED_GOLD';
                }
                $fees = Fee::where('fee_name', $fee_name)->first();
                $fee_amount = ($trans->amount * $fees->fee_value) / 100;
                $userName = strtoupper($user->business_name);

                if ($user->referral != 'na') {
                    $refrlComm = ($fee_amount * 25) / 100;
                    $refrlComm = $refrlComm;

                    $referlCode = 'refid=' . $user->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([
                            'user_id' => Session::get('user_id'),
                            'referrer_id' => $referrer->user_id,
                            'amount' => $refrlComm,
                            'action' => 'WALLET_TOPUP',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }
                }
            }

            $userWallet = ($user->wallet_amount - $fee_amount);
            User::where('id', Session::get('user_id'))->update(['wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);

            Transaction::where("id", $transID)->update(['fees' => $fee_amount, 'refrence_id' => $refID, 'status' => 4, 'updated_at' => date('Y-m-d H:i:s')]);

            $emailId = $user->email;

            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hey</span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your transaction for amount ' . $trans->currency . ' ' . $trans->amount . ' has been failed. Fees for this transaction is ' . $trans->currency . ' ' . $fee_amount . '.<br><br>Please contact DafriBank Admin for any assistance.<br><br>If this is not you, please contact DafriBank Admin.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . HTTP_PATH . '/business-login" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
            $emailSubject = "DafriBank Digital | Transaction Cancelled";
            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

            $notif = new Notification([
                'user_id' => Session::get('user_id'),
                'notif_subj' => $emailSubject,
                'notif_body' => $emailBody,
                'created_at' => date('Y-m-d H:i:s'),
                'updated_at' => date('Y-m-d H:i:s'),
            ]);
            $notif->save();

            Session::put('error_session_message', "Your Transaction has been Failed.");
//            Session::flash('error_message', "Your Transaction has been Failed.");
            return Redirect::to('auth/add-fund');
        }
    }

    public function verifyTransactionOtp(Request $request) {
        $pageTitle = 'Enter OTP';
        $page_heading = 'Enter OTP';
        $activetab = 'actdashboard';

        if ($request->has('otp')) {
            $otp = $request->get('otp');
            $transRef = $request->get('ref');
            $rurl = $request->get('rurl');
            $payload = array("otp" => $otp, "flw_ref" => $transRef, "type" => "card");
            $payload = json_encode($payload);
            $url = 'https://free.flutterwave.com' . $rurl;
            $header = array();
            $header[] = 'Content-type: application/json';
            $header[] = 'Authorization: Bearer FLWSECK_TEST-SANDBOXDEMOKEY-X';
            $x = curl_init($url);
            curl_setopt($x, CURLOPT_HTTPHEADER, $header);
            curl_setopt($x, CURLOPT_POST, true);
            curl_setopt($x, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($x, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($x, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
            curl_setopt($x, CURLOPT_POSTFIELDS, $postdata);
            $y = curl_exec($x);
            curl_close($x);
            $response = json_decode($y);
            print_r($response);
        }

        $recordInfo = User::where('id', Session::get('user_id'))->first();
        return view('users.verifyTransactionOtp', ['title' => $pageTitle, 'page_heading' => $page_heading, $activetab => 1, 'recordInfo' => $recordInfo]);
    }

    private function getUserById($user_id) {
        $user = User::where('id', $user_id)->first();
        if ($user) {
            return $user;
        } else {
            return false;
        }
    }

    public function transactions(Request $request) {
        DB::enableQueryLog();
        $pageTitle = 'Transaction History';
        $activetab = 'actdashboard';
        $query = new Transaction();
        $query = $query->sortable();
        /* $query = $query->orWhere(function ($query) {
          $query->where('user_id', Session::get('user_id'))->orWhere('receiver_id', Session::get('user_id'));
          }); */


        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $updated_currency_date = $recordInfo->updated_currency_date;
        if ($recordInfo->user_type == "Agent") {
            $agent = Agent::where("user_id", Session::get('user_id'))->first();
        }

        if ($request->has('dwnldStatmnt') && $request->get('dwnldStatmnt') == 'true') {
            $statement_period = $request->get('perdStatmnt');
            if ($statement_period == 'last_month') {
                $to = date('Y-m-d', strtotime(date('Y-m-d') . ' - 30 days'));
                $from = date('Y-m-d');
            } else if ($statement_period == 'last_3_month') {
                $to = date('Y-m-d', strtotime(date('Y-m-d') . ' - 90 days'));
                $from = date('Y-m-d');
            } else if ($statement_period == 'last_6_month') {
                $to = date('Y-m-d', strtotime(date('Y-m-d') . ' - 180 days'));
                $from = date('Y-m-d');
            } else if ($statement_period == 'last_1_yr') {
                $to = date('Y-m-d', strtotime(date('Y-m-d') . ' - 365 days'));
                $from = date('Y-m-d');
            } else if ($request->has('statement_date') && $request->get('statement_date') != "") {
                $statementDate = explode(" - ", $request->get('statement_date'));
                $mailToDate = $statementDate[0];
                $mailFromDate = $statementDate[1];
                $to = $statementDate[0];
                $from = $statementDate[1];
            }
            
//            echo '<pre>';print_r($statementDate);exit;
            $mailToDate = $to;
            $to = $to . ' 00:00:00';
            $is_currency_updated=0;
            $to_date=$to;
            if (isset($updated_currency_date) && $updated_currency_date != "") {
                if(strtotime($to) > strtotime($updated_currency_date))
                {
                $to=$to;   
                }
                else{
                $to = $updated_currency_date;
                }
                $is_currency_updated=1;
            }

            $mailFromDate = $from;
            $from = $from . ' 23:59:59';

            //$transPDF = Transaction::where('user_id',Session::get('user_id'))->orWhere('receiver_id',Session::get('user_id'))->whereBetween('created_at', array($to, $from))->get();

            $query2 = new Transaction();
            $query2 = $query2->where(function ($q) use ($to, $from) {
                $q->where('created_at', '>=', $to)->where('created_at', '<=', $from);
                $q->where('status', 1);
            });

            $query2 = $query2->where(function ($query2) {
                $query2->where('user_id', Session::get('user_id'))->orWhere('receiver_id', Session::get('user_id'));
            });

            $query2 = $query2->orWhere(function ($query2)use ($to, $from) {
                $query2->where([['trans_for', 'CryptoWithdraw'], ['user_id', Session::get('user_id')], ['created_at', '>=', $to], ['created_at', '<=', $from]]);
                $query2->orWhere([['trans_for', 'Withdraw##Invite_New_User'], ['user_id', Session::get('user_id')], ['created_at', '>=', $to], ['created_at', '<=', $from]]);
                $query2->orWhere([['trans_for', 'CryptoWithdraw(Refund)'], ['user_id', Session::get('user_id')], ['created_at', '>=', $to], ['created_at', '<=', $from]]);
                $query2->orWhere([['trans_for', 'Manual Withdraw'], ['user_id', Session::get('user_id')], ['created_at', '>=', $to], ['created_at', '<=', $from]]);
                $query2->orWhere([['trans_for', 'Global Pay'], ['user_id', Session::get('user_id')], ['created_at', '>=', $to], ['created_at', '<=', $from]]);
                $query2->orWhere([['trans_for', '3rd Party Pay'], ['user_id', Session::get('user_id')], ['created_at', '>=', $to], ['created_at', '<=', $from]]);
                $query2->orWhere([['trans_for', 'Withdraw##Agent'], ['user_id', Session::get('user_id')], ['created_at', '>=', $to], ['created_at', '<=', $from]]);
            });
            //   DB::connection()->enableQueryLog();
            $transPDF = $query2->orderBy("updated_at", "ASC")->get();
            //  print_r($transPDF); die;
            //     $queries = DB::getQueryLog();
            //  echo '<pre>';print_r($queries);exit;
            //10-May-2021 Start
            if ($recordInfo->user_type == 'Personal') {
                $detl["name"] = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                $detl["acc_type"] = "Personal";
            } else if ($recordInfo->user_type == 'Business') {
                $detl["name"] = strtoupper($recordInfo->business_name);
                $detl["acc_type"] = "Business";
            } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name == "") {
                $detl["name"] = strtoupper($recordInfo->business_name);
                $detl["acc_type"] = "Business";
            } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
                $detl["name"] = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                $detl["acc_type"] = "Personal";
            }
            $detl["email"] = $recordInfo->email;
            $detl["acc_number"] = $recordInfo->account_number;
            $detl["acc_currency"] = $recordInfo->currency;
            $detl["acc_type"] = $recordInfo->account_category;
            $toDate = date_create($mailToDate);
            $mlToDate = date_format($toDate, 'm/d/Y');

            $frDate = date_create($mailFromDate);
            $mlFrDate = date_format($frDate, 'm/d/Y');

            $detl["statement_period"] = $mlToDate . " to " . $mlFrDate;
            $detl["addrs_line1"] = $recordInfo->addrs_line1;
            $detl["addrs_line2"] = $recordInfo->addrs_line2;
            //DB::enableQueryLog();
//                $ttlCrdtAmount_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 1)->whereBetween('created_at', array($to, $from))->sum('transactions.amount');
//                $ttlCrdtAmount_2 = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->whereBetween('created_at', array($to, $from))->sum('transactions.amount');

            $ttlCrdtAmount_1 = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $ttlCrdtAmount_2 = Transaction::where('receiver_id', Session::get('user_id'))->where('status', 1)->where('trans_for','!=', 'SWAP')->where('trans_type', 2)->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');
           // echo $ttlCrdtAmount_2; die;

            $ttlCrdtCount_1 = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->whereBetween('created_at', array($to, $from))->count();

            $ttlCrdtCount_2 = Transaction::where('receiver_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 2)->whereBetween('created_at', array($to, $from))->count();

            $ttlCrdtAmount = $ttlCrdtAmount_1 + $ttlCrdtAmount_2;
            $ttlCrdtCount = $ttlCrdtCount_1 + $ttlCrdtCount_2;

            $ttlCrdtBank_1 = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->where('trans_for', 'ManualDeposit')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $ttlCrdtBankCnt_1 = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->where('trans_for', 'ManualDeposit')->whereBetween('created_at', array($to, $from))->count();

            $Manual_deposit_fee = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->where('trans_for', 'ManualDeposit')->whereBetween('created_at', array($to, $from))->sum('transactions.receiver_fees');

            $Manual_deposit_fee_count = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->where('trans_for', 'ManualDeposit')->whereBetween('created_at', array($to, $from))->count();

            $ttlCrdtBank = $ttlCrdtBank_1;
            $ttlCrdtBankCnt = $ttlCrdtBankCnt_1;

            //for crypto deposit
            $ttlCrdtCpt_1 = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->where('trans_for', 'CryptoDeposit')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $ttlCrdtCptCnt_1 = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->where('trans_for', 'CryptoDeposit')->whereBetween('created_at', array($to, $from))->count();

            $crypto_deposit_fee = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->where('trans_for', 'CryptoDeposit')->whereBetween('created_at', array($to, $from))->sum('transactions.receiver_fees');

            $crypto_deposit_fee_count = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->where('trans_for', 'CryptoDeposit')->whereBetween('created_at', array($to, $from))->count();


            //for merchant widraw
            $merchant_widraw_total = Transaction::where('receiver_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 2)->where('trans_for', 'Merchant_Withdraw')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $merchant_widraw_total_count = Transaction::where('receiver_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 2)->where('trans_for', 'Merchant_Withdraw')->whereBetween('created_at', array($to, $from))->count();

            $merchant_widraw_total_fees = Transaction::where('receiver_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 2)->where('trans_for', 'Merchant_Withdraw')->whereBetween('created_at', array($to, $from))->sum('transactions.receiver_fees');

            //merchant widraw api sender side
            $merchant_widraw_api_total_sender = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 2)->where('trans_for', 'Merchant_Withdraw')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_real_value');

            $merchant_widraw_api_total_sender_count = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 2)->where('trans_for', 'Merchant_Withdraw')->whereBetween('created_at', array($to, $from))->count();

            $merchant_widraw_api_total_sender_fees = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 2)->where('trans_for', 'Merchant_Withdraw')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');


            $ttlCrdtCpt = $ttlCrdtCpt_1;
            $ttlCrdtCptCnt = $ttlCrdtCptCnt_1;

            //for ozow eft
            $Ozow_fees = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 1)->where('trans_for', 'OZOW_EFT')->whereBetween('created_at', array($to, $from))->sum('transactions.receiver_fees');

            $Ozow_fees_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 1)->where('trans_for', 'OZOW_EFT')->whereBetween('created_at', array($to, $from))->count();
            
            $ttlCrdtOzow = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->where('trans_for', 'OZOW_EFT')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $ttlCrdtOzowCnt = Transaction::where('user_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 1)->where('trans_for', 'OZOW_EFT')->whereBetween('created_at', array($to, $from))->count();

            //for agent withdraw
            $ttlAgentCrt_1 = Transaction::where('receiver_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 2)->where('trans_for', 'Withdraw##Agent')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_real_value');   
            
            $ttlAgentCrtCount_1 = Transaction::where('receiver_id', Session::get('user_id'))->where('status', 1)->where('trans_type', 2)->where('trans_for', 'Withdraw##Agent')->whereBetween('created_at', array($to, $from))->count();

            $ttlOtherDeposit_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 1)->where('trans_for', '!=', 'W2W')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $ttlOtherDepositCount_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 1)->where('trans_for', '!=', 'W2W')->whereBetween('created_at', array($to, $from))->count();


            //for fund transfer and credit from admin side
            $ttlCashDeposit_1 = Transaction::where('receiver_id', Session::get('user_id'))->where('user_id',1)->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'not like', '%##Wallet2Wallet%')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $ttlCashDepositCount_1 = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('user_id',1)->where('billing_description', 'not like', '%##Wallet2Wallet%')->whereBetween('created_at', array($to, $from))->count();

            $W2W_admin_credit_fees = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('user_id',1)->where('billing_description', 'not like', '%##Wallet2Wallet%')->whereBetween('created_at', array($to, $from))->sum('transactions.receiver_fees');
     

            //for fund transfer to normal user when user is receiver
            $ttlCashDeposit_1_fund_receiver = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'like', '%Wallet2Wallet Transfer%')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $ttlCashDeposit_1_fund_receiver_count = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'like', '%Wallet2Wallet Transfer%')->whereBetween('created_at', array($to, $from))->count();

            $ttlCashDeposit_1_fund_receiver_fees = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'like', '%Wallet2Wallet Transfer%')->whereBetween('created_at', array($to, $from))->count();

            //for debit 

            $W2W_admin_debit_amount = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'like', '%<br>Debited By Admin%')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $W2W_admin_debit_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'like', '%<br>Debited By Admin%')->whereBetween('created_at', array($to, $from))->count();

            $W2W_admin_debit_fees = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'like', '%<br>Debited By Admin%')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');

            $W2W_admin_debit_fees_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('fees','!=', '0.0000000000')->where('billing_description', 'like', '%<br>Debited By Admin%')->whereBetween('created_at', array($to, $from))->count();

            $W2W_admin_credit_fees_count = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('fees','!=', '0.0000000000')->where('billing_description', 'not like', '%##Wallet2Wallet%')->whereBetween('created_at', array($to, $from))->count();

            $ttlCashDeposit_1_fund_transfer = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'like', '%##Wallet2Wallet%')->where('pay_by_agent', '0')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');
          //  print_r($ttlCashDeposit_1_fund_transfer); die;

            $ttlCashDepositCount_1_fund_transfer_count = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'like', '%##Wallet2Wallet%')->where('pay_by_agent', '0')->whereBetween('created_at', array($to, $from))->count();

            $W2W_admin_credit_fees_fund_transfer = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'like', '%##Wallet2Wallet%')->where('pay_by_agent', '0')->whereBetween('created_at', array($to, $from))->sum('transactions.receiver_fees');

            $W2W_admin_credit_fees_count_fund_transfer = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'like', '%##Wallet2Wallet%')->where('pay_by_agent', '0')->whereBetween('created_at', array($to, $from))->count();

            //if fund transfer by agent
            $ttlCashDeposit_1_fund_transfer_agent = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('pay_by_agent', '1')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');
            // print_r($ttlCashDeposit_1_fund_transfer); die;

            $ttlCashDepositCount_1_fund_transfer_count_agent = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('pay_by_agent', '1')->whereBetween('created_at', array($to, $from))->count(); 

            $W2W_admin_credit_fees_fund_transfer_agent = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('pay_by_agent', '1')->whereBetween('created_at', array($to, $from))->sum('transactions.receiver_fees');

            $W2W_admin_credit_fees_count_fund_transfer_agent = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('pay_by_agent', '1')->whereBetween('created_at', array($to, $from))->count();


            //to find out fund transfer to new user

            $fund_transfer_to_new_user = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Withdraw##Invite_New_User')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $fund_transfer_to_new_user_fees = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Withdraw##Invite_New_User')->whereBetween('created_at', array($to, $from))->sum('transactions.receiver_fees');

            $fund_transfer_to_new_user_count = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Withdraw##Invite_New_User')->whereBetween('created_at', array($to, $from))->count();

            //fees for sender side to fund transfer to new user
            $sender_fund_transfer_to_new_user = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Withdraw##Invite_New_User')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_real_value');

            $sender_fund_transfer_to_new_user_fees = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Withdraw##Invite_New_User')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');

            $sender_fund_transfer_to_new_user_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Withdraw##Invite_New_User')->whereBetween('created_at', array($to, $from))->count();


            //for fund transfer from one user to another when receiver is not admin
            $fund_transfer_debit = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('receiver_id', '!=', 1)->where('trans_for', '=', 'W2W')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_real_value');

            $fund_transfer_debit_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('receiver_id', '!=', 1)->where('trans_for', '=', 'W2W')->whereBetween('created_at', array($to, $from))->count();

            $fund_transfer_debit_fees = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('receiver_id', '!=', 1)->where('trans_for', '=', 'W2W')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');

            $ttlAccountDeposit_1 = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'not like', '%##Wallet2Wallet%')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $ttlAccountDepositCount_1 = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->where('billing_description', 'not like', '%##Wallet2Wallet%')->whereBetween('created_at', array($to, $from))->count();

            $ttlAccountDebit_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $ttlAccountDebitCount_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'W2W')->whereBetween('created_at', array($to, $from))->count();

            $ttlCashDebit_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Withdraw##Agent')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $Bank_Agent_dr_fees = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Withdraw##Agent')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');

            $ttlCashDebitCount_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Withdraw##Agent')->whereBetween('created_at', array($to, $from))->count();

            $ttlAccDebit_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_for', 'Manual Withdraw')->orWhere(function ($query2)use ($to, $from) { 
            $query2->where('user_id', Session::get('user_id'))->where('trans_for', 'Global Pay')->whereBetween('created_at', array($to, $from));
            })->orWhere(function ($query2)use ($to, $from) { 
            $query2->where('user_id', Session::get('user_id'))->where('trans_for', '3rd Party Pay')->whereBetween('created_at', array($to, $from));
            })->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');
            //for online payment
            $ttlAccDebit_Online_payment = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'ONLINE_PAYMENT')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_real_value');
            // print_r($ttlAccDebit_Online_payment); die;

            $ttlAccDebit_Online_payment_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'ONLINE_PAYMENT')->whereBetween('created_at', array($to, $from))->count();

            $ttlAccDebit_Online_payment_fees = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'ONLINE_PAYMENT')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');


            //online payment for receiver side
            $ttlAccCredit_Online_payment = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'ONLINE_PAYMENT')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');
            // print_r($ttlAccDebit_Online_payment); die;

            $ttlAccCredit_Online_payment_count = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'ONLINE_PAYMENT')->whereBetween('created_at', array($to, $from))->count();

            $ttlAccCredit_Online_payment_fees = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'ONLINE_PAYMENT')->whereBetween('created_at', array($to, $from))->sum('transactions.receiver_fees');


            $ttlAccDebitCount_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_for', 'Manual Withdraw')->orWhere(function ($query2)use ($to, $from) { 
            $query2->where('user_id', Session::get('user_id'))->where('trans_for', 'Global Pay')->whereBetween('created_at', array($to, $from));
            })->orWhere(function ($query2)use ($to, $from) { 
            $query2->where('user_id', Session::get('user_id'))->where('trans_for', '3rd Party Pay')->whereBetween('created_at', array($to, $from));
            })->whereBetween('created_at', array($to, $from))->count();

            $manual_withdraw_fees = Transaction::where('user_id', Session::get('user_id'))->where('trans_for', 'Manual Withdraw')->orWhere(function ($query2)use ($to, $from) { 
            $query2->where('user_id', Session::get('user_id'))->where('trans_for', 'Global Pay')->whereBetween('created_at', array($to, $from));
            })->orWhere(function ($query2)use ($to, $from) { 
            $query2->where('user_id', Session::get('user_id'))->where('trans_for', '3rd Party Pay')->whereBetween('created_at', array($to, $from));
            })->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');


            $ttlOtherDebit_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
                        $query->where('trans_for', '=', 'Withdraw##Paypal')
                                ->orWhere('trans_for', '=', 'CryptoWithdraw');
                    })->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

            $ttlOtherDebit_1_fees = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
                        $query->where('trans_for', '=', 'Withdraw##Paypal')
                                ->orWhere('trans_for', '=', 'CryptoWithdraw');
                    })->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');

            $crypto_withdraw_fee_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
                        $query->where('trans_for', '=', 'Withdraw##Paypal')
                                ->orWhere('trans_for', '=', 'CryptoWithdraw');
                    })->whereBetween('created_at', array($to, $from))->count();


            $ttlOtherDebitCount_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
                        $query->where('trans_for', '=', 'Withdraw##Paypal')
                                ->orWhere('trans_for', '=', 'CryptoWithdraw');
                    })->whereBetween('created_at', array($to, $from))->count();


            //to find out total amount of refund
            $total_refund_credit = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 1)->where('trans_for', 'like', '%(Refund)%')->whereBetween('created_at', array($to, $from))->sum('transactions.amount');

            $total_refund_credit_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 1)->where('trans_for', 'like', '%(Refund)%')->whereBetween('created_at', array($to, $from))->count();


            $ttlDbtAmount = $ttlCashDebit_1 + $ttlOtherDebit_1 + $ttlAccDebit_1 + $ttlAccountDebit_1 + $ttlAccDebit_Online_payment;
            $ttlDbtCount = $ttlCashDebitCount_1 + $ttlOtherDebitCount_1 + $ttlAccDebitCount_1 + $ttlAccountDebitCount_1;

            $ttlFee_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');
            $ttlFee_2 = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->whereBetween('created_at', array($to, $from))->sum('transactions.receiver_fees');
            $ttlFeeCount_1 = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->whereBetween('created_at', array($to, $from))->count();
            $ttlFeeCount_2 = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->whereBetween('created_at', array($to, $from))->count();
            $ttlFee = $ttlFee_1 + $ttlFee_2;
            $ttlFeeCount = $ttlFeeCount_1 + $ttlFeeCount_2;

            //to calculate the converted amount count and fees
            $currency_conversion_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 1)->where('trans_for', 'Converted Amount')->whereBetween('created_at', array($to, $from))->count();

            $currency_conversion_amount = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 1)->where('trans_for', 'Converted Amount')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

        //to calculate the exchange charge and count
        $exchange_charge = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Exchange Charge')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

        $exchange_charge_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Exchange Charge')->whereBetween('created_at', array($to, $from))->count();

        //to calculate the mobile top up transactions
        $mobile_topup_total = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Mobile Top-up')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

        $mobile_topup_total_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Mobile Top-up')->whereBetween('created_at', array($to, $from))->count();

        $mobile_topup_total_fees = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'Mobile Top-up')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');

        //to calculate the dba cash 
        $total_dba_cash_received = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 1)->where('trans_for', 'DBA eCash')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

        $total_dba_cash_received_fees = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 1)->where('trans_for', 'DBA eCash')->whereBetween('created_at', array($to, $from))->sum('transactions.receiver_fees');

        $total_dba_cash_received_count = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 1)->where('trans_for', 'DBA eCash')->whereBetween('created_at', array($to, $from))->count();

         //to calculate the swap
         $total_dba_swap = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'SWAP')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

         $total_dba_swap_fees = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'SWAP')->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');
 
         $total_dba_swap_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'SWAP')->whereBetween('created_at', array($to, $from))->count();

         //for epay me as a receiver
         $total_epay_me_received = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where('trans_for', 'EPAY ME')->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

         $total_epay_me_received=Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
            $query->where('trans_for', '=', 'EPAY ME')
                    ->orWhere('trans_for', '=', 'EPAY MERCHANT');
        })->whereBetween('created_at', array($to, $from))->sum('transactions.real_value');

         $total_epay_me_received_count = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
            $query->where('trans_for', 'EPAY ME') 
                  ->orWhere('trans_for', '=', 'EPAY MERCHANT');
            })->whereBetween('created_at', array($to, $from))->count();

         $total_epay_me_received_fees = Transaction::where('receiver_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
         $query->where('trans_for', 'EPAY ME') 
               ->orWhere('trans_for', '=', 'EPAY MERCHANT');
         })->whereBetween('created_at', array($to, $from))->sum('transactions.receiver_fees');

         //for epay me as a sender
         $total_epay_me_sender = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
            $query->where('trans_for', 'EPAY ME') 
                  ->orWhere('trans_for', '=', 'EPAY MERCHANT');
            })->whereBetween('created_at', array($to, $from))->sum('transactions.sender_real_value');

         $total_epay_me_sender_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
            $query->where('trans_for', 'EPAY ME') 
                  ->orWhere('trans_for', '=', 'EPAY MERCHANT');
            })->whereBetween('created_at', array($to, $from))->count();

         $total_epay_me_sender_fees = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
            $query->where('trans_for', 'EPAY ME') 
                  ->orWhere('trans_for', '=', 'EPAY MERCHANT');
            })->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');;

            //for gift card
            $total_gift_card_sender = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
                $query->where('trans_for', 'GIFT CARD'); 
                })->whereBetween('created_at', array($to, $from))->sum('transactions.sender_real_value');

           $total_gift_card_sender_count = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
            $query->where('trans_for', 'GIFT CARD'); 
            })->whereBetween('created_at', array($to, $from))->count();

            $total_gift_card_sender_fees = Transaction::where('user_id', Session::get('user_id'))->where('trans_type', 2)->where(function ($query) {
                $query->where('trans_for', 'GIFT CARD'); 
                })->whereBetween('created_at', array($to, $from))->sum('transactions.sender_fees');
                
 
      

            $detl["user_type"] = $recordInfo->user_type;
//                echo $ttlDbtAmount;exit;
            $detl["ttlCrdtAmount"] = $ttlCrdtAmount;
            $detl["ttlDbtAmount"] = $ttlDbtAmount;
            $detl["ttlDbtCount"] = $ttlDbtCount;
            $detl["ttlCrdtCount"] = $ttlCrdtCount;
            $detl["currency_conversion_count"] = $currency_conversion_count;
            $detl["currency_conversion_amount"] = $currency_conversion_amount;

            //for gift card 
            $detl["total_gift_card_sender"] = $total_gift_card_sender;
            $detl["total_gift_card_sender_count"] = $total_gift_card_sender_count;
            $detl["total_gift_card_sender_fees"] = $total_gift_card_sender_fees;

            //for epay me received
            $detl["total_epay_me_received"] = $total_epay_me_received;
            $detl["total_epay_me_received_count"] = $total_epay_me_received_count;
            $detl["total_epay_me_received_fees"] = $total_epay_me_received_fees;

            //for epay me as a sender
            $detl["total_epay_me_sender"] = $total_epay_me_sender;
            $detl["total_epay_me_sender_count"] = $total_epay_me_sender_count;    
            $detl["total_epay_me_sender_fees"] = $total_epay_me_sender_fees;    

            //for the dba cash 
            $detl["total_dba_cash_received"] = $total_dba_cash_received;
            $detl["total_dba_cash_received_fees"] = $total_dba_cash_received_fees;
            $detl["total_dba_cash_received_count"] = $total_dba_cash_received_count;

            //for the dba swap 
            $detl["total_dba_swap"] = $total_dba_swap;
            $detl["total_dba_swap_fees"] = $total_dba_swap_fees;
            $detl["total_dba_swap_count"] = $total_dba_swap_count;


            //for fund transfer when receiver is normal user
            $detl["ttlCashDeposit_1_fund_receiver"] = $ttlCashDeposit_1_fund_receiver;
            $detl["ttlCashDeposit_1_fund_receiver_count"] = $ttlCashDeposit_1_fund_receiver_count;
            $detl["ttlCashDeposit_1_fund_receiver_fees"] = $ttlCashDeposit_1_fund_receiver_fees;


            //for exchange charge
            $detl["exchange_charge"] = $exchange_charge;
            $detl["exchange_charge_count"] = $exchange_charge_count;

            //for moble topup
            $detl["mobile_topup_total"] = $mobile_topup_total;
            $detl["mobile_topup_total_count"] = $mobile_topup_total_count;
            $detl["mobile_topup_total_fees"] = $mobile_topup_total_fees;

            //fund transfer to new user
            $detl["fund_transfer_to_new_user"] = $fund_transfer_to_new_user;
            $detl["fund_transfer_to_new_user_fees"] = $fund_transfer_to_new_user_fees;
            $detl["fund_transfer_to_new_user_count"] = $fund_transfer_to_new_user_count;

            //fees for fund transfer to new user for sender side
            $detl["sender_fund_transfer_to_new_user"] = $sender_fund_transfer_to_new_user;
            $detl["sender_fund_transfer_to_new_user_fees"] = $sender_fund_transfer_to_new_user_fees;
            $detl["sender_fund_transfer_to_new_user_count"] = $sender_fund_transfer_to_new_user_count;

            //for fund transfer when receiver is not admin
            $detl["fund_transfer_debit"] = $fund_transfer_debit;
            $detl["fund_transfer_debit_count"] = $fund_transfer_debit_count;
            $detl["fund_transfer_debit_fees"] = $fund_transfer_debit_fees;

            //for online payment for sender side
            $detl["ttlAccDebit_Online_payment"] = $ttlAccDebit_Online_payment;
            $detl["ttlAccDebit_Online_payment_count"] = $ttlAccDebit_Online_payment_count;
            $detl["ttlAccDebit_Online_payment_fees"] = $ttlAccDebit_Online_payment_fees;

            //online payment for receiver side
            $detl["ttlAccCredit_Online_payment"] = $ttlAccCredit_Online_payment;
            $detl["ttlAccCredit_Online_payment_count"] = $ttlAccCredit_Online_payment_count;
            $detl["ttlAccCredit_Online_payment_fees"] = $ttlAccCredit_Online_payment_fees;

            //for refund
            $detl["total_refund_credit"] = $total_refund_credit;
            $detl["total_refund_credit_count"] = $total_refund_credit_count;

            //for merchant withdraw
            $detl["merchant_widraw_total"] = $merchant_widraw_total;
            $detl["merchant_widraw_total_count"] = $merchant_widraw_total_count;
            $detl["merchant_widraw_total_fees"] = $merchant_widraw_total_fees;

            //for merchant withdraw sender side fees
            $detl["merchant_widraw_api_total_sender"] = $merchant_widraw_api_total_sender;
            $detl["merchant_widraw_api_total_sender_count"] = $merchant_widraw_api_total_sender_count;
            $detl["merchant_widraw_api_total_sender_fees"] = $merchant_widraw_api_total_sender_fees;

            $detl["ttlCrdtBankCnt"] = $ttlCrdtBankCnt;
            $detl["ttlCrdtBank"] = $ttlCrdtBank;
            $detl["Manual_deposit_fee"] = $Manual_deposit_fee;
            $detl["Manual_deposit_fee_count"] = $Manual_deposit_fee_count;
            $detl["manual_withdraw_fees"] = $manual_withdraw_fees;
            $detl["ttlCrdtCptCnt"] = $ttlCrdtCptCnt;
            $detl["ttlCrdtCpt"] = $ttlCrdtCpt;
            $detl["crypto_deposit_fee"] = $crypto_deposit_fee + $ttlOtherDebit_1_fees;
            $detl["crypto_deposit_fee_count"] = $crypto_deposit_fee_count;
            $detl["crypto_withdraw_fee_count"] = $crypto_withdraw_fee_count;
            $detl["ttlCrdtOzowCnt"] = $ttlCrdtOzowCnt;
            $detl["ttlCrdtOzow"] = $ttlCrdtOzow;
            $detl["ttlAgentCrtCnt"] = $ttlAgentCrtCount_1;
            $detl["ttlAgentCrt"] = $ttlAgentCrt_1;
//                $detl["ttlDepositCrtCnt"] = $ttlDepositCrtCount_1;
//                $detl["ttlDepositCrt"] = number_format($ttlDepositCrt_1, 2, '.', ',');

            $detl["ttlTrans"] = Count($transPDF);

            $detl["ttlCashDeposit"] = $ttlCashDeposit_1;

            $detl["W2W_admin_debit_amount"] = $W2W_admin_debit_amount;
            $detl["W2W_admin_debit_count"] = $W2W_admin_debit_count;
            $detl["W2W_admin_debit_fees"] = $W2W_admin_debit_fees;
            $detl["W2W_admin_debit_fees_count"] = $W2W_admin_debit_fees_count;
            $detl["W2W_admin_credit_fees"] = $W2W_admin_credit_fees;
            $detl["W2W_admin_credit_fees_count"] = $W2W_admin_credit_fees_count;
            $detl["ttlCashDeposit_1_fund_transfer"] = $ttlCashDeposit_1_fund_transfer;
            $detl["ttlCashDepositCount_1_fund_transfer_count"] = $ttlCashDepositCount_1_fund_transfer_count;
            $detl["ttlCashDeposit_1_fund_transfer_agent"] = $ttlCashDeposit_1_fund_transfer_agent;
            $detl["ttlCashDepositCount_1_fund_transfer_count_agent"] = $ttlCashDepositCount_1_fund_transfer_count_agent;
            $detl["W2W_admin_credit_fees_fund_transfer"] = $W2W_admin_credit_fees_fund_transfer;
            $detl["W2W_admin_credit_fees_count_fund_transfer"] = $W2W_admin_credit_fees_count_fund_transfer;
            $detl["W2W_admin_credit_fees_fund_transfer_agent"] = $W2W_admin_credit_fees_fund_transfer_agent;
            $detl["W2W_admin_credit_fees_count_fund_transfer_agent"] = $W2W_admin_credit_fees_count_fund_transfer_agent;
            
            $detl["Ozow_fees_count"] = $Ozow_fees_count;
            $detl["Ozow_fees"] = $Ozow_fees;


            $detl["ttlOtherDeposit"] = $ttlOtherDeposit_1;
            $detl["ttlOtherDepositCount"] = $ttlOtherDepositCount_1;
            $detl["ttlCashDepositCount"] = $ttlCashDepositCount_1;
            $detl["ttlAccountDeposit"] = $ttlAccountDeposit_1;
            $detl["ttlAccountDepositCount"] = $ttlAccountDepositCount_1;
            $detl["ttlAccountDebit"] = $ttlAccountDebit_1;
            $detl["ttlAccountDebitCount"] = $ttlAccountDebitCount_1;
            $detl["ttlAccDebit"] = $ttlAccDebit_1;
            $detl["ttlAccDebitCount"] = $ttlAccDebitCount_1;
            $detl["ttlCashDebit"] = $ttlCashDebit_1;
            $detl["Bank_Agent_dr_fees"] = $Bank_Agent_dr_fees;
            $detl["ttlCashDebitCount"] = $ttlCashDebitCount_1;
            $detl["ttlOtherDebit"] = $ttlOtherDebit_1;
            $detl["ttlOtherDebitCount"] = $ttlOtherDebitCount_1;
            $detl["ttlFee"] = $ttlFee;
            $detl["ttlFeeCount"] = $ttlFeeCount;
            $detl["user_id"] = $recordInfo->id;
            //10-May-2021 End
            view()->share(['transPDF' => $transPDF, 'detl' => $detl]);
            if (Count($transPDF) > 0) {
                $customPaper = array(0, 0, 720, 1440);
                $pdf = PDF::loadView('transactionPdf')->setPaper($customPaper, 'portrait');
                $pdf->getDomPDF()->set_option("enable_php", true);
//                    $pdf = PDF::loadView('transactionPdf');
                $bodyEmail = 'As per your request, please check attached statement for period ' . $mailToDate . ' to ' . $mailFromDate . '.';
                $subjectEmail = 'e-Statement DafriBank - Digital Bank of Africa';

                $data["email"] = $recordInfo->email;
                $data["title"] = $subjectEmail;
                $data["body"] = $bodyEmail;
                $data["mailToDate"] = $mailFromDate;
                $data["mailFromDate"] = $mailToDate;
                $data["userName"] =$detl["name"];

                Mail::send('statementMail', $data, function ($message)use ($data, $pdf) {
                    $message->to($data["email"], $data["email"])
                            ->subject($data["title"])
                            ->attachData($pdf->output(), "statement.pdf");
                });
//                    Session::flash('success_message', "e-Statement successfully sent to your registered email.");
                Session::put('success_session_message', "e-Statement successfully sent to your registered email.");
//                    return Redirect::to('auth/transactions');
                //Mail::to($recordInfo->email)->send(new SendMailable($bodyEmail,$subjectEmail,Null));
//                    return $pdf->download('transactionPdf.pdf');
            } else {
//                    Session::flash('error_message', "Sorry no transaction found for given date range.");
                if($is_currency_updated==1 && $to_date <= $updated_currency_date)
                {
                Session::put('error_session_message', "You can not download statement as your currency was diffferent in the selected period.");
                }
                else{
                Session::put('error_session_message', "Sorry no transaction found for given date range.");
                }
                return Redirect::to('auth/transactions');
            }
        }

        if ($request->has('keyword') && $request->get('keyword')) {
            $keyword = $request->get('keyword');
            $query = $query->where(function ($q) use ($keyword) {
                $q->whereHas('User', function ($q) use ($keyword) {
                    $q = $q->where(DB::raw("CONCAT(`first_name`, ' ', `last_name`)"), 'LIKE', "%" . $keyword . "%")->orWhere('business_name', 'like', '%' . $keyword . '%');
                });
                $q->orWhereHas('Receiver', function ($q) use ($keyword) {
                    $q = $q->where(DB::raw("CONCAT(`first_name`, ' ', `last_name`)"), 'LIKE', "%" . $keyword . "%")->orWhere('business_name', 'like', '%' . $keyword . '%');
                });
            });         

            if ($recordInfo->user_type == "Agent") {
                $query = $query->where(function ($query) use ($agent) {
                    $query->where('user_id', Session::get('user_id'))->orWhere('receiver_id', Session::get('user_id'))->orWhere('receiver_id', $agent->id);
                });
            } else {
                $query = $query->where(function ($query) {
                    $query->where('user_id', Session::get('user_id'))->orWhere('receiver_id', Session::get('user_id'));
                });
            }
            $srchKeyword = true;
        } else {
            $keyword = '';
            $srchKeyword = false;
        }

        if ($request->has('srchDate') && $request->get('srchDate')) {
            $srchDate = explode(" - ", $request->get('srchDate'));
            $toDate = $srchDate[0];
            $fromDate = $srchDate[1];
            $to = $srchDate[0] . " 00:00:00";
            $from = $srchDate[1] . " 23:59:59";

            $query = $query->where(function ($q) use ($to, $from) {
                $q->orWhere('created_at', '>=', $to)->where('created_at', '<=', $from);
                //$q->whereBetween('created_at', array($to, $from));                
            });
            // if ($recordInfo->user_type == "Agent") {
            //     $query = $query->where(function ($query) use ($agent) {
            //         $query->where('user_id', Session::get('user_id'))->orWhere('receiver_id', Session::get('user_id'))->orWhere('receiver_id', $agent->id);
            //     });
            // } else {
            //     $query = $query->where(function ($query) {
            //         $query->where('user_id', Session::get('user_id'))->orWhere('receiver_id', Session::get('user_id'));
            //     });
            // }
            $srchDate = true;
        } else {
            $to = date('Y-m-d', strtotime(date('Y-m-d') . ' - 365 days'));
            $toDate = $to;
            $to = $to . ' 00:00:00';
            $from = date('Y-m-d');
            $fromDate = $from;
            $from = $from . ' 23:59:59';
            $srchDate = false;

            $query = $query->where(function ($q) use ($to, $from) {
                $q->orWhere('created_at', '>=', $to)->where('created_at', '<=', $from);
            });

            if ($recordInfo->user_type == "Agent") {
                $query = $query->where(function ($query) use ($agent) {
                    $query->where('user_id', Session::get('user_id'))->orWhere('receiver_id', Session::get('user_id'))->orWhere('receiver_id', $agent->id);
                });
            } else {
                $query = $query->where(function ($query) {
                    $query->where('user_id', Session::get('user_id'))->orWhere('receiver_id', Session::get('user_id'));
                });
            }
            $srchDate = true;
        }

        if ($request->has('radio') && $request->get('radio')) {
            $radio = $request->get('radio');

            if ($radio == "sent") {
                if ($recordInfo->user_type == "Agent") {
                    $query = $query->where(function ($query) use ($agent) {
                        //$query->where('user_id', '=', Session::get('user_id'))->orWhere('receiver_id', Session::get('user_id'))->orWhere('receiver_id', $agent->id)->where('trans_type', 2);
                        $query->where('user_id', '=', Session::get('user_id'))->where('trans_type', 2);
                    });
                } else {
                    $query = $query->where(function ($query) {
                        $query->where('user_id', '=', Session::get('user_id'))->where('receiver_id', '!=', Session::get('user_id'))->where('trans_type', 2);
                    });
                }
            } elseif ($radio == 'received') {
                if ($recordInfo->user_type == "Agent") {
                    $query = $query->where(function ($query) use ($agent) {
                        $query->where('user_id', '!=', Session::get('user_id'))->where('receiver_id', '=', Session::get('user_id'))->orWhere('receiver_id', '=', $agent->id)->where('trans_type', 2);
                        $query->orWhere('user_id', '=', Session::get('user_id'))->where('receiver_id', '=', 0)->where('trans_type', 1);
                    });
                } else {
                    $query = $query->where(function ($query) {
                        $query->where('user_id', '!=', Session::get('user_id'))->where('receiver_id', '=', Session::get('user_id'))->where('trans_type', 2);
                        $query->orWhere('user_id', '=', Session::get('user_id'))->where('receiver_id', '=', 0)->where('trans_type', 1);
                    });
                }
            } elseif ($radio == 'topup') {
                if ($recordInfo->user_type == "Agent") {
                    $query = $query->where(function ($query) use ($agent) {
                        //$query->where('user_id', '=', Session::get('user_id'))->where('receiver_id', '=', 0)->orWhere('receiver_id', '=', $agent->id)->where('trans_type', 1);
                        $query->where('user_id', '=', Session::get('user_id'))->where('receiver_id', '=', 0)->where('trans_type', 1);
                    });
                } else {
                    $query = $query->where(function ($query) {
                        $query->where('user_id', '=', Session::get('user_id'))->where('receiver_id', '=', 0)->where('trans_type', 1);
                    });
                }
            } elseif ($radio == 'all') {
                if ($recordInfo->user_type == "Agent") {
                    $query = $query->where(function ($query) use ($agent) {
                        $query->where('user_id', '=', Session::get('user_id'))->orWhere('receiver_id', '=', Session::get('user_id'))->orWhere('receiver_id', '=', $agent->id);
                    });
                } else {
                    $query = $query->where(function ($query) {
                        $query->where('user_id', '=', Session::get('user_id'))->orWhere('receiver_id', '=', Session::get('user_id'));
                    });
                }
            }
            $srchRadio = true;
        } else {
            $radio = 'all';
            $srchRadio = false;
        }

        if ($srchKeyword == false && $srchRadio == false && $srchDate == false) {
            if ($recordInfo->user_type == "Agent") {
                $trans = $query->where('user_id', Session::get('user_id'))->orWhere('receiver_id', Session::get('user_id'))->orWhere('receiver_id', $agent->id)->orderBy('id', 'DESC')->paginate(10);
            } else {
                $trans = $query->where('user_id', Session::get('user_id'))->orWhere('receiver_id', Session::get('user_id'))->orderBy('id', 'DESC')->paginate(10);
            }
        } else {
            // DB::connection()->enableQueryLog();
          //   echo "<pre>";
            $trans = $query->orderBy('id', 'DESC')->paginate(10);
           // print_r(DB::getQueryLog());
        }
//        dd(DB::getQueryLog());
        return view('users.transactions', ['title' => $pageTitle, $activetab => 1, 'recordInfo' => $recordInfo, 'trans' => $trans, 'radio' => $radio, 'toDate' => $toDate, 'fromDate' => $fromDate, 'keyword' => $keyword]);
    }

    public function addRecipient() {
        $pageTitle = 'Add Recipient';
        $activetab = 'actdashboard';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $input = Input::all();
        if (!empty($input)) {

            $rules = array(
                'recipName' => 'required',
                'recipEmail' => 'required|email',
                'recipAccntNum' => 'required|numeric',
                'conf_recipAccntNum' => 'required|same:recipAccntNum',
                'recipBank' => 'required',
                'recipMobile' => 'required|numeric'
            );

            $customMessages = [
                'conf_recipAccntNum.same' => 'The confirm account number must match..',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            //$validator = Validator::make($input, $rules);             
            if ($validator->fails()) {
                return Redirect::to('/auth/add-recipient')->withErrors($validator)->withInput();
            } else {
                $isExists = User::where("account_number", $input['recipAccntNum'])->where('email', $input['recipEmail'])->first();
                if (!empty($isExists)) {
                    $recip = new Recipient([
                        'user_id' => Session::get('user_id'),
                        'recipient_name' => $input['recipName'],
                        'recipient_email' => $input['recipEmail'],
                        'recipient_acc_num' => $input['recipAccntNum'],
                        'recipient_bank' => $input['recipBank'],
                        'recipient_mobile' => $input['recipMobile'],
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $recip->save();
                    Session::flash('success_message', "Recipient Added Successfully.");
                    return Redirect::to('auth/add-recipient');
                } else {
                    Session::flash('error_message', "Invalid recipient details. Please eneter correct information.");
                    return Redirect::to('auth/add-recipient');
                }
            }
        }


        return view('users.addRecipient', ['title' => $pageTitle, $activetab => 1, 'recordInfo' => $recordInfo]);
    }

    private function get_client_ip() {
        $ipaddress = '';
        if (getenv('HTTP_CLIENT_IP'))
            $ipaddress = getenv('HTTP_CLIENT_IP');
        else if (getenv('HTTP_X_FORWARDED_FOR'))
            $ipaddress = getenv('HTTP_X_FORWARDED_FOR');
        else if (getenv('HTTP_X_FORWARDED'))
            $ipaddress = getenv('HTTP_X_FORWARDED');
        else if (getenv('HTTP_FORWARDED_FOR'))
            $ipaddress = getenv('HTTP_FORWARDED_FOR');
        else if (getenv('HTTP_FORWARDED'))
            $ipaddress = getenv('HTTP_FORWARDED');
        else if (getenv('REMOTE_ADDR'))
            $ipaddress = getenv('REMOTE_ADDR');
        else
            $ipaddress = 'UNKNOWN';
        return $ipaddress;
    }

    private function fetchCurrencyRate($currency, $amount) {

        if ($currency != 'USD') {
            if ($currency == 'NGN') {
                $exchange = Ngnexchange::where('id', 1)->first();
                $to = strtolower('USD');
                $var = $to . '_value';

                $val = $exchange->$var;
                $total = $amount / $val;
                return $total;
            } else {
                $apikey = CURRENCY_CONVERT_API_KEY;

                if ($currency == 'EURO') {
                    $query = "EUR_USD";
                } else {
                    $query = $currency . "_USD";
                }
                $curr_req = "https://free.currconv.com/api/v7/convert?q=" . $query . "&compact=ultra&apiKey=" . $apikey;
                //"https://free.currconv.com/api/v7/convert?q=".$query."&compact=ultra&apiKey=".$apikey	
                $json = file_get_contents($curr_req);
                $obj = json_decode($json, true);
                //print_R($obj);
                $val = floatval($obj[$query]);
                $total = $val * $amount;
                return $total;
            }
        } else {
            return $amount;
        }
    }





   
    private function myCurrencyConversionRate($merchant_currency, $user_currency, $amount) {

        if ($user_currency == 'NGN') {
            $exchange = Ngnexchange::where('id', 1)->first();

            $to = strtolower($toCurrency);
            $var = $to . '_value';

            $val = $exchange->$var;
            $total = $val * $amount;
            return $val . "###" . $total;
        } else if ($merchant_currency == 'NGN') {
            
        } else {
            $apikey = CURRENCY_CONVERT_API_KEY;

            $query = $merchant_currency . '_' . $user_currency;

            $curr_req = "https://free.currconv.com/api/v7/convert?q=" . $query . "&compact=ultra&apiKey=" . $apikey;
            //https://free.currconv.com/api/v7/convert?q=USD_ZAR&compact=ultra&apiKey=5c638446397b3588a3c6
            $json = file_get_contents($curr_req);
            $obj = json_decode($json, true);
            //print_r($obj);
            $val = floatval($obj[$query]);
            $total = $val * $amount;
            return $val . "###" . $total;
        }
    }

    private function myCurrencyRate($currency, $amount) {

        if ($currency == 'NGN') {
            $exchange = Ngnexchange::where('id', 1)->first();

            $val = $exchange->usd_value;
            $total = $val * $amount;
            return $total;
        } else {
            $apikey = CURRENCY_CONVERT_API_KEY;
            if ($currency == 'EURO') {
                $query = "USD_EUR";
            } else {
                $query = "USD_" . $currency;
            }
            $curr_req = "https://free.currconv.com/api/v7/convert?q=" . $query . "&compact=ultra&apiKey=" . $apikey;

            $json = file_get_contents($curr_req);
            $obj = json_decode($json, true);
            $val = floatval($obj[$query]);
            $total = $val * $amount;
            // echo$total;die;
            return $total;
        }
    }




    public function templateTest() {
        $detl = array();
        $detl["userName"] = 'Madan';
        $detl["receiverName"] = 'Saini';

        view()->share(['detl' => $detl]);

        $customPaper = array(0, 0, 720, 1440);
        $pdf = PDF::loadView('transactionPdfTest')->setPaper($customPaper, 'portrait');
//        $pdf = PDF::loadView('fundtransferPdf');
//        $bodyEmail = 'As per your request, please check attached statement for period.';
//        $subjectEmail = 'e-Statement DafriBank - Digital Bank of Africa';
//
//        $data["email"] = $emailId;
//        $data["title"] = 'test';
//        $data["body"] = 'test';
//        $data["heading"] = 'Hey ' . $userName . ',';
//
//        Mail::send('statementMail', $data, function ($message)use ($data, $pdf) {
//            $message->to($data["email"], $data["email"])
//                    ->subject($data["title"])
//                    ->attachData($pdf->output(), "statement.pdf");
//        });
        return $pdf->download('transactionPdfTest.pdf');
    }

    public function fundTransferPhone($praram = false) {
        return Redirect::to('auth/fund-transfer')->with(['data' => $praram]);
    }

    public function fundTransfer($slug=null) {

        $user_data = '';
        if (Session::has('data')) {
            $user_data = Session::get('data');
        }
//        
        if($slug!="")
        {
         $slug=base64_decode($slug);   
        }
       
        $pageTitle = 'Fund Transfer';
        $activetab = 'actdashboard';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        if ($recordInfo->user_type == 'Personal') {
            $senderName = $recordInfo->first_name;
        } else if ($recordInfo->user_type == 'Business') {
            $senderName = $recordInfo->business_name;
        } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
            $senderName = $recordInfo->first_name;
        } else if ($recordInfo->user_type == 'Agent' && $recordInfo->business_name != "") {
            $senderName = $recordInfo->business_name;
        }

        $input = Input::all();
        if (!empty($input)) {
            $rules = array(    
                'trnsfrAmnt' => 'required|numeric|min:0.1',
                'recipient_email_accnum' => 'required',
                    //'recipient_email' => 'required|email:filter',
            );

            $customMessages = [
                'recipient_accntNumbr.required' => 'Account number field can\'t be left blank.',
                'trnsfrAmnt.min' => 'Transfer amount should be greater than 0.',
                'recipient_email_accnum.required' => 'Invalid Email/Account number field.',
                    //'recipient_email.required' => 'Account email field can\'t be left blank.',
                    //'recipient_email.email' => 'Invalid Account email!',
                    //'trnsfrAmnt.required' => 'Amount field can\'t be left blank.',
                    //'trnsfrAmnt.numeric' => 'Amount should be in number.',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('failed_session_message', $message);
                return Redirect::to('auth/fund-transfer');
                //                return Redirect::to('/auth/fund-transfer')->withErrors($validator)->withInput();
            } else {
                $amount = $input['trnsfrAmnt'];

                $email_accnum = $input['recipient_email_accnum'];
                if (!filter_var($email_accnum, FILTER_VALIDATE_EMAIL)) {
                    $accNumber = $email_accnum;
                    $accEmail = '';
                } else {
                    $accNumber = '';
                    $accEmail = $email_accnum;
                }

                $currency = $recordInfo->currency;
                if ($recordInfo->is_kyc_done != 1 or $recordInfo->is_verify != 1) {
                    $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
//                    echo "Chk Amount: ".$chkAmount; exit;
                    if ($chkAmount > TRANS_LIMIT_BEFORE_KYC && $recordInfo->currency != 'USD') {
                        $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, TRANS_LIMIT_BEFORE_KYC);

                        $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                        //                        Session::flash('error_message', "You can't transfer more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please update your KYC.");
                        Session::put('error_session_message', "You can't transfer more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please upload your KYC.");
                        return Redirect::to('auth/fund-transfer');
                    }

                    //                    $TotalWithdraw = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', 0)->where('trans_for', 'LIKE', 'Withdraw%')->whereIn('status', array(1, 2))->get();

                    $TotalWithdraw = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', 0)->where('trans_for', 'LIKE', 'Withdraw%')->whereIn('status', array(1, 2))->sum('amount');

                    $TotalDebitTrans = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', '!=', 0)->where('trans_type', 2)->where('status', 1)->sum('amount');
                    //                    $TotalDebitTrans = Transaction::where('user_id', 1)->get();
                    //check Inactive Amount (Agent Request and paypal Request) Calc Start
                    $TotalInactvAmnt = InactiveAmount::where('user_id', Session::get('user_id'))->sum('amount');
                    //check Inactive Amount (Agent Request and paypal Request) Calc End

                    $ttlWithdrawAmount = $TotalWithdraw + $TotalDebitTrans + $TotalInactvAmnt + $amount;
                    $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $ttlWithdrawAmount);

//                                        echo "Ttl Withdraw Amount: ".$ttlWithdrawAmount." :: USD: ".$chkAmount; exit;

                    if ($chkAmount >= TRANS_LIMIT_BEFORE_KYC) {
                        $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, TRANS_LIMIT_BEFORE_KYC);
                        $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                        //                        Session::flash('error_message', "You can't transfer more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please update your KYC.");
                        Session::put('error_session_message', "You can't transfer more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please upload your KYC.");
                        return Redirect::to('auth/fund-transfer');
                    }
                }

                $transLimitFlag = $this->checkUserTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $amount);

                $transLimitArr = explode("###", $transLimitFlag);
                //print_r($transLimitArr); exit;

                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                    //                    Session::flash('error_message', $transLimitArr[1]);
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('auth/fund-transfer');
                }

                $transLimitFlag = $this->checkAgentTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $amount);

                $transLimitArr = explode("###", $transLimitFlag);
                //print_r($transLimitArr); exit;

                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                    //                    Session::flash('error_message', $transLimitArr[1]);
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('auth/fund-transfer');
                }

                if ($accNumber != "" && $accEmail != "") {
                    $user = User::where('account_number', $accNumber)->where('email', $accEmail)->where('otp_verify', 1)->first();
                } else if ($accEmail != "" && $accNumber == "") {
                    $user = User::where('email', $accEmail)->where('otp_verify', 1)->first();
                } else if ($accEmail == "" && $accNumber != "") {
                    $user = User::where('account_number', $accNumber)->where('otp_verify', 1)->first();
                }

                if (!empty($user)) {
                    if ($user->id == Session::get('user_id')) {
                        //                        Session::flash('error_message', "Sender & Receiver Should not be same.");
                        Session::put('error_session_message', "Sender & Receiver Should not be same.");
                        return Redirect::to('auth/fund-transfer');
                    }

                    $userAmount = $amount;
                    $conversion_fee = 0;
                    $fees_deposite = 0;
                    $refId = 0;
                    $pay_by_agent=0; 
                    $admin_total_fees=0;
                    $conversion_amount = 0;
                    $convertedCurrArrAdmin_receiver=0;
                    $convertedCurrArrAdmin_sender=0;

                    if($recordInfo->currency==$user->currency)
                    {
                    $input['conversn_amount']= '-1';
                    }


                    if ($recordInfo->wallet_amount > $amount) {
                        if ($recordInfo->user_type == 'Personal') {
                            if ($recordInfo->account_category == "Silver") {
                                $fee_name = 'W2W_SENDER';
                            } else if ($recordInfo->account_category == "Gold") {
                                $fee_name = 'W2W_SENDER_GOLD';
                            } else if ($recordInfo->account_category == "Platinum") {
                                $fee_name = 'W2W_SENDER_PLATINUM';
                            } else if ($recordInfo->account_category == "Private Wealth") {
                                $fee_name = 'W2W_SENDER_PRIVATE_WEALTH';
                            } else {
                                $fee_name = 'W2W_SENDER';
                            }
                            $conversion_fee = 0;

                            if ($input['conversn_amount'] > 0) {

                                if ($recordInfo->user_type == 'Personal') {
                                    $convr_fee_name=$recordInfo->currency!="NGN" && $user->currency!="NGN" ? 'CONVERSION_FEE' : 'NGN_CONVERSION_FEE';
                               } elseif ($recordInfo->user_type == 'Business') {
                                  $convr_fee_name=$recordInfo->currency!="NGN" && $user->currency!="NGN" ? 'MERCHANT_CONVERSION_FEE' : 'NGN_MERCHANT_CONVERSION_FEE';
                               } elseif ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
                                    $convr_fee_name=$recordInfo->currency!="NGN" && $user->currency!="NGN" ? 'CONVERSION_FEE' : 'NGN_CONVERSION_FEE'; 
                               } elseif ($recordInfo->user_type == 'Agent' && $recordInfo->first_name == "") {
                                  $convr_fee_name=$recordInfo->currency!="NGN" && $user->currency!="NGN" ? 'MERCHANT_CONVERSION_FEE' : 'NGN_MERCHANT_CONVERSION_FEE';
                               }
                                $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                                $conversion_fee = $fees_convr->fee_value;
                                $userAmount = $input['conversn_amount'];
                                $conversion_amount = ($amount * $conversion_fee) / 100;
                                $convertedCurrArrAdmin_receiver = $this->convertCurrency($recordInfo->currency,'USD', $conversion_amount);
                                $convertedCurrArrAdmin_receiver = explode('##', $convertedCurrArrAdmin_receiver);
                                $convertedCurrArrAdmin_receiver = $convertedCurrArrAdmin_receiver[0];
                            }
                            $fees = Fee::where('fee_name', $fee_name)->first();
                            $fees_amount = ($amount * $fees->fee_value) / 100;
                            if ($recordInfo->wallet_amount < $amount+$fees_amount+$conversion_amount) {
//                            Session::put('error_session_message', "Insufficient Balance.");
                            Session::put('error_session_message', "The amount in your account can't cover " . $currency . ' ' . $fees_amount . " fee for this transaction. Please try again with different amount.");
                            return Redirect::to('auth/fund-transfer');
                            }
                            $ref_fees=0;
                            $ref_amt=0;
                            if ($recordInfo->referral != 'na') {
                                $referlCode = 'refid=' . $recordInfo->referral;
                                $referrer = Referalcode::where('referal_link', $referlCode)->first();
                                $refrlComm = ($fees_amount * 25) / 100;
                                if ($currency != $user->currency) {
                                    $amountt = $refrlComm;
                                    $referral_User=User::where('id',$referrer->user_id)->first();
                                    if ($referral_User->user_type == 'Personal') {
                                        $convr_fee_name_ref = 'CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Business') {
                                        $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                        $convr_fee_name_ref = 'CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                        $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                    }
                                    $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                                    $conversion_feet = $fees_convr->fee_value;
                                    $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;
                                    $ref_amt=$user_invited_amount1;
                                    $ref_fees= ($amountt * $conversion_feet) / 100;
                                    $host_currency = trim($currency);
                                    $user_currency = 'USD';
                                    $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                                    $convertedCurrArr = explode('##', $convertedCurrArr);
                                    $user_invited_amountt = $convertedCurrArr[0];
                                } else {
                                    $host_currency = trim($currency);
                                    $user_currency = 'USD';
                                    $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $refrlComm);
                                    $convertedCurrArr = explode('##', $convertedCurrArr);
                                    $user_invited_amountt = $convertedCurrArr[0];
                                    $ref_amt=$refrlComm;
                                }

                                if (!empty($referrer)) {
                                    $refComm = new ReferralCommission([
                                        'user_id' => Session::get('user_id'),
                                        'referrer_id' => $referrer->user_id,
                                        'amount' => $user_invited_amountt,
                                        'action' => 'W2W_FUND_TRANSFER',
                                        'created_at' => date('Y-m-d H:i:s'),
                                        'updated_at' => date('Y-m-d H:i:s')
                                    ]);
                                    $refComm->save();
                                    $refId = $refComm->id;
                                }
                            }
                            $admin_fees_amount = $fees_amount-$ref_amt;
                            $convertedCurrArrAdmin_sender = $this->convertCurrency($currency,'USD', $admin_fees_amount);
                            $convertedCurrArrAdmin_sender = explode('##', $convertedCurrArrAdmin_sender);
                            $convertedCurrArrAdmin_sender = $convertedCurrArrAdmin_sender[0];
                            $admin_total_fees=$convertedCurrArrAdmin_sender+$convertedCurrArrAdmin_receiver;

                        } else if ($recordInfo->user_type == 'Business') {
                            if ($recordInfo->account_category == "Gold") {
                                $fee_name = 'MERCHANT_W2W_SENDER_GOLD';
                            } else if ($recordInfo->account_category == "Platinum") {
                                $fee_name = 'MERCHANT_W2W_SENDER_PLATINUM';
                            } else if ($recordInfo->account_category == "Enterprises") {
                                $fee_name = 'MERCHANT_W2W_SENDER_Enterprises';
                            } else {
                                $fee_name = 'MERCHANT_W2W_SENDER_GOLD';
                            }
                            $conversion_fee = 0;
                            if ($input['conversn_amount'] > 0) {
                                if ($recordInfo->user_type == 'Personal') {
                                    $convr_fee_name=$recordInfo->currency!="NGN" && $user->currency!="NGN" ? 'CONVERSION_FEE' : 'NGN_CONVERSION_FEE';
                               } elseif ($recordInfo->user_type == 'Business') {
                                  $convr_fee_name=$recordInfo->currency!="NGN" && $user->currency!="NGN" ? 'MERCHANT_CONVERSION_FEE' : 'NGN_MERCHANT_CONVERSION_FEE';
                               } elseif ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
                                    $convr_fee_name=$recordInfo->currency!="NGN" && $user->currency!="NGN" ? 'CONVERSION_FEE' : 'NGN_CONVERSION_FEE'; 
                               } elseif ($recordInfo->user_type == 'Agent' && $recordInfo->first_name == "") {
                                  $convr_fee_name=$recordInfo->currency!="NGN" && $user->currency!="NGN" ? 'MERCHANT_CONVERSION_FEE' : 'NGN_MERCHANT_CONVERSION_FEE';
                               }
                                $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                                $conversion_fee = $fees_convr->fee_value;
                                $userAmount = $input['conversn_amount'];
                                $conversion_amount = ($amount * $conversion_fee) / 100;
                                $convertedCurrArrAdmin_receiver = $this->convertCurrency($recordInfo->currency,'USD', $conversion_amount);
                                $convertedCurrArrAdmin_receiver = explode('##', $convertedCurrArrAdmin_receiver);
                                $convertedCurrArrAdmin_receiver = $convertedCurrArrAdmin_receiver[0];
                            }
 
                            $fees = Fee::where('fee_name', $fee_name)->first();
                            $fees_amount = ($amount * $fees->fee_value) / 100;

                            if ($recordInfo->wallet_amount < $amount+$fees_amount + $conversion_amount) {
                            Session::put('error_session_message', "The amount in your account can't cover " . $currency . ' ' . $fees_amount . " fee for this transaction. Please try again with different amount.");
                            return Redirect::to('auth/fund-transfer');
                            }

                            $ref_fees=0;
                            $ref_amt=0;
                            if ($recordInfo->referral != 'na') {
                                $referlCode = 'refid=' . $recordInfo->referral;
                                $referrer = Referalcode::where('referal_link', $referlCode)->first();
                                $refrlComm = ($fees_amount * 25) / 100;
                                $refrlComm = $refrlComm;
                                if ($currency != $user->currency) {
                                    $amountt = $refrlComm;
                                    $referral_User=User::where('id',$referrer->user_id)->first();
                                    if ($referral_User->user_type == 'Personal') {
                                        $convr_fee_name_ref = 'CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Business') {
                                        $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                        $convr_fee_name_ref = 'CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                        $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                    }
                                    $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                                    $conversion_feet = $fees_convr->fee_value;
                                    $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;
                                    $ref_amt=$user_invited_amount1;
                                    $ref_fees=($amountt * $conversion_feet) / 100;
                                    $host_currency = trim($currency);
                                    $user_currency = 'USD';
                                    $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                                    $convertedCurrArr = explode('##', $convertedCurrArr);
                                    $user_invited_amountt = $convertedCurrArr[0];
                                } else {
                                    $host_currency = trim($currency);
                                    $user_currency = 'USD';
                                    $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $refrlComm);
                                    $convertedCurrArr = explode('##', $convertedCurrArr);
                                    $user_invited_amountt = $convertedCurrArr[0];
                                    $ref_amt=$refrlComm;
                                }

                                if (!empty($referrer)) {
                                    $refComm = new ReferralCommission([
                                        'user_id' => Session::get('user_id'),
                                        'referrer_id' => $referrer->user_id,
                                        'amount' => $user_invited_amountt,
                                        'action' => 'W2W_FUND_TRANSFER',
                                        'created_at' => date('Y-m-d H:i:s'),
                                        'updated_at' => date('Y-m-d H:i:s')
                                    ]);
                                    $refComm->save();
                                    $refId = $refComm->id;
                                }
                            }
                            $admin_fees_amount = $fees_amount-$ref_amt;  
                            $convertedCurrArrAdmin_sender = $this->convertCurrency($currency,'USD', $admin_fees_amount);
                            $convertedCurrArrAdmin_sender = explode('##', $convertedCurrArrAdmin_sender);
                            $convertedCurrArrAdmin_sender = $convertedCurrArrAdmin_sender[0];
                            $admin_total_fees=$convertedCurrArrAdmin_sender+$convertedCurrArrAdmin_receiver;

                        } else {
                            $pay_by_agent=1;
                            if ($input['conversn_amount'] > 0) {
                                if ($recordInfo->user_type == 'Personal' && ($recordInfo->currency=='NGN' || $user->currency=='NGN')) {
                                    $convr_fee_name = 'NGN_CONVERSION_FEE';
                                } elseif ($recordInfo->user_type == 'Business' && ($recordInfo->currency=='NGN' || $user->currency=='NGN')) {
                                    $convr_fee_name = 'NGN_MERCHANT_CONVERSION_FEE';
                                } elseif ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != ""  && ($recordInfo->currency=='NGN' || $user->currency=='NGN')) {
                                    $convr_fee_name = 'NGN_CONVERSION_FEE';
                                } elseif ($recordInfo->user_type == 'Agent' && $recordInfo->first_name == ""  && ($recordInfo->currency=='NGN' || $user->currency=='NGN')) {
                                    $convr_fee_name = 'NGN_MERCHANT_CONVERSION_FEE';
                                }
                                if($convr_fee_name!="")
                                {
                                $userAmount = $input['conversn_amount'];
                                $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                                $conversion_fee = $fees_convr->fee_value;
                                $conversion_amount = ($amount * $conversion_fee) / 100;
                                }
                                else{
                                $conversion_amount =0;    
                                }
                            } else {
                                $userAmount = $amount;
                                $conversion_amount = 0;
                            }

                            if ($recordInfo->wallet_amount < $amount + $conversion_amount) {
                            Session::put('error_session_message', "The amount in your account can't cover " . $currency . ' ' . $conversion_amount . " fee for this transaction. Please try again with different amount.");
                            return Redirect::to('auth/fund-transfer');
                            }

                            $fees_amount = 0;
                            if ($user->user_type == 'Personal') {
                                if ($user->account_category == "Silver") {
                                    $fee_name = 'AGENT_DEPOSITE_REQUEST_SILVER';
                                } else if ($user->account_category == "Gold") {
                                    $fee_name = 'AGENT_DEPOSITE_REQUEST_GOLD';
                                } else if ($user->account_category == "Platinum") {
                                    $fee_name = 'AGENT_DEPOSITE_REQUEST_PLATINUM';
                                } else if ($user->account_category == "Private Wealth") {
                                    $fee_name = 'AGENT_DEPOSITE_REQUEST_PRIVATE_WEALTH';
                                } else {
                                    $fee_name = 'AGENT_DEPOSITE_REQUEST_SILVER';
                                }
                                $fees_convr = Fee::where('fee_name', $fee_name)->first();
                                $fee_value = $fees_convr->fee_value;
                                $fees_deposite = ($userAmount * $fee_value) / 100;
                            } else if ($user->user_type == 'Business') {
                                if ($user->account_category == "Gold") {
                                    $fee_name = 'MERCHANT_AGENT_DEPOSITE_REQUEST_GOLD';
                                } else if ($user->account_category == "Platinum") {
                                    $fee_name = 'MERCHANT_AGENT_DEPOSITE_REQUEST_PLATINUM';
                                } else if ($user->account_category == "Enterprises") {
                                    $fee_name = 'MERCHANT_AGENT_DEPOSITE_REQUEST_ENTERPRI';
                                } else {
                                    $fee_name = 'MERCHANT_AGENT_DEPOSITE_REQUEST_GOLD';
                                }
                                $fees_convr = Fee::where('fee_name', $fee_name)->first();
                                $fee_value = $fees_convr->fee_value;
                                $fees_deposite = ($userAmount * $fee_value) / 100;
                            }

                            $ref_fees=0;
                            $ref_amt=0;
                            if ($user->referral != 'na' && $user->user_type!="Agent") {
                                $referlCode = 'refid=' . $user->referral;
                                $referrer = Referalcode::where('referal_link', $referlCode)->first();
                                $refrlComm = ($fees_deposite * 25) / 100;
                                $refrlComm = $refrlComm;
                                if ($currency != $user->currency) {
                                    $amountt = $refrlComm;
                                    $referral_User=User::where('id',$referrer->user_id)->first();
                                    if ($referral_User->user_type == 'Personal') {
                                        $convr_fee_name_ref = 'CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Business') {
                                        $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                        $convr_fee_name_ref = 'CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                        $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                    } 
                                    $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                                    $conversion_feet = $fees_convr->fee_value;
                                    $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;
                                    $ref_amt=$user_invited_amount1;
                                    $ref_fees=($amountt * $conversion_feet) / 100;
                                    $host_currency = trim($user->currency);
                                    $user_currency = 'USD';
                                    $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                                    $convertedCurrArr = explode('##', $convertedCurrArr);
                                    $user_invited_amountt = $convertedCurrArr[0];
                                } else {
                                    $host_currency = trim($currency);
                                    $user_currency = 'USD';
                                    $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $refrlComm);
                                    $convertedCurrArr = explode('##', $convertedCurrArr);
                                    $user_invited_amountt = $convertedCurrArr[0];
                                    $ref_amt=$refrlComm;
                                }

                                $refComm = new ReferralCommission([
                                    'user_id' =>  $user->id,
                                    'referrer_id' => $referrer->user_id,
                                    'amount' => $user_invited_amountt,
                                    'action' => 'W2W_FUND_TRANSFER',
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                ]);
                                $refComm->save();
                                $refId = $refComm->id;
                            }

                            $admin_fees_amount = $fees_deposite + $conversion_amount-$ref_amt;
                            $convertedCurrArrAdmin_receiver = $this->convertCurrency($user->currency,'USD', $admin_fees_amount);
                            $convertedCurrArrAdmin_receiver = explode('##', $convertedCurrArrAdmin_receiver);
                            $admin_total_fees = $convertedCurrArrAdmin_receiver[0];

                        }

                        if ($fees_deposite == 0) {
                          //  echo "hello";
                            $sender_total = $amount + $fees_amount+$conversion_amount;
                            $receiver_total = $userAmount;
                            $sender_fees = $fees_amount;
                            $sender_total_fees=$fees_amount+$conversion_amount;
                            $receiver_fees = 0;
                        } else {
                          //  echo "hi";
                            $sender_total = $amount+$conversion_amount;
                            $receiver_total = $userAmount - $fees_deposite;
                            $sender_fees = $conversion_amount;
                            $sender_total_fees=$conversion_amount;
                            $receiver_fees = $fees_deposite;
                            $fees_amount = $fees_deposite;
                        }
                    //    echo $sender_total_fees; 

                     //   die;
                        
                        if ($recordInfo->wallet_amount < $sender_total) {
//                            Session::put('error_session_message', "Insufficient Balance.");
                            Session::put('error_session_message', "The amount in your account can't cover " . $currency . ' ' . $fees_amount . " fee for this transaction. Please try again with different amount.");
                            return Redirect::to('auth/fund-transfer');
                        }

                        $sender_wallet = ($recordInfo->wallet_amount - $sender_total);
                        User::where('id', Session::get('user_id'))->update(['wallet_amount' => $sender_wallet]);
//                        echo '/';
//                        echo $sender_total;
//                        echo '/';
//                        echo $receiver_total;
//                        echo '/';
//                        echo $sender_fees;
//                        echo '/';
//                        echo $receiver_fees;
//                        echo '/';
//                        echo $input['conversn_amount'];
//                        echo '/';
//                        echo $fees_deposite;
//                        echo '/';
//                        echo $fees_amount;
//                        echo '/';
//                        echo $admin_fees_amount;
//                        echo '/';
//                        echo $conversion_amount;
// //                        print_r($user);
//                        exit;

                        $adminInfo = User::where('id', 1)->first();
                        $admin_wallet = ($adminInfo->wallet_amount + $admin_total_fees);
                        User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                        if ($input['conversn_amount'] > 0) {
                            $input['conversn_amount'] = str_replace(",", "", $input['conversn_amount']);
                            $benificry_wallet = $user->wallet_amount + $receiver_total;
                            //$benificry_wallet = $user->wallet_amount + $input['conversn_amount'];
                            $benificry_wallet_usd = $this->fetchCurrencyRate($user->currency, $benificry_wallet);
                            $this->updateCard($benificry_wallet_usd, $benificry_wallet, $user);
                            $real_value = $input['conversn_amount'];
                            $reference_note = $input['reference_note'];
                            $refrence_id = time() . rand() . Session::get('user_id');
                            
                            if($recordInfo->user_type!="Agent")
                            {
                                $billing_description = 'Amount ' . $currency . ' ' . $amount . ' and Conversion rate ' . $input['conversn_rate'] .'='.$user->currency.' '. $input['conversn_amount'] . '##SENDER_FEES :' . $currency . ' ' . $sender_fees . '##Conversion Fee :'.$recordInfo->currency.' '. $conversion_amount . '##Wallet2Wallet Transfer##IP:' . $this->get_client_ip() . '##Reference Note: ' . $reference_note; 
                            }
                            else{
                                $billing_description = 'Amount ' . $currency . ' ' . $amount . ' and Conversion rate ' . $input['conversn_rate'] .'='.$user->currency.' '. $input['conversn_amount'] . '##RECEIVER_FEES :' . $user->currency . ' ' . $fees_deposite . '##Conversion Fee :'.$recordInfo->currency.' '. $conversion_amount . '##Wallet2Wallet Transfer##IP:' . $this->get_client_ip() . '##Reference Note: ' . $reference_note;      
                            }


                            $trans = new Transaction([
                                "user_id" => Session::get('user_id'),
                                "receiver_id" => $user->id,
                                "amount" => $amount,
                                "fees" => $sender_fees + $receiver_fees+$conversion_amount,
                                "sender_fees" => $sender_total_fees,
                                "sender_currency" => $currency,
                                "receiver_fees" => $receiver_fees,
                                "currency" => $currency,
                                "receiver_currency" => $user->currency,
                                "trans_type" => 2, //Debit
                                "trans_to" => 'Dafri_Wallet',
                                "trans_for" => 'W2W',
                                "refrence_id" => $refrence_id,
                                "billing_description" => $billing_description,
                                "user_close_bal" => $sender_wallet,
                                "receiver_close_bal" => $benificry_wallet,
                                "real_value" => $receiver_total,
                                "sender_real_value" => $sender_total,
                                "reference_note" => $input['reference_note'],
                                "status" => 1,
                                "pay_by_agent"=>$pay_by_agent,
                                "created_at" => date('Y-m-d H:i:s'),
                                "updated_at" => date('Y-m-d H:i:s'),
                            ]);
                            $trans->save(); 
                            $TransId = $trans->id;
                        } else {
                            $real_value = $amount;
                            $benificry_wallet = $user->wallet_amount + $receiver_total;
                            $benificry_wallet_usd = $this->fetchCurrencyRate($user->currency, $benificry_wallet);
                            $this->updateCard($benificry_wallet_usd, $benificry_wallet, $user);
                            if($recordInfo->user_type!="Agent")
                            {
                             $billing_description='Wallet2Wallet Transfer##IP:' . $this->get_client_ip() . '##Reference Note : ' . $input['reference_note'] . '##SENDER_FEES :' . $currency . ' ' . $sender_fees;  
                            }
                            else{
                            $billing_description='Wallet2Wallet Transfer##IP:' . $this->get_client_ip() . '##Reference Note : ' . $input['reference_note'] . '##RECEIVER_FEES :' .$user->currency . ' ' . $receiver_fees;      
                            }
                            $refrence_id = time() . rand() . Session::get('user_id');
                            $trans = new Transaction([
                                "user_id" => Session::get('user_id'),
                                "receiver_id" => $user->id,
                                "amount" => $amount,
                                "fees" => $sender_fees + $receiver_fees,
                                "sender_fees" => $sender_fees,
                                "sender_currency" => $currency,
                                "receiver_fees" => $receiver_fees,
                                "currency" => $currency,
                                "receiver_currency" => $user->currency,
                                "trans_type" => 2, //Credit
                                "trans_to" => 'Dafri_Wallet',
                                "trans_for" => 'W2W',
                                "refrence_id" => $refrence_id,
                                "billing_description" =>$billing_description,
                                "user_close_bal" => $sender_wallet,
                                "receiver_close_bal" => $benificry_wallet,
                                "real_value" => $receiver_total,
                                "sender_real_value" => $sender_total,
                                "reference_note" => $input['reference_note'],
                                "status" => 1,
                                "pay_by_agent"=>$pay_by_agent,
                                "created_at" => date('Y-m-d H:i:s'),
                                "updated_at" => date('Y-m-d H:i:s'),
                            ]);
                            $trans->save();
                          //  print($trans); die;
                            $TransId = $trans->id;
                        }
                        
                        if($refId > 0){
                            ReferralCommission::where('id', $refId)->update(['trans_id' => $TransId]);
                        }

                        /*                         * ***Email For Receiver*********** */
                        $emailId = $user->email;
                        if ($user->user_type == 'Personal') {
                            $userName = strtoupper($user->first_name);
                            $userFullName = strtoupper($user->first_name . ' ' . $user->last_name);
                            $receiverName = strtoupper($user->first_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                        } else if ($user->user_type == 'Business') {
                            $userName = strtoupper($user->business_name);
                            $userFullName = strtoupper($user->business_name);
                            $receiverName = strtoupper($user->business_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                        } else if ($user->user_type == 'Agent' and $user->first_name != "") {
                            $userName = strtoupper($user->first_name);
                            $userFullName = strtoupper($user->first_name . ' ' . $user->last_name);
                            $receiverName = strtoupper($user->first_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                        } else if ($user->user_type == 'Agent' and $user->business_name != "") {
                            $userName = strtoupper($user->business_name);
                            $userFullName = strtoupper($user->business_name);
                            $receiverName = strtoupper($user->business_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                        }


                        $account_number = $user->account_number;

                        $mailAmount = number_format($real_value, 2, '.', ',');
                        $mailAmnt = explode(".", $mailAmount);

                        $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello, ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment from ' . $senderName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr><tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center">Head to your <a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr><td align="center" style="padding-bottom: 60px;"></td></tr></table></td></tr></tbody></table>';
                        $emailBodyState = '<table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello, ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment from ' . $senderName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr><tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr><td align="center" style="padding-bottom: 60px;"></td></tr></table></td></tr></tbody></table>';
                        $emailSubject = "DafriBank Digital | Account has been credited with " . $user->currency . " " . $mailAmount;
                        //                        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                        if (isset($input['sendProof'])) {


                            $detl = array();
                            $detl["payment_date"] = date("d F Y, h:i A");
                            $detl["userName"] = $userName;
                            $detl["receiverName"] = $userFullName;
                            $detl["bank"] = 'DafriBank Digital LTD';
                            $detl["account_number"] = $account_number;
                            $detl["amount"] = $user->currency . " " . $mailAmount;
                            $detl["refrence"] = $refrence_id;
                            $detl["transId"] = $TransId;
                            $detl["reference_note"] = $input['reference_note'];

                            view()->share(['detl' => $detl]);

                            $customPaper = array(0, 0, 720, 1440);
                            $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
//                                                    $pdf = PDF::loadView('fundtransferPdf');

                            $data["userName"] = strtoupper($userName);
                            $data["amount"] = $user->currency . " " . $mailAmount;
                            $data["fee_amount"] = $user->currency . " " . number_format($receiver_fees, 10, '.', ',');
                            $data["TransId"] = $TransId;
                            $data["refrence_id"] = $refrence_id;
                            $data["senderName"] = strtoupper($senderName);
                            $data["email"] = $emailId;
                            $data["title"] = $emailSubject;
                            $data["body"] = $emailBody;
                            $data["mail_dashboard_lnk"] = $mail_dashboard_lnk;
                            $data["reference_note"] = $input['reference_note'];
                            $data["mail_amount"] = $user->currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1];
                            //                        $data["heading"] = 'Hey ' . $userName . ',';

                            Mail::send('transferMail', $data, function ($message)use ($data, $pdf, $account_number) {
                                $message->to($data["email"], $data["email"])
                                        ->subject($data["title"])
                                        ->attachData($pdf->output(), $account_number . ".pdf");
                            });
                        } else {

                            $detl = array();
                            $detl["payment_date"] = date("d F Y, h:i A");
                            $detl["userName"] = $userName;
                            $detl["receiverName"] = $userFullName;
                            $detl["bank"] = 'DafriBank Digital LTD';
                            $detl["account_number"] = $account_number;
                            $detl["amount"] = $user->currency . " " . $mailAmount;
                            $detl["refrence"] = $refrence_id;
                            $detl["transId"] = $TransId;
                            $detl["reference_note"] = $input['reference_note'];

                            view()->share(['detl' => $detl]);

                            $customPaper = array(0, 0, 720, 1440);
                            $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
                            //                       $pdf = PDF::loadView('fundtransferPdf');

                            $data["userName"] = $userName;
                            $data["amount"] = $user->currency . " " . $mailAmount;
                            $data["fee_amount"] = $user->currency . " " . number_format($receiver_fees, 10, '.', ',');
                            $data["TransId"] = $TransId;
                            $data["refrence_id"] = $refrence_id;
                            $data["senderName"] = $senderName;
                            $data["email"] = $emailId;
                            $data["title"] = $emailSubject;
                            $data["body"] = $emailBody;
                            $data["mail_dashboard_lnk"] = $mail_dashboard_lnk;
                            $data["reference_note"] = $input['reference_note'];
                            $data["mail_amount"] = $user->currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1];
                            //                        $data["heading"] = 'Hey ' . $userName . ',';

                            Mail::send('transferMail', $data, function ($message)use ($data, $pdf, $account_number) {
                                $message->to($data["email"], $data["email"])
                                        ->subject($data["title"]);
                                //                                        ->attachData($pdf->output(), $account_number . ".pdf");
                            });
                            //                            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                        }
                        //                        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                        //                        return $pdf->download('fundtransferPdf.pdf');

                        $notif = new Notification([
                            'user_id' => $user->id,
                            'notif_subj' => $emailSubject,
                            'notif_body' => $emailBody,
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s'),
                        ]);
                        $notif->save();



                        /*                         * ***Email For Sender*********** */
                        $mailAmount = number_format($amount, 2, '.', ',');
                        $mailAmnt = explode(".", $mailAmount);

                        $emailId = $recordInfo->email;
                        if ($recordInfo->user_type == "Personal") {
                            $userName = strtoupper($recordInfo->first_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                        } else if ($recordInfo->user_type == "Business") {
                            $userName = strtoupper($recordInfo->business_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                        } else if ($recordInfo->user_type == "Agent" && $recordInfo->first_name != "") {
                            $userName = strtoupper($recordInfo->first_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                        } else if ($recordInfo->user_type == "Agent" && $recordInfo->business_name != "") {
                            $userName = strtoupper($recordInfo->business_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                        }

                        $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello, ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment to ' . $receiverName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr>
                    <tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center">Head to your <a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr><td align="center" style="padding-bottom: 60px;"></td></tr></table></td></tr></tbody></table>';
                        $emailBodyState = '<table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello, ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment to ' . $receiverName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr>
                    <tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr><td align="center" style="padding-bottom: 60px;"></td></tr></table></td></tr></tbody></table>';
                        $emailSubject = "DafriBank Digital | Account has been debited with " . $currency . " " . $mailAmount;

 

                        if (isset($input['sendProof'])) {


                            $detl = array();
                            $detl["payment_date"] = date("d F Y, h:i A");
                            $detl["userName"] = $userName;
                            $detl["receiverName"] = $userFullName;
                            $detl["bank"] = 'DafriBank Digital LTD';
                            $detl["account_number"] = $account_number;
                            $detl["amount"] = $currency . " " . $mailAmount;
                            $detl["refrence"] = $refrence_id;
                            $detl["transId"] = $TransId;
                            $detl["reference_note"] = $input['reference_note'];

                            view()->share(['detl' => $detl]);

                            $customPaper = array(0, 0, 720, 1440);
                            $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
                            //                        $pdf = PDF::loadView('fundtransferPdf');

                            $data["userName"] = $userName;
                            $data["amount"] = $currency . " " . $mailAmount;
                            if($recordInfo->user_type!="Agent")
                            {
                            $data["fee_amount"] = $currency . " " . number_format($sender_total_fees, 10, '.', ',');
                            }
                            else{
                            if($recordInfo->user_type=="Agent"  && $user->user_type!="Agent")
                            {
                            $data["fee_amount"] = $currency ." ".number_format($sender_total_fees, 10, '.', ','); 
                            }
                            else
                            {
                            $data["fee_amount"] = $currency . " " .number_format($sender_total_fees, 10, '.', ',');
                            }
                            }
                            $data["TransId"] = $TransId;
                            $data["refrence_id"] = $refrence_id;
                            $data["receiverName"] = $receiverName;
                            $data["email"] = $emailId;
                            $data["title"] = $emailSubject;
                            $data["body"] = $emailBodyState;
                            $data["mail_dashboard_lnk"] = $mail_dashboard_lnk;
                            $data["reference_note"] = $input['reference_note'];
                            $data["mail_amount"] = $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1];
                            //                        $data["heading"] = 'Hey ' . $userName . ',';

                            Mail::send('transferMailSender', $data, function ($message)use ($data, $pdf, $account_number) {
                                $message->to($data["email"], $data["email"])
                                        ->subject($data["title"])
                                        ->attachData($pdf->output(), $account_number . ".pdf");
                            });
                            //                            return $pdf->download('fundtransferPdf.pdf');
                        } else {
                            $detl = array();
                            $detl["payment_date"] = date("d F Y, h:i A");
                            $detl["userName"] = $userName;
                            $detl["receiverName"] = $userFullName;
                            $detl["bank"] = 'DafriBank Digital LTD';
                            $detl["account_number"] = $account_number;
                            $detl["amount"] = $currency . " " . $mailAmount;
                            $detl["refrence"] = $refrence_id;
                            $detl["transId"] = $TransId;
                            $detl["reference_note"] = $input['reference_note'];

                            view()->share(['detl' => $detl]);

                            $customPaper = array(0, 0, 720, 1440);
                            $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
                            //                        $pdf = PDF::loadView('fundtransferPdf');

                            $data["userName"] = $userName;
                            $data["amount"] = $currency . " " . $mailAmount;
                            if($recordInfo->user_type!="Agent")
                            {
                            $data["fee_amount"] = $currency . " " . number_format($sender_total_fees, 10, '.', ',');
                            }
                            else{
                            if($recordInfo->user_type=="Agent"  && $user->user_type!="Agent")
                            {
                            $data["fee_amount"] = $currency ." ".number_format($sender_total_fees, 10, '.', ',');
                            }
                            else{
                            $data["fee_amount"] = $currency . " " . number_format($sender_total_fees, 10, '.', ',');  
                            }
                            }
                            $data["TransId"] = $TransId;
                            $data["refrence_id"] = $refrence_id;
                            $data["receiverName"] = $receiverName;
                            $data["email"] = $emailId;
                            $data["title"] = $emailSubject;
                            $data["body"] = $emailBodyState;
                            $data["reference_note"] = $input['reference_note'];
                            $data["mail_dashboard_lnk"] = $mail_dashboard_lnk;
                            $data["mail_amount"] = $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1];
                            //                        $data["heading"] = 'Hey ' . $userName . ',';

                            Mail::send('transferMailSender', $data, function ($message)use ($data, $pdf, $account_number) {
                                $message->to($data["email"], $data["email"])
                                        ->subject($data["title"]);
                                //                                        ->attachData($pdf->output(), $account_number . ".pdf");
                            });
                            //                            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                        }
                        //                        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                        /* if($accNumber != ''){
                          $account_number = $accNumber;
                          } else{
                          $account_number = $user->email;
                          }

                          $detl = array();
                          $detl["payment_date"] = date("D M Y, h:i A");
                          $detl["userName"] = $userName;
                          $detl["receiverName"] = $receiverName;
                          $detl["bank"] = 'DafriBank';
                          $detl["account_number"] = $account_number;
                          $detl["amount"] = $currency . " " . $amount;
                          $detl["refrence"] = $refrence_id;
                          $detl["transId"] = $TransId;


                          view()->share(['detl' => $detl]);

                          $customPaper = array(0,0,720,1440);
                          $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
                          $pdf = PDF::loadView('fundtransferPdf');
                          $bodyEmail = 'As per your request, please check attached statement for period.';
                          $subjectEmail = 'e-Statement DafriBank - Digital Bank of Africa';

                          $data["email"] = $emailId;
                          $data["title"] = 'test';
                          $data["body"] = 'test';
                          $data["heading"] = 'Hey ' . $userName . ',';

                          Mail::send('statementMail', $data, function ($message)use ($data, $pdf) {
                          $message->to($data["email"], $data["email"])
                          ->subject($data["title"])
                          ->attachData($pdf->output(), "statement.pdf");
                          });
                          return $pdf->download('fundtransferPdf.pdf'); */


                        $notif = new Notification([
                            'user_id' => $recordInfo->id,
                            'notif_subj' => $emailSubject,
                            'notif_body' => $emailBody,
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s'),
                        ]);
                        $notif->save();

                        $this->addBeneficiary($recordInfo->id, $user->id);

                        //Session::flash('success_message', "Amount successfully transfer to Beneficiary wallet.");
                        $b64TransID = base64_encode($TransId);
                        $b64RefID = base64_encode($refrence_id);
                        return Redirect::to('auth/transfer-success/' . $b64TransID . '/' . $b64RefID);
                    } else {
                        //                        Session::flash('error_message', "Insufficient Balance.");
//                        Session::put('error_session_message', "Insufficient Balance.");
                        Session::put('error_session_message', "Insufficient Balance.");
                        return Redirect::to('auth/fund-transfer');
                    }
                } else {
                    //                    Session::flash('error_message', "Invalid User Account Number OR User OTP is not verified.");
                    Session::put('error_session_message', "Invalid User Account Number OR User OTP is not verified.");
                    return Redirect::to('auth/fund-transfer');
                }


                //                Session::flash('success_message', "Recipient Added Successfully.");
                Session::put('success_session_message', "Recipient Added Successfully.");
                return Redirect::to('auth/fund-transfer');
            }
        }

        $recipient = Recipient::where('user_id', Session::get('user_id'))->get();
        $recipientArr = array();
        foreach ($recipient as $val) {
            $recipientArr[$val->id] = $val->recipient_name . "(" . $val->recipient_acc_num . ")";
        }
        //echo "User_id: ".Session::get('user_id');
        $recentRecipient = Transaction::where("user_id", Session::get('user_id'))->where("trans_for", "W2W")->orderBy('id', 'DESC')->paginate(5);

        if ($recordInfo->user_type == 'Agent') {
            $agent = Agent::where('user_id', $recordInfo->id)->first();
            $query = new Transaction();
            $query = $query->sortable();
            $query = $query->where("user_id", Session::get('user_id'));
            $query = $query->orWhere("receiver_id", Session::get('user_id'))->orWhere('receiver_id', $agent->id);
            $trans = $query->orderBy('id', 'DESC')->paginate(3);
        } else {
            $trans = Transaction::where("user_id", Session::get('user_id'))->orWhere("receiver_id", Session::get('user_id'))->orderBy("id", "DESC")->paginate(3);
        }

        return view('users.fundTransfer', ['title' => $pageTitle, $activetab => 1, 'recordInfo' => $recordInfo, 'recipient' => $recipientArr, 'recentRecipient' => $recentRecipient, 'trans' => $trans, 'user_data' => $user_data,'slug'=>$slug]);
    }

    public function fundTransfer_old() {
        $pageTitle = 'Fund Transfer';
        $activetab = 'actdashboard';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        if ($recordInfo->user_type == 'Personal') {
            $senderName = $recordInfo->first_name;
        } else if ($recordInfo->user_type == 'Business') {
            $senderName = $recordInfo->business_name;
        } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
            $senderName = $recordInfo->first_name;
        } else if ($recordInfo->user_type == 'Agent' && $recordInfo->business_name != "") {
            $senderName = $recordInfo->business_name;
        }

        $input = Input::all();
        // print_r($input);die;
        if (!empty($input)) {
            $rules = array(
                'trnsfrAmnt' => 'required|numeric|min:0.1',
                'recipient_email_accnum' => 'required',
                    //'recipient_email' => 'required|email:filter',
            );

            $customMessages = [
                'recipient_accntNumbr.required' => 'Account number field can\'t be left blank.',
                'trnsfrAmnt.min' => 'Transfer amount should be greater than 0.',
                'recipient_email_accnum.required' => 'Invalid Email/Account number field.',
                    //'recipient_email.required' => 'Account email field can\'t be left blank.',
                    //'recipient_email.email' => 'Invalid Account email!',
                    //'trnsfrAmnt.required' => 'Amount field can\'t be left blank.',
                    //'trnsfrAmnt.numeric' => 'Amount should be in number.',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('failed_session_message', $message);
                return Redirect::to('auth/fund-transfer');
                //                return Redirect::to('/auth/fund-transfer')->withErrors($validator)->withInput();
            } else {
                $amount = $input['trnsfrAmnt'];
                $email_accnum = $input['recipient_email_accnum'];
                if (!filter_var($email_accnum, FILTER_VALIDATE_EMAIL)) {
                    $accNumber = $email_accnum;
                    $accEmail = '';
                } else {
                    $accNumber = '';
                    $accEmail = $email_accnum;
                }

                $currency = $recordInfo->currency;
                if ($recordInfo->is_kyc_done != 1 or $recordInfo->is_verify != 1) {
                    $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
                    //echo "Chk Amount: ".$chkAmount; exit;
                    if ($chkAmount > TRANS_LIMIT_BEFORE_KYC && $recordInfo->currency != 'USD') {
                        $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, TRANS_LIMIT_BEFORE_KYC);
                        $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                        //                        Session::flash('error_message', "You can't transfer more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please update your KYC.");
                        Session::put('error_session_message', "You can't transfer more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please upload your KYC.");
                        return Redirect::to('auth/fund-transfer');
                    }

                    //                    $TotalWithdraw = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', 0)->where('trans_for', 'LIKE', 'Withdraw%')->whereIn('status', array(1, 2))->get();

                    $TotalWithdraw = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', 0)->where('trans_for', 'LIKE', 'Withdraw%')->whereIn('status', array(1, 2))->sum('amount');

                    $TotalDebitTrans = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', '!=', 0)->where('trans_type', 2)->where('status', 1)->sum('amount');
                    //                    $TotalDebitTrans = Transaction::where('user_id', 1)->get();
                    //check Inactive Amount (Agent Request and paypal Request) Calc Start
                    $TotalInactvAmnt = InactiveAmount::where('user_id', Session::get('user_id'))->sum('amount');
                    //check Inactive Amount (Agent Request and paypal Request) Calc End

                    $ttlWithdrawAmount = $TotalWithdraw + $TotalDebitTrans + $TotalInactvAmnt + $amount;
                    $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $ttlWithdrawAmount);

                    //                    echo "Ttl Withdraw Amount: ".$ttlWithdrawAmount." :: USD: ".$chkAmount; exit;

                    if ($chkAmount >= TRANS_LIMIT_BEFORE_KYC) {
                        $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, TRANS_LIMIT_BEFORE_KYC);
                        $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                        //                        Session::flash('error_message', "You can't transfer more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please update your KYC.");
                        Session::put('error_session_message', "You can't transfer more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please upload your KYC.");
                        return Redirect::to('auth/fund-transfer');
                    }
                }

                $transLimitFlag = $this->checkUserTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $amount);

                $transLimitArr = explode("###", $transLimitFlag);
                //print_r($transLimitArr); exit;

                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                    //                    Session::flash('error_message', $transLimitArr[1]);
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('auth/fund-transfer');
                }

                $transLimitFlag = $this->checkAgentTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $amount);

                $transLimitArr = explode("###", $transLimitFlag);
                //print_r($transLimitArr); exit;

                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                    //                    Session::flash('error_message', $transLimitArr[1]);
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('auth/fund-transfer');
                }

                if ($accNumber != "" && $accEmail != "") {
                    $user = User::where('account_number', $accNumber)->where('email', $accEmail)->where('otp_verify', 1)->first();
                } else if ($accEmail != "" && $accNumber == "") {
                    $user = User::where('email', $accEmail)->where('otp_verify', 1)->first();
                } else if ($accEmail == "" && $accNumber != "") {
                    $user = User::where('account_number', $accNumber)->where('otp_verify', 1)->first();
                }

                if (!empty($user)) {
                    if ($user->id == Session::get('user_id')) {
                        //                        Session::flash('error_message', "Sender & Receiver Should not be same.");
                        Session::put('error_session_message', "Sender & Receiver Should not be same.");
                        return Redirect::to('auth/fund-transfer');
                    }

                    $conversion_fee = 0;
                    if ($recordInfo->wallet_amount >= $amount) {
                        if ($recordInfo->user_type == 'Personal') {
                            if ($recordInfo->account_category == "Silver") {
                                $fee_name = 'W2W_SENDER';
                            } else if ($recordInfo->account_category == "Gold") {
                                $fee_name = 'W2W_SENDER_GOLD';
                            } else if ($recordInfo->account_category == "Platinum") {
                                $fee_name = 'W2W_SENDER_PLATINUM';
                            } else if ($recordInfo->account_category == "Private Wealth") {
                                $fee_name = 'W2W_SENDER_PRIVATE_WEALTH';
                            } else {
                                $fee_name = 'W2W_SENDER';
                            }
                            $conversion_fee = 0;
                            if ($input['conversn_amount'] > 0) {
                                $convr_fee_name = 'CONVERSION_FEE';
                                $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                                $conversion_fee = $fees_convr->fee_value;
                            }
                            // print_r($fees_convr);
                            // die;
                            $fees = Fee::where('fee_name', $fee_name)->first();
                            $fee_total = $fees->fee_value + $conversion_fee;

                            $fees_amount1 = ($amount * $fees->fee_value) / 100;
                            $fees_amount = ($amount * $fee_total) / 100;

//                            echo "Fees name: ".$fee_name." :: Fees amount: ".$fees_amount; 

                            if ($recordInfo->referral != 'na') {
                                $refrlComm = ($fees_amount1 * 25) / 100;
                                $refrlComm = number_format($refrlComm, 2, '.', ',');

                                if ($currency != 'USD') {

                                    $amountt = $refrlComm;
                                    $convr_fee_name = 'CONVERSION_FEE';
                                    $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                                    $conversion_feet = $fees_convr->fee_value;

                                    $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                                    $host_currency = trim($currency);
                                    $user_currency = 'USD';

                                    $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                                    $convertedCurrArr = explode('##', $convertedCurrArr);
                                    $user_invited_amountt = $convertedCurrArr[0];
                                } else {
                                    $user_invited_amountt = $refrlComm;
                                }

//                                echo '<pre>';print_r($convertedCurrArr);exit;

                                $referlCode = 'refid=' . $recordInfo->referral;
                                $referrer = Referalcode::where('referal_link', $referlCode)->first();
                                if (!empty($referrer)) {
                                    $refComm = new ReferralCommission([
                                        'user_id' => Session::get('user_id'),
                                        'referrer_id' => $referrer->user_id,
                                        'amount' => $user_invited_amountt,
                                        'action' => 'W2W_FUND_TRANSFER',
                                        'created_at' => date('Y-m-d H:i:s'),
                                        'updated_at' => date('Y-m-d H:i:s')
                                    ]);
                                    $refComm->save();
                                }
                            }
                        } else if ($recordInfo->user_type == 'Business') {
                            if ($recordInfo->account_category == "Gold") {
                                $fee_name = 'MERCHANT_W2W_SENDER_GOLD';
                            } else if ($recordInfo->account_category == "Platinum") {
                                $fee_name = 'MERCHANT_W2W_SENDER_PLATINUM';
                            } else if ($recordInfo->account_category == "Enterprises") {
                                $fee_name = 'MERCHANT_W2W_SENDER_Enterprises';
                            } else {
                                $fee_name = 'MERCHANT_W2W_SENDER_GOLD';
                            }

                            $conversion_fee = 0;
                            if ($input['conversn_amount'] > 0) {
                                $convr_fee_name = 'MERCHANT_CONVERSION_FEE';
                                $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                                $conversion_fee = $fees_convr->fee_value;
                            }
                            // print_r($fees_convr);
                            // die;

                            $fees = Fee::where('fee_name', $fee_name)->first();
                            // $fees_amount = ($amount * $fees->fee_value) / 100;
                            $fee_total = $fees->fee_value + $conversion_fee;
                            $fees_amount = ($amount * $fee_total) / 100;
                        } else {
                            $conversion_fee = 0;
                            if ($input['conversn_amount'] > 0) {
                                $convr_fee_name = 'MERCHANT_CONVERSION_FEE';
                                $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                                $conversion_fee = $fees_convr->fee_value;
                                $fees_amount = ($amount * $conversion_fee) / 100;
                            } else {
                                $fees_amount = 0;
                            }
                            // print_r($fees_convr);
                            // die;
                            // $fee_total = $fees->fee_value + $conversion_fee;
                        }
                        // echo $fees_amount;
                        // print_r($recordInfo);die;

                        if ($recordInfo->wallet_amount < ($amount + $fees_amount)) {
                            Session::put('error_session_message', "Insufficient Balance.");
                            return Redirect::to('auth/fund-transfer');
                        }

                        $sender_wallet = ($recordInfo->wallet_amount - ($amount + $fees_amount));
                        User::where('id', Session::get('user_id'))->update(['wallet_amount' => $sender_wallet]);


                        $host_currency = trim($currency);
                        $user_currency = 'USD';

                        $convertedCurrArrAdmin = $this->convertCurrency($host_currency, $user_currency, $fees_amount);
                        $convertedCurrArrAdmin = explode('##', $convertedCurrArrAdmin);
                        $user_amount_usd = $convertedCurrArrAdmin[0];

                        $adminInfo = User::where('id', 1)->first();
                        $admin_wallet = ($adminInfo->wallet_amount + $user_amount_usd);
                        User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                        if ($input['conversn_amount'] > 0) {
                            $input['conversn_amount'] = str_replace(",", "", $input['conversn_amount']);
                            $benificry_wallet = $user->wallet_amount + $input['conversn_amount'];

                            $benificry_wallet_usd = $this->fetchCurrencyRate($user->currency, $benificry_wallet);

                            $this->updateCard($benificry_wallet_usd, $benificry_wallet, $user);

                            //echo $user->user_type;exit;
                            //$benificry_wallet_usd = 1000004;
                            /* if ($user->user_type == 'Personal') {
                              if ($benificry_wallet_usd >= 21000 and $benificry_wallet_usd <= 50000) {
                              User::where('id', $user->id)->update(['account_category' => 'Gold', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              $this->sendLevelChangeMail($user->id, 'Gold');
                              } else if ($benificry_wallet_usd >= 50000 and $benificry_wallet_usd <= 100000) {
                              User::where('id', $user->id)->update(['account_category' => 'Platinum', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              $this->sendLevelChangeMail($user->id, 'Platinum');
                              } else if ($benificry_wallet_usd >= 100000) {
                              User::where('id', $user->id)->update(['account_category' => 'Private Wealth', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              $this->sendLevelChangeMail($user->id, 'Private Wealth');
                              } else {
                              User::where('id', $user->id)->update(['wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              }
                              } else if ($user->user_type == 'Business') {
                              if ($benificry_wallet_usd <= 1000000) {
                              User::where('id', $user->id)->update(['account_category' => 'Gold', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              $this->sendLevelChangeMail($user->id, 'Gold');
                              } else if ($benificry_wallet_usd > 1000000 and $benificry_wallet_usd <= 5000000) {
                              User::where('id', $user->id)->update(['account_category' => 'Platinum', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              $this->sendLevelChangeMail($user->id, 'Platinum');
                              } else if ($benificry_wallet_usd > 5000000) {
                              User::where('id', $user->id)->update(['account_category' => 'Enterprises', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              $this->sendLevelChangeMail($user->id, 'Enterprises');
                              } else {
                              User::where('id', $user->id)->update(['account_category' => 'Gold', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              }
                              } else {
                              User::where('id', $user->id)->update(['wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              }
                             */
                            $reference_note = $input['reference_note'];
                            $refrence_id = time() . rand() . Session::get('user_id');
                            $trans = new Transaction([
                                "user_id" => Session::get('user_id'),
                                "receiver_id" => $user->id,
                                "amount" => $amount,
                                "fees" => $fees_amount,
                                "currency" => $currency,
                                "trans_type" => 2, //Debit
                                "trans_to" => 'Dafri_Wallet',
                                "trans_for" => 'W2W',
                                "refrence_id" => $refrence_id,
                                "billing_description" => 'Amount ' . $currency . ' ' . $amount . ' and Conversion rate ' . $input['conversn_rate'] . 'X' . $amount . '=' . $input['conversn_amount'] . '##Conversion Fee ' . $conversion_fee . '% ##Wallet2Wallet Transfer##IP:' . $this->get_client_ip() . '##Reference Note: ' . $reference_note,
                                "user_close_bal" => $sender_wallet,
                                "receiver_close_bal" => $benificry_wallet,
                                "real_value" => $input['conversn_amount'],
                                "reference_note" => $input['reference_note'],
                                "status" => 1,
                                "created_at" => date('Y-m-d H:i:s'),
                                "updated_at" => date('Y-m-d H:i:s'),
                            ]);
                            $trans->save();
                            $TransId = $trans->id;
                        } else {
                            $benificry_wallet = $user->wallet_amount + $amount;
                            $benificry_wallet_usd = $this->fetchCurrencyRate($user->currency, $benificry_wallet);

                            $this->updateCard($benificry_wallet_usd, $benificry_wallet, $user);

                            /* if ($user->user_type == "Personal") {
                              if ($benificry_wallet_usd >= 21000 and $benificry_wallet_usd <= 50000) {
                              User::where('id', $user->id)->update(['account_category' => 'Gold', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              $this->sendLevelChangeMail($user->id, 'Gold');
                              } else if ($benificry_wallet_usd >= 50000 and $benificry_wallet_usd <= 100000) {
                              User::where('id', $user->id)->update(['account_category' => 'Platinum', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              $this->sendLevelChangeMail($user->id, 'Platinum');
                              } else if ($benificry_wallet_usd >= 100000) {
                              User::where('id', $user->id)->update(['account_category' => 'Private Wealth', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              $this->sendLevelChangeMail($user->id, 'Private Wealth');
                              } else {
                              User::where('id', $user->id)->update(['wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              }
                              } else if ($user->user_type == "Business") {
                              if ($benificry_wallet_usd <= 1000000) {
                              User::where('id', $user->id)->update(['account_category' => 'Gold', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              $this->sendLevelChangeMail($user->id, 'Gold');
                              } else if ($benificry_wallet_usd > 1000000 and $benificry_wallet_usd <= 5000000) {
                              User::where('id', $user->id)->update(['account_category' => 'Platinum', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              $this->sendLevelChangeMail($user->id, 'Platinum');
                              } else if ($benificry_wallet_usd > 5000000) {
                              User::where('id', $user->id)->update(['account_category' => 'Enterprises', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              $this->sendLevelChangeMail($user->id, 'Private Wealth');
                              } else {
                              User::where('id', $user->id)->update(['wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              }
                              } else {
                              User::where('id', $user->id)->update(['wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                              } */

                            $refrence_id = time() . rand() . Session::get('user_id');
                            $trans = new Transaction([
                                "user_id" => Session::get('user_id'),
                                "receiver_id" => $user->id,
                                "amount" => $amount,
                                "fees" => $fees_amount,
                                "currency" => $currency,
                                "trans_type" => 2, //Credit
                                "trans_to" => 'Dafri_Wallet',
                                "trans_for" => 'W2W',
                                "refrence_id" => $refrence_id,
                                "billing_description" => 'Wallet2Wallet Transfer##IP :' . $this->get_client_ip() . '##Reference Note: ' . $input['reference_note'],
                                "user_close_bal" => $sender_wallet,
                                "receiver_close_bal" => $benificry_wallet,
                                "real_value" => $amount,
                                "reference_note" => $input['reference_note'],
                                "status" => 1,
                                "created_at" => date('Y-m-d H:i:s'),
                                "updated_at" => date('Y-m-d H:i:s'),
                            ]);
                            $trans->save();
                            $TransId = $trans->id;
                        }

                        $emailId = $user->email;
                        if ($user->user_type == 'Personal') {
                            $userName = strtoupper($user->first_name);
                            $userFullName = strtoupper($user->first_name . ' ' . $user->last_name);
                            $receiverName = strtoupper($user->first_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                        } else if ($user->user_type == 'Business') {
                            $userName = strtoupper($user->business_name);
                            $userFullName = strtoupper($user->first_name);
                            $receiverName = strtoupper($user->first_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                        } else if ($user->user_type == 'Agent' and $user->first_name != "") {
                            $userName = strtoupper($user->first_name);
                            $userFullName = strtoupper($user->first_name . ' ' . $user->last_name);
                            $receiverName = strtoupper($user->first_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                        } else if ($user->user_type == 'Agent' and $user->business_name != "") {
                            $userName = strtoupper($user->business_name);
                            $userFullName = strtoupper($user->first_name);
                            $receiverName = strtoupper($user->first_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                        }

                        $account_number = $user->account_number;

                        $mailAmount = number_format($amount, 2, '.', ',');
                        $mailAmnt = explode(".", $mailAmount);

                        $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello, ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment from ' . $senderName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr><tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center">Head to your <a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr><td align="center" style="padding-bottom: 60px;"></td></tr></table></td></tr></tbody></table>';
                        $emailBodyState = '<table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello, ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment from ' . $senderName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr><tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr><td align="center" style="padding-bottom: 60px;"></td></tr></table></td></tr></tbody></table>';
                        $emailSubject = "DafriBank Digital | Account has been credited with " . $currency . " " . $mailAmount;
                        //                        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                        if (isset($input['sendProof'])) {


                            $detl = array();
                            $detl["payment_date"] = date("d F Y, h:i A");
                            $detl["userName"] = $userName;
                            $detl["receiverName"] = $userFullName;
                            $detl["bank"] = 'DafriBank Digital LTD';
                            $detl["account_number"] = $account_number;
                            $detl["amount"] = $currency . " " . $mailAmount;
                            $detl["refrence"] = $refrence_id;
                            $detl["transId"] = $TransId;
                            $detl["reference_note"] = $input['reference_note'];

                            view()->share(['detl' => $detl]);

                            $customPaper = array(0, 0, 720, 1440);
                            $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
                            //                        $pdf = PDF::loadView('fundtransferPdf');

                            $data["userName"] = $userName;
                            $data["amount"] = $currency . " " . $mailAmount;
                            $data["fee_amount"] = $currency . " " . number_format($fees_amount, 2, '.', ',');
                            $data["TransId"] = $TransId;
                            $data["refrence_id"] = $refrence_id;
                            $data["senderName"] = $senderName;
                            $data["email"] = $emailId;
                            $data["title"] = $emailSubject;
                            $data["body"] = $emailBody;
                            $data["mail_dashboard_lnk"] = $mail_dashboard_lnk;
                            $data["reference_note"] = $input['reference_note'];
                            $data["mail_amount"] = $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1];
                            //                        $data["heading"] = 'Hey ' . $userName . ',';

                            Mail::send('transferMail', $data, function ($message)use ($data, $pdf, $account_number) {
                                $message->to($data["email"], $data["email"])
                                        ->subject($data["title"])
                                        ->attachData($pdf->output(), $account_number . ".pdf");
                            });
                        } else {

                            $detl = array();
                            $detl["payment_date"] = date("d F Y, h:i A");
                            $detl["userName"] = $userName;
                            $detl["receiverName"] = $userFullName;
                            $detl["bank"] = 'DafriBank Digital LTD';
                            $detl["account_number"] = $account_number;
                            $detl["amount"] = $currency . " " . $mailAmount;
                            $detl["refrence"] = $refrence_id;
                            $detl["transId"] = $TransId;
                            $detl["reference_note"] = $input['reference_note'];

                            view()->share(['detl' => $detl]);

                            $customPaper = array(0, 0, 720, 1440);
                            $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
                            //                       $pdf = PDF::loadView('fundtransferPdf');

                            $data["userName"] = $userName;
                            $data["amount"] = $currency . " " . $mailAmount;
                            $data["fee_amount"] = $currency . " " . number_format($fees_amount, 2, '.', ',');
                            $data["TransId"] = $TransId;
                            $data["refrence_id"] = $refrence_id;
                            $data["senderName"] = $senderName;
                            $data["email"] = $emailId;
                            $data["title"] = $emailSubject;
                            $data["body"] = $emailBody;
                            $data["mail_dashboard_lnk"] = $mail_dashboard_lnk;
                            $data["reference_note"] = $input['reference_note'];
                            $data["mail_amount"] = $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1];
                            //                        $data["heading"] = 'Hey ' . $userName . ',';

                            Mail::send('transferMail', $data, function ($message)use ($data, $pdf, $account_number) {
                                $message->to($data["email"], $data["email"])
                                        ->subject($data["title"]);
                                //                                        ->attachData($pdf->output(), $account_number . ".pdf");
                            });
                            //                            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                        }
                        //                        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                        //                        return $pdf->download('fundtransferPdf.pdf');

                        $notif = new Notification([
                            'user_id' => $user->id,
                            'notif_subj' => $emailSubject,
                            'notif_body' => $emailBody,
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s'),
                        ]);
                        $notif->save();

                        $emailId = $recordInfo->email;
                        if ($recordInfo->user_type == "Personal") {
                            $userName = strtoupper($recordInfo->first_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                        } else if ($recordInfo->user_type == "Business") {
                            $userName = strtoupper($recordInfo->business_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                        } else if ($recordInfo->user_type == "Agent" && $recordInfo->first_name != "") {
                            $userName = strtoupper($recordInfo->first_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                        } else if ($recordInfo->user_type == "Agent" && $recordInfo->business_name != "") {
                            $userName = strtoupper($recordInfo->business_name);
                            $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                        }

                        $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello, ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment to ' . $receiverName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr>
                    <tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center">Head to your <a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr><td align="center" style="padding-bottom: 60px;"></td></tr></table></td></tr></tbody></table>';
                        $emailBodyState = '<table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello, ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment to ' . $receiverName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr>
                    <tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr><td align="center" style="padding-bottom: 60px;"></td></tr></table></td></tr></tbody></table>';
                        $emailSubject = "DafriBank Digital | Account has been debited with " . $currency . " " . $mailAmount;

                        if (isset($input['sendProof'])) {


                            $detl = array();
                            $detl["payment_date"] = date("d F Y, h:i A");
                            $detl["userName"] = $userName;
                            $detl["receiverName"] = $userFullName;
                            $detl["bank"] = 'DafriBank Digital LTD';
                            $detl["account_number"] = $account_number;
                            $detl["amount"] = $currency . " " . $mailAmount;
                            $detl["refrence"] = $refrence_id;
                            $detl["transId"] = $TransId;
                            $detl["reference_note"] = $input['reference_note'];

                            view()->share(['detl' => $detl]);

                            $customPaper = array(0, 0, 720, 1440);
                            $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
                            //                        $pdf = PDF::loadView('fundtransferPdf');

                            $data["userName"] = $userName;
                            $data["amount"] = $currency . " " . $mailAmount;
                            $data["fee_amount"] = $currency . " " . number_format($fees_amount, 2, '.', ',');
                            $data["TransId"] = $TransId;
                            $data["refrence_id"] = $refrence_id;
                            $data["receiverName"] = $receiverName;
                            $data["email"] = $emailId;
                            $data["title"] = $emailSubject;
                            $data["body"] = $emailBodyState;
                            $data["mail_dashboard_lnk"] = $mail_dashboard_lnk;
                            $data["reference_note"] = $input['reference_note'];
                            $data["mail_amount"] = $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1];
                            //                        $data["heading"] = 'Hey ' . $userName . ',';

                            Mail::send('transferMailSender', $data, function ($message)use ($data, $pdf, $account_number) {
                                $message->to($data["email"], $data["email"])
                                        ->subject($data["title"])
                                        ->attachData($pdf->output(), $account_number . ".pdf");
                            });
                            //                            return $pdf->download('fundtransferPdf.pdf');
                        } else {
                            $detl = array();
                            $detl["payment_date"] = date("d F Y, h:i A");
                            $detl["userName"] = $userName;
                            $detl["receiverName"] = $userFullName;
                            $detl["bank"] = 'DafriBank Digital LTD';
                            $detl["account_number"] = $account_number;
                            $detl["amount"] = $currency . " " . $mailAmount;
                            $detl["refrence"] = $refrence_id;
                            $detl["transId"] = $TransId;
                            $detl["reference_note"] = $input['reference_note'];

                            view()->share(['detl' => $detl]);

                            $customPaper = array(0, 0, 720, 1440);
                            $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
                            //                        $pdf = PDF::loadView('fundtransferPdf');

                            $data["userName"] = $userName;
                            $data["amount"] = $currency . " " . $mailAmount;
                            $data["fee_amount"] = $currency . " " . number_format($fees_amount, 2, '.', ',');
                            $data["TransId"] = $TransId;
                            $data["refrence_id"] = $refrence_id;
                            $data["receiverName"] = $receiverName;
                            $data["email"] = $emailId;
                            $data["title"] = $emailSubject;
                            $data["body"] = $emailBodyState;
                            $data["reference_note"] = $input['reference_note'];
                            $data["mail_dashboard_lnk"] = $mail_dashboard_lnk;
                            $data["mail_amount"] = $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1];
                            //                        $data["heading"] = 'Hey ' . $userName . ',';

                            Mail::send('transferMailSender', $data, function ($message)use ($data, $pdf, $account_number) {
                                $message->to($data["email"], $data["email"])
                                        ->subject($data["title"]);
                                //                                        ->attachData($pdf->output(), $account_number . ".pdf");
                            });
                            //                            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                        }
                        //                        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                        /* if($accNumber != ''){
                          $account_number = $accNumber;
                          } else{
                          $account_number = $user->email;
                          }

                          $detl = array();
                          $detl["payment_date"] = date("D M Y, h:i A");
                          $detl["userName"] = $userName;
                          $detl["receiverName"] = $receiverName;
                          $detl["bank"] = 'DafriBank';
                          $detl["account_number"] = $account_number;
                          $detl["amount"] = $currency . " " . $amount;
                          $detl["refrence"] = $refrence_id;
                          $detl["transId"] = $TransId;


                          view()->share(['detl' => $detl]);

                          $customPaper = array(0,0,720,1440);
                          $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
                          $pdf = PDF::loadView('fundtransferPdf');
                          $bodyEmail = 'As per your request, please check attached statement for period.';
                          $subjectEmail = 'e-Statement DafriBank - Digital Bank of Africa';

                          $data["email"] = $emailId;
                          $data["title"] = 'test';
                          $data["body"] = 'test';
                          $data["heading"] = 'Hey ' . $userName . ',';

                          Mail::send('statementMail', $data, function ($message)use ($data, $pdf) {
                          $message->to($data["email"], $data["email"])
                          ->subject($data["title"])
                          ->attachData($pdf->output(), "statement.pdf");
                          });
                          return $pdf->download('fundtransferPdf.pdf'); */


                        $notif = new Notification([
                            'user_id' => $recordInfo->id,
                            'notif_subj' => $emailSubject,
                            'notif_body' => $emailBody,
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s'),
                        ]);
                        $notif->save();

                        //Session::flash('success_message', "Amount successfully transfer to Beneficiary wallet.");
                        $b64TransID = base64_encode($TransId);
                        $b64RefID = base64_encode($refrence_id);
                        return Redirect::to('auth/transfer-success/' . $b64TransID . '/' . $b64RefID);
                    } else {
                        //                        Session::flash('error_message', "Insufficient Balance.");
                        Session::put('error_session_message', "Insufficient Balance.");
                        return Redirect::to('auth/fund-transfer');
                    }
                } else {
                    //                    Session::flash('error_message', "Invalid User Account Number OR User OTP is not verified.");
                    Session::put('error_session_message', "Invalid User Account Number OR User OTP is not verified.");
                    return Redirect::to('auth/fund-transfer');
                }


                //                Session::flash('success_message', "Recipient Added Successfully.");
                Session::put('success_session_message', "Recipient Added Successfully.");
                return Redirect::to('auth/fund-transfer');
            }
        }

        $recipient = Recipient::where('user_id', Session::get('user_id'))->get();
        $recipientArr = array();
        foreach ($recipient as $val) {
            $recipientArr[$val->id] = $val->recipient_name . "(" . $val->recipient_acc_num . ")";
        }
        //echo "User_id: ".Session::get('user_id');
        $recentRecipient = Transaction::where("user_id", Session::get('user_id'))->where("trans_for", "W2W")->orderBy('id', 'DESC')->paginate(5);

        if ($recordInfo->user_type == 'Agent') {
            $agent = Agent::where('user_id', $recordInfo->id)->first();
            $query = new Transaction();
            $query = $query->sortable();
            $query = $query->where("user_id", Session::get('user_id'));
            $query = $query->orWhere("receiver_id", Session::get('user_id'))->orWhere('receiver_id', $agent->id);
            $trans = $query->orderBy('id', 'DESC')->paginate(3);
        } else {
            $trans = Transaction::where("user_id", Session::get('user_id'))->orWhere("receiver_id", Session::get('user_id'))->orderBy("id", "DESC")->paginate(3);
        }

        return view('users.fundTransfer', ['title' => $pageTitle, $activetab => 1, 'recordInfo' => $recordInfo, 'recipient' => $recipientArr, 'recentRecipient' => $recentRecipient, 'trans' => $trans]);
    }

    public function notifications() {
        $pageTitle = 'Notifications';
        $activetab = 'actdashboard';

        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $notifications = Notification::where('user_id', Session::get('user_id'))->orderBy("id", "DESC")->get();

        return view('users.notifications', ['title' => $pageTitle, $activetab => 1, 'recordInfo' => $recordInfo, 'notifications' => $notifications]);
    }

    public function successFundTransfer($transID, $refID) {
        $pageTitle = 'Fund Transfer Successfull';
        $transID = base64_decode($transID);
        $refID = base64_decode($refID);
        $transInfo = Transaction::where('id', $transID)->first();
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        return view('users.successFundTransfer', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'transID' => $transID, 'refID' => $refID, 'transInfo' => $transInfo]);
    }

    public function successAddFund($transID, $refID, $amount) {
        $pageTitle = 'Wallet Topup Successfull';
        $transID = base64_decode($transID);
        $refID = base64_decode($refID);
        $amount = base64_decode($amount);
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        return view('users.successAddFund', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'transID' => $transID, 'refID' => $refID, 'amount' => $amount]);
    }

    public function myRecipients() {
        $pageTitle = 'My Recipients';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $recipients = Recipient::where('user_id', Session::get('user_id'))->get();
        return view('users.myRecipients', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'recipients' => $recipients]);
    }

    public function editRecipient($id) {
        $pageTitle = 'Edit Recipient';

        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'recipient_name' => 'required',
                'recipient_email' => 'required',
                'recipient_acc_num' => 'required',
                'conf_recipAccntNum' => 'required|same:recipient_acc_num',
                'recipient_bank' => 'required',
                'recipient_mobile' => 'required',
            );
            $customMessages = [
                'conf_recipAccntNum.same' => 'The confirm account number must match..',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            //$validator = Validator::make($input, $rules);
            if ($validator->fails()) {
                return Redirect::to('auth/edit-recipient/' . $id)->withErrors($validator)->withInput();
            } else {
                Recipient::where('id', $id)->update(array('recipient_name' => $input['recipient_name'], 'recipient_email' => $input['recipient_email'], 'recipient_acc_num' => $input['recipient_acc_num'], 'recipient_bank' => $input['recipient_bank'], 'recipient_mobile' => $input['recipient_mobile']));

                Session::flash('success_message', "Recipient Edited Successfully.");
                return Redirect::to('auth/edit-recipient/' . $id);
            }
        }

        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $recipient = Recipient::where('id', $id)->first();

        return view('users.editRecipient', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'recipient' => $recipient]);
    }

    public function deleteRecipient($id) {
        $pageTitle = 'Delete Recipient';
        Recipient::where('id', $id)->where('user_id', Session::get('user_id'))->delete();
        Session::flash('success_message', "Recipient Deleted Successfully.");
        return Redirect::to('auth/my-recipients');
    }

    public function feedback() {
        $pageTitle = 'Feedback Form';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'fbType' => 'required',
                'fbDesc' => 'required',
                'fbFname' => 'required',
                'fbLname' => 'required',
                'fbEmail' => 'required|email:filter',
            );
            $customMessages = [
                'fbType.required' => 'Feedback Type field can\'t be left blank',
                'fbDesc.required' => 'Feedback Description field can\'t be left blank',
                'fbFname.required' => 'First name field can\'t be left blank',
                'fbLname.required' => 'Last name field can\'t be left blank',
                'fbEmail.required' => 'Email field can\'t be left blank',
                'fbEmail.email' => 'Invalid Email',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            //$validator = Validator::make($input, $rules);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/feedback')->withInput(Input::except('password'));
//                return Redirect::to('auth/feedback')->withErrors($validator)->withInput(Input::except('password'));
            } else {
                $support = new Support([
                    'user_id' => Session::get('user_id'),
                    'support_type' => $input['fbType'],
                    'support_txt' => $input['fbDesc'],
                    'first_name' => $input['fbFname'],
                    'last_name' => $input['fbLname'],
                    'email' => $input['fbEmail'],
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $support->save();
                $TicketID = $support->id;

                $emailId = 'hello@dafribank.com'; //hello@dafribank.com;
                $fbDesc = nl2br($input['fbDesc']);
                $fbDesc = trim($fbDesc);

                $emailBody = '<!DOCTYPE html><html><head><title>Feedback</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello, DafriTechnologies LTD</h1></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #000; "> Feedback Type : ' . $input['fbType'] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 " width="30%">Ticket ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 " width="70%"> DBS-' . $TicketID . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 " width="30%">First Name</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 " width="70%">' . $input['fbFname'] . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 "width="30%">Last Name </td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 "width="70%">' . $input['fbLname'] . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 "width="30%">Email</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 "width="70%">' . $input['fbEmail'] . '</td></tr><tr style="width: 100%;"><td align="left" style="padding: 15px 0;"width="100%">Description</td></tr><tr style="width: 100%;"><td align="left" style="" width="100%" colspan="2"><p style="margin: 0; font-size: 14px; line-height: 27px;">' . $fbDesc . '</p></td></tr><tr></tr></table></td></tr><tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date('l, M d, Y') . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E ">Have questions or help ? Call 011 568 5053 or visit our <a href="#" style="color: #1381D0; text-decoration: none;"> FAQ </a> page.</p></td></tr></table></td></tr></tbody> </table>';

                $emailSubject = 'Feedback Form : DafriBank Digital';
                $emailData['subject'] = $emailSubject;
                $emailData['TicketID'] = $TicketID;
                $emailData['fbFname'] = strtoupper($support->first_name);
                $emailData['fbLname'] = strtoupper($support->last_name);
                $emailData['fbType'] = $support->support_type;
                $emailData['fbEmail'] = $support->email;
                $emailData['fbDesc'] = $support->support_txt;

//                    Mail::to($emailId)->send(new SendMailable($emailBody,$emailSubject,Null));
                Mail::send('emails.feedback', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });

//                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                //Sender Email Start
                $emailId = $recordInfo->email;
                if ($recordInfo->first_name != "") {
                    $user_name = strtoupper($recordInfo->first_name);
                } else {
                    $user_name = strtoupper($recordInfo->business_name);
                }

                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Dear</span> ' . $user_name . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Thank you for getting in touch!<br><br>Please note ticket ID ' . $TicketID . ' for future reference. Have a great day!<br><br>For Security, this request was received from I.P. address: ' . $this->get_client_ip() . '<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards, <br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr> </tbody></table></body></html>';

                $emailSubject = 'Feedback Form : DafriBank Digital';
                $emailData['subject'] = $emailSubject;
                $emailData['emailId'] = $TicketID;
                $emailData['TicketID'] = $TicketID;
                $emailData['user_name'] = $user_name;
                $emailData['ip'] = $this->get_client_ip();

//                    Mail::to($emailId)->send(new SendMailable($emailBody,$emailSubject,Null));
                Mail::send('emails.feedback2', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });

//                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                //Sender Email End
//                Session::flash('success_message', "Feedback sent Successfully.");
                Session::put('success_session_message', "Feedback sent Successfully.");
                return Redirect::to('auth/feedback');
            }
        }

        return view('users.feedback', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function getCurrencyRate(Request $request) {
        $apikey = CURRENCY_CONVERT_API_KEY;
        $from_Currency = $request->get('from');
        //$receiverAccNumber = $request->get('accNumber'); //Receiver Account Number
        //$receiverAccEmail = $request->get('accEmail'); //Receiver Account Email
        $receiverAccNumberEmail = $request->get('accNumberEmail'); //Receiver Email/Account number
        //echo "Acc num: ".$receiverAccNumber." ::: Email: ".$receiverAccEmail;
        if (!filter_var($receiverAccNumberEmail, FILTER_VALIDATE_EMAIL)) {
            if (strlen($receiverAccNumberEmail) < 10 or strlen($receiverAccNumberEmail) > 10) {
                echo 'INVALID_ACCOUNT_EMAIL';
                exit;
            }
            $receiverAccNumber = $receiverAccNumberEmail;
            $receiverAccEmail = '';
        } else {
            $receiverAccEmail = $receiverAccNumberEmail;
            $receiverAccNumber = '';
        }

        if ($request->get('amount') <= 0) {
            echo 'INVALID_ACCOUNT_EMAIL';
            exit;
        }

        //echo "Emaill: ".$receiverAccEmail." Acc num: ".$receiverAccNumber; exit;

        if ($receiverAccEmail != "" && $receiverAccNumber != "") {
            $receiver = User::where('account_number', $receiverAccNumber)->where('email', $receiverAccEmail)->first();
        } else if ($receiverAccEmail != "" && $receiverAccNumber == "") {
            $receiver = User::where('email', $receiverAccEmail)->first();
            if (empty($receiver)) {
                $recordInfo=$sender = User::where('id', Session::get('user_id'))->first();
                if (!empty($sender)) {
                    $currency = $recordInfo->currency;
                    $amount=$request->get('amount');
                    if ($recordInfo->is_kyc_done != 1 or $recordInfo->is_verify != 1) {
                        $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
                        if ($chkAmount > TRANS_LIMIT_BEFORE_KYC && $recordInfo->currency != 'USD') {
                            $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, TRANS_LIMIT_BEFORE_KYC);
                            $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                            echo  "Insufficient_Balance_daly###You can't transfer more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please upload your KYC.";
                            exit;
                        }
    
                        $TotalWithdraw = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', 0)->where('trans_for', 'LIKE', 'Withdraw%')->whereIn('status', array(1, 2))->sum('amount');
    
                        $TotalDebitTrans = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', '!=', 0)->where('trans_type', 2)->where('status', 1)->sum('amount');

                        $TotalInactvAmnt = InactiveAmount::where('user_id', Session::get('user_id'))->sum('amount');
    
                        $ttlWithdrawAmount = $TotalWithdraw + $TotalDebitTrans + $TotalInactvAmnt + $amount;
                        $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $ttlWithdrawAmount);
    
                        if ($chkAmount >= TRANS_LIMIT_BEFORE_KYC) {
                            $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, TRANS_LIMIT_BEFORE_KYC);
                            $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                            echo  "Insufficient_Balance_daly###You can't transfer more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please upload your KYC.";
                            exit;
                        }
                    }

                    $transLimitFlag = $this->checkUserTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $amount);
                    $transLimitArr = explode("###", $transLimitFlag);
                    if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                        echo "Insufficient_Balance_daly###".$transLimitArr[1];
                        exit;
                    }
   
                    if ($request->get('amount') > $sender->wallet_amount) {
                        echo "Insufficient_Balance";
                        exit;
                    }

                    $ip = $this->get_client_ip();
                    //Sender Fees Calculation Start
                    if ($sender->user_type == 'Personal') {
                        if ($sender->account_category == "Silver") {
                            $fee_name = 'W2W_SENDER';
                        } else if ($sender->account_category == "Gold") {
                            $fee_name = 'W2W_SENDER_GOLD';
                        } else if ($sender->account_category == "Platinum") {
                            $fee_name = 'W2W_SENDER_PLATINUM';
                        } else if ($sender->account_category == "Private Wealth") {
                            $fee_name = 'W2W_SENDER_PRIVATE_WEALTH';
                        } else {
                            $fee_name = 'W2W_SENDER';
                        }

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($request->get('amount') * $fees->fee_value) / 100;
                    } else if ($sender->user_type == 'Business') {
                        if ($sender->account_category == "Gold") {
                            $fee_name = 'MERCHANT_W2W_SENDER_GOLD';
                        } else if ($sender->account_category == "Platinum") {
                            $fee_name = 'MERCHANT_W2W_SENDER_PLATINUM';
                        } else if ($sender->account_category == "Enterprises") {
                            $fee_name = 'MERCHANT_W2W_SENDER_Enterprises';
                        } else {
                            $fee_name = 'MERCHANT_W2W_SENDER_GOLD';
                        }
                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($request->get('amount') * $fees->fee_value) / 100;
                    } else {
                        $fees_amount = 0;
                    }
                    //Sender Fees Calculation End

                    if ($sender->wallet_amount < $request->get('amount') + $fees_amount) {
                        echo "Insufficient_Balance_daly###The amount in your account can't cover " . $sender->currency . ' ' . $fees_amount . " fee for this transaction. Please try again with different amount.";
                        exit;
                    }

                    $sender_wallet = $sender->wallet_amount - ($request->get('amount') + $fees_amount);
                    User::where('id', $sender->id)->update(['wallet_amount' => $sender_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

                    $refrence_id = time() . rand() . $sender->id;
                    $trans = new Transaction([
                        "user_id" => Session::get('user_id'),
                        "receiver_id" => 0,
                        "amount" => $request->get('amount'),
                        "fees" => $fees_amount,
                        "currency" => $sender->currency,
                        'sender_currency' => $sender->currency,
                        'sender_fees' => $fees_amount,
                        'sender_real_value' => $request->get('amount') + $fees_amount,
                        "trans_type" => 2, //Debit-Withdraw
                        "trans_to" => 'Dafri_Wallet',
                        "trans_for" => 'Withdraw##Invite_New_User',
                        "refrence_id" => $refrence_id,
                        "billing_description" => 'IP:' . $ip . '<br>Receiver Email : ' . $receiverAccEmail,
                        "user_close_bal" => $sender_wallet,
                        "receiver_close_bal" => 0,
                        "reference_note" => $request->get('reference_note'),
                        "status" => 2,
                        "created_at" => date('Y-m-d H:i:s'),
                        "updated_at" => date('Y-m-d H:i:s'),
                    ]);
                    $trans->save();
                    $TransId = $trans->id;

                    if ($sender->user_type == "Personal") {
                        $host_fname = $sender->first_name;
                        $host_lname = $sender->last_name;
                    } else if ($sender->user_type == "Business") {
                        $host_fname = $sender->business_name;
                        $host_lname = '';
                    } else if ($sender->user_type == "Agent" && $sender->first_name == "") {
                        $host_fname = $sender->business_name;
                        $host_lname = '';
                    } else if ($sender->user_type == "Agent" && $sender->first_name != "") {
                        $host_fname = $sender->first_name;
                        $host_lname = $sender->last_name;
                    }

                    $invUsr = new InvitedUser([
                        'host_id' => Session::get('user_id'),
                        'host_fname' => $host_fname,
                        'host_lname' => $host_lname,
                        'host_email' => $sender->email,
                        'Invite_email' => $receiverAccEmail,
                        'amount' => $request->get('amount'),
                        'host_ip' => $ip,
                        'trans_id' => $TransId,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $invUsr->save();
                    $invaiteUserID = $invUsr->id;

                    //Mail Start Receiver
                    $emailId = $receiverAccEmail;

                    if ($sender->user_type == 'Personal') {
                        $userName = strtoupper($sender->first_name);
                        $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                    } else if ($sender->user_type == 'Business') {
                        $userName = strtoupper($sender->business_name);
                        $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                    } else if ($sender->user_type == 'Agent' and $sender->first_name != "") {
                        $userName = strtoupper($sender->first_name);
                        $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                    } else if ($sender->user_type == 'Agent' and $sender->business_name != "") {
                        $userName = strtoupper($sender->business_name);
                        $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                    }

                    $account_number = $emailId;

                    $mailAmount = number_format($request->get('amount'), 2, '.', ',');
                    $mailAmnt = explode(".", $mailAmount);
                    $currency = $sender->currency;
                    //$fees_amount = 0;
                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0} table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="left" style="padding: 20px 39px; display: block;"><h1 style="font-size: 18px; margin-bottom: 0;box-sizing: border-box; font-weight: 600;">Hello <br>' . $receiverAccEmail . ',</h1><p style="line-height: 27px;">DafriBank Digital is happy to confirm that the following payment was sent to you by ' . $userName . '.<br>Please open your own free <a href="' . HTTP_PATH . '/choose-account">DafriBank Account</a> to accept this funds.</p></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr><tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr> <tr><td style="padding: 40px 0" align="center">Please note that you have up to 30 days to accept the funds or it will be returned back to the sender.<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr><td align="center" style="padding-bottom: 60px;"></td></tr></table></td></tr></tbody></table>';
                    $emailSubject = "DafriBank Digital | Account has been credited with " . $currency . " " . $mailAmount;
//                    Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                    if ($request->get('sendFlag') == 'send') {


                        $detl = array();
                        $detl["payment_date"] = date("d F Y, h:i A");
                        $detl["userName"] = $userName;
                        $detl["receiverName"] = $emailId;
                        $detl["bank"] = 'DafriBank Digital LTD';
                        $detl["account_number"] = $account_number;
                        $detl["amount"] = $currency . " " . $mailAmount;
                        $detl["refrence"] = $refrence_id;
                        $detl["transId"] = $TransId;
                        $detl["reference_note"] = $request->get('reference_note');

                        view()->share(['detl' => $detl]);

                        $customPaper = array(0, 0, 720, 1440);
                        $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
//                        $pdf = PDF::loadView('fundtransferPdf');

                        $data["receiverAccEmail"] = $receiverAccEmail;
                        $data["userName"] = $userName;
                        $data["amount"] = $currency . " " . $mailAmount;
                        $data["fee_amount"] = $currency . " " . $fees_amount;
                        $data["TransId"] = $TransId;
                        $data["refrence_id"] = $refrence_id;
//                            $data["senderName"] = $senderName;
                        $data["email"] = $emailId;
                        $data["title"] = $emailSubject;
                        $data["body"] = $emailBody;
                        $data["mail_dashboard_lnk"] = $mail_dashboard_lnk;
                        $data["reference_note"] = $request->get('reference_note');
                        $data["mail_amount"] = $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1];
//                        $data["heading"] = 'Hey ' . $userName . ',';

                        Mail::send('transferMailNewUser', $data, function ($message)use ($data, $pdf, $account_number) {
                            $message->to($data["email"], $data["email"])
                                    ->subject($data["title"])
                                    ->attachData($pdf->output(), $account_number . ".pdf");
                        });
                    } else {
                        $detl = array();
                        $detl["payment_date"] = date("d F Y, h:i A");
                        $detl["userName"] = $userName;
                        $detl["receiverName"] = $emailId;
                        $detl["bank"] = 'DafriBank Digital LTD';
                        $detl["account_number"] = $account_number;
                        $detl["amount"] = $currency . " " . $mailAmount;
                        $detl["refrence"] = $refrence_id;
                        $detl["transId"] = $TransId;
                        $detl["reference_note"] = $request->get('reference_note');

                        view()->share(['detl' => $detl]);

                        $customPaper = array(0, 0, 720, 1440);
                        $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
//                        $pdf = PDF::loadView('fundtransferPdf');

                        $data["receiverAccEmail"] = $receiverAccEmail;
                        $data["userName"] = strtoupper($userName);
                        $data["amount"] = $currency . " " . $mailAmount;
                        $data["fee_amount"] = $currency . " " . $fees_amount;
                        $data["TransId"] = $TransId;
                        $data["refrence_id"] = $refrence_id;
//                            $data["senderName"] = $senderName;
                        $data["email"] = $emailId;
                        $data["title"] = $emailSubject;
                        $data["body"] = $emailBody;
                        $data["mail_dashboard_lnk"] = $mail_dashboard_lnk;
                        $data["reference_note"] = $request->get('reference_note');
                        $data["mail_amount"] = $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1];
//                        $data["heading"] = 'Hey ' . $userName . ',';

                        Mail::send('transferMailNewUser', $data, function ($message)use ($data, $pdf, $account_number) {
                            $message->to($data["email"], $data["email"])
                                    ->subject($data["title"]);
//                                    ->attachData($pdf->output(), $account_number . ".pdf");
                        });
//                        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                    }

                    //Mail End Receiver
                    //Mail Start Sender
//                    if ($request->get('sendFlag') == 'send') {
                    $emailId = $sender->email;
                    if ($sender->user_type == "Personal") {
                        $userName = strtoupper($sender->first_name);
                        $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                    } else if ($sender->user_type == "Business") {
                        $userName = strtoupper($sender->business_name);
                        $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                    } else if ($sender->user_type == "Agent" && $sender->first_name != "") {
                        $userName = strtoupper($sender->first_name);
                        $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                    } else if ($sender->user_type == "Agent" && $sender->business_name != "") {
                        $userName = strtoupper($sender->business_name);
                        $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                    }
                    //$currency = $sender->currency;

                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello, ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment to ' . $receiverAccEmail . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr><tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr><td align="center" style="padding-bottom: 60px;"></td></tr></table></td></tr></tbody></table>';
                    $emailSubject = "DafriBank Digital | Account has been debited with " . $currency . " " . $mailAmount;
//                        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                    if ($request->get('sendFlag') == 'send') {


                        $detl = array();
                        $detl["payment_date"] = date("d F Y, h:i A");
                        $detl["userName"] = $userName;
                        $detl["receiverName"] = $receiverAccEmail;
                        $detl["bank"] = 'DafriBank Digital LTD';
                        $detl["account_number"] = $account_number;
                        $detl["amount"] = $currency . " " . $mailAmount;
                        $detl["refrence"] = $refrence_id;
                        $detl["transId"] = $TransId;
                        $detl["reference_note"] = $request->get('reference_note');

                        view()->share(['detl' => $detl]);

                        $customPaper = array(0, 0, 720, 1440);
                        $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
//                        $pdf = PDF::loadView('fundtransferPdf');

                        $data["userName"] = strtoupper($userName);
                        $data["amount"] = $currency . " " . $mailAmount;
                        $data["fee_amount"] = $currency . " " . number_format($fees_amount, 2, '.', ',');
                        $data["TransId"] = $TransId;
                        $data["refrence_id"] = $refrence_id;
                        $data["receiverName"] = $receiverAccEmail;
                        $data["email"] = $emailId;
                        $data["title"] = $emailSubject;
                        $data["body"] = $emailBody;
                        $data["mail_dashboard_lnk"] = $mail_dashboard_lnk;
                        $data["reference_note"] = $request->get('reference_note');
                        $data["mail_amount"] = $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1];
//                        $data["heading"] = 'Hey ' . $userName . ',';

                        Mail::send('transferMailSender', $data, function ($message)use ($data, $pdf, $account_number) {
                            $message->to($data["email"], $data["email"])
                                    ->subject($data["title"])
                                    ->attachData($pdf->output(), $account_number . ".pdf");
                        });
//                            return $pdf->download('fundtransferPdf.pdf');
                    } else {
                        $detl = array();
                        $detl["payment_date"] = date("d F Y, h:i A");
                        $detl["userName"] = strtoupper($userName);
                        $detl["receiverName"] = $receiverAccEmail;
                        $detl["bank"] = 'DafriBank Digital LTD';
                        $detl["account_number"] = $account_number;
                        $detl["amount"] = $currency . " " . $mailAmount;
                        $detl["refrence"] = $refrence_id;
                        $detl["transId"] = $TransId;
                        $detl["reference_note"] = $request->get('reference_note');

                        view()->share(['detl' => $detl]);

                        $customPaper = array(0, 0, 720, 1440);
                        $pdf = PDF::loadView('fundtransferPdf')->setPaper($customPaper, 'portrait');
//                        $pdf = PDF::loadView('fundtransferPdf');

                        $data["userName"] = strtoupper($userName);
                        $data["amount"] = $currency . " " . $mailAmount;
                        $data["fee_amount"] = $currency . " " . number_format($fees_amount, 2, '.', ',');
                        $data["TransId"] = $TransId;
                        $data["refrence_id"] = $refrence_id;
                        $data["receiverName"] = $receiverAccEmail;
                        $data["email"] = $emailId;
                        $data["title"] = $emailSubject;
                        $data["body"] = $emailBody;
                        $data["mail_dashboard_lnk"] = $mail_dashboard_lnk;
                        $data["reference_note"] = $request->get('reference_note');
                        $data["mail_amount"] = $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1];
//                        $data["heading"] = 'Hey ' . $userName . ',';

                        Mail::send('transferMailSender', $data, function ($message)use ($data, $pdf, $account_number) {
                            $message->to($data["email"], $data["email"])
                                    ->subject($data["title"]);
//                                    ->attachData($pdf->output(), $account_number . ".pdf");
                        });
//                        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                    }
//                    }
                    ///Mail End Sender
                    $b64TransID = base64_encode($TransId);
                    $b64RefID = base64_encode($refrence_id);
                    echo "Invitaion_Done###" . $b64TransID . "###" . $b64RefID;
                    exit;
                } else {
                    echo "INVALID_ACCOUNT_EMAIL";
                    exit;
                }
            }
        } else if ($receiverAccNumber != "" && $receiverAccEmail == "") {
            $receiver = User::where('account_number', $receiverAccNumber)->first();
        } else {
            echo "INVALID_ACCOUNT_EMAIL";
            exit;
        }

        if (empty($receiver)) {

            echo "INVALID_ACCOUNT_EMAIL";
            exit;
        }

        if ($receiver->user_type == 'Personal') {
            $receiver_name = strtoupper($receiver->first_name . " " . $receiver->last_name);
        } else if ($receiver->user_type == 'Business') {
            $receiver_name = strtoupper($receiver->business_name);
        } else if ($receiver->user_type == 'Agent' and $receiver->first_name != "") {
            $receiver_name = strtoupper($receiver->first_name . " " . $receiver->last_name);
        } else if ($receiver->user_type == 'Agent' and $receiver->business_name != "") {
            $receiver_name = strtoupper($receiver->business_name);
        }

        //to calculate the sender fees for fund transfer
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $amount=$request->get('amount');
        $fees_amount=0;
        $conversion_amount=0;
        if ($recordInfo->user_type == 'Personal') {
            if ($recordInfo->account_category == "Silver") {
                $fee_name = 'W2W_SENDER';
            } else if ($recordInfo->account_category == "Gold") {
                $fee_name = 'W2W_SENDER_GOLD';
            } else if ($recordInfo->account_category == "Platinum") {
                $fee_name = 'W2W_SENDER_PLATINUM';
            } else if ($recordInfo->account_category == "Private Wealth") {
                $fee_name = 'W2W_SENDER_PRIVATE_WEALTH';
            } else {
                $fee_name = 'W2W_SENDER';
            } 
            $fees = Fee::where('fee_name', $fee_name)->first();
            $fees_amount = ($amount * $fees->fee_value) / 100; 
        }
        else if ($recordInfo->user_type == 'Business') {
            if ($recordInfo->account_category == "Gold") {
                $fee_name = 'MERCHANT_W2W_SENDER_GOLD';
            } else if ($recordInfo->account_category == "Platinum") {
                $fee_name = 'MERCHANT_W2W_SENDER_PLATINUM';
            } else if ($recordInfo->account_category == "Enterprises") {
                $fee_name = 'MERCHANT_W2W_SENDER_Enterprises';
            } else {
                $fee_name = 'MERCHANT_W2W_SENDER_GOLD';
            }
            $fees = Fee::where('fee_name', $fee_name)->first();
            $fees_amount = ($amount * $fees->fee_value) / 100;  
        }
        else{
            $fees_amount=0;
        }

        //to calculate the conversion fee
        if($recordInfo->currency!=$receiver->currency)
        {
            if ($recordInfo->user_type == 'Personal') {
                $convr_fee_name=$recordInfo->currency!="NGN" && $receiver->currency!="NGN" ? 'CONVERSION_FEE' : 'NGN_CONVERSION_FEE';
           } elseif ($recordInfo->user_type == 'Business') {
              $convr_fee_name=$recordInfo->currency!="NGN" && $receiver->currency!="NGN" ? 'MERCHANT_CONVERSION_FEE' : 'NGN_MERCHANT_CONVERSION_FEE';
           } elseif ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
                $convr_fee_name=$recordInfo->currency!="NGN" && $receiver->currency!="NGN" ? 'CONVERSION_FEE' : 'NGN_CONVERSION_FEE'; 
           } elseif ($recordInfo->user_type == 'Agent' && $recordInfo->first_name == "") {
              $convr_fee_name=$recordInfo->currency!="NGN" && $receiver->currency!="NGN" ? 'MERCHANT_CONVERSION_FEE' : 'NGN_MERCHANT_CONVERSION_FEE';
           }

           $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
           $conversion_fee = $fees_convr->fee_value;
           $conversion_amount = ($amount * $conversion_fee) / 100;
        }

        $total_fes= number_format(($fees_amount+$conversion_amount), 2, '.', ',');
       
        if (strtolower($from_Currency) == strtolower($receiver->currency)) {
            echo $receiver_name . "###" . $receiver->currency . "###0.00###" . number_format($request->get('amount'), 2, '.', ',') . "###" . $receiver->email . "###" . $receiver->account_number."###".$total_fes;
            exit;

            //false exit; 
        } else {  

            $amount = $request->get('amount');
            if ($receiver->currency == 'NGN') {
                $exchange = Ngnexchange::where('id', 1)->first();
                $to = strtolower($from_Currency);
                $var = $to . '_value';

                $val = $exchange->$var;
                $total = $val * $amount;
                echo $receiver_name . "###" . $receiver->currency . "###" . $val . "###" . $total . "###" . $receiver->email . "###" . $receiver->account_number."###".$total_fes;
                exit;
            } else if ($from_Currency == 'NGN') {
                $exchange = Ngnexchange::where('id', 2)->first();
                $to = strtolower($receiver->currency);
                $var = $to . '_value';

                $val = $exchange->$var;
                $total = $amount * $val;
                echo $receiver_name . "###" . $receiver->currency . "###" . $val . "###" . $total . "###" . $receiver->email . "###" . $receiver->account_number."###".$total_fes;
                exit;
            } else {
                $query = $from_Currency . "_" . $receiver->currency;

                $curr_req = "https://free.currconv.com/api/v7/convert?q=" . $query . "&compact=ultra&apiKey=" . $apikey;
                //echo $curr_req; exit;
                // 'https://free.currconv.com/api/v7/convert?q=INR_USD&compact=ultra&apiKey=1c5849e1679846c9ac66887bbdd4d76f'
                $json = file_get_contents($curr_req);
                $obj = json_decode($json, true);
                $val = floatval($obj[$query]);


                $total = $val * $amount;
                echo $receiver_name . "###" . $receiver->currency . "###" . $val . "###" . $total . "###" . $receiver->email . "###" . $receiver->account_number."###".$total_fes."###".$total_fes;
                exit;
            }
        }
    }

    public function checkUserExists(Request $request) {
        $accNumEmail = $request->get('accNumberEmail');
        if (!filter_var($accNumEmail, FILTER_VALIDATE_EMAIL)) {
            if (strlen($accNumEmail) < 10 || strlen($accNumEmail) > 10) {
                echo "INVALID_ACCOUNT_EMAIL";
            }
            $receiverAccNumber = $accNumEmail;
            $receiver = User::where('account_number', $receiverAccNumber)->first();
        } else {
            $receiverAccEmail = $accNumEmail;
            $receiver = User::where('email', $receiverAccEmail)->first();
        }

        if (!empty($receiver)) {
            echo true;
        } else {
            echo false;
        }
        exit;
    }

    public function withdraw() {
        $pageTitle = 'Withdraw Amount';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $accounts = Account::where('user_id', Session::get('user_id'))->get();

        $input = Input::all();

        if (!empty($input)) {
            $rules = array(
                'account' => 'required',
                'amount' => 'required|numeric|min:0.1',
            );
            $customMessages = [
                'account.required' => 'Account field can\'t be left blank',
                'amount.required' => 'Amount field can\'t be left blank',
                'amount.min' => 'Amount should be greater than 0.',
                'amount.numeric' => 'Invalid Amount! Use number only',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/withdraw');
//                return Redirect::to('auth/withdraw')->withErrors($validator)->withInput();
            } else {
                if ($recordInfo->is_kyc_done != 1 && $recordInfo->is_verify != 1) {
                    if ($input['amount'] > TRANS_LIMIT_BEFORE_KYC) {
//                        Session::flash('error_message', "You can't withdraw more than " . $recordInfo->currency . " 250, please update your KYC.");
                        Session::put('error_session_message', "You can't withdraw more than " . $recordInfo->currency . " ".TRANS_LIMIT_BEFORE_KYC.", please update your KYC.");
                        return Redirect::to('auth/fund-transfer');
                    }

                    $TotalWithdraw = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', 0)->where('trans_for', 'LIKE', 'Withdraw%')->whereIn('status', array(1, 2))->sum('amount');

                    $TotalDebitTrans = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', '!=', 0)->where('trans_type', 2)->where('status', 1)->sum('amount');

                    $ttlWithdrawAmount = $TotalWithdraw + $TotalDebitTrans;

                    if ($ttlWithdrawAmount >= TRANS_LIMIT_BEFORE_KYC) {
//                        Session::flash('error_message', "You have exceeded the maximum transaction limit, please update your KYC.");
                        Session::put('error_session_message', "You have exceeded the maximum transaction limit, please update your KYC.");
                        return Redirect::to('auth/fund-transfer');
                    }
                }

                $usrAccnt = Account::where('id', $input['account'])->first();
                if (!empty($usrAccnt)) {
                    $fees = Fee::where('fee_name', 'WITHDRAW_REQUEST_GOLD')->first();
                    $fee_amount = ($input['amount'] * $fees->fee_value) / 100;

                    //Referral Commission Code Start

                    if ($recordInfo->referral != 'na') {
                        $refrlComm = ($fee_amount * 25) / 100;
                        $refrlComm = number_format($refrlComm, 2, '.', ',');

                        $referlCode = 'refid=' . $recordInfo->referral;
                        $referrer = Referalcode::where('referal_link', $referlCode)->first();
                        if (!empty($referrer)) {
                            $refComm = new ReferralCommission([
                                'user_id' => Session::get('user_id'),
                                'referrer_id' => $referrer->user_id,
                                'amount' => $refrlComm,
                                'action' => 'WALLET_WITHDRAW',
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                            ]);
                            $refComm->save();
                        }
                    }

                    //Referral Commission Code End	

                    $trans = new Transaction([
                        "user_id" => Session::get('user_id'),
                        "receiver_id" => 0,
                        "amount" => $input['amount'],
                        "fees" => $fee_amount,
                        "currency" => $recordInfo->currency,
                        "trans_type" => 2, //Debit-Withdraw
                        "trans_to" => 'Dafri_Wallet',
                        "trans_for" => 'Withdraw##' . $input['account'],
                        "refrence_id" => 'na',
                        "billing_description" => 'na',
                        "status" => 4,
                        "created_at" => date('Y-m-d H:i:s'),
                        "updated_at" => date('Y-m-d H:i:s'),
                    ]);
                    $trans->save();
                    $TransId = $trans->id;

                    $url = "https://free.flutterwave.com/v3/transfers";
                    $header = array();
                    $header[] = 'Content-type: application/json';
                    $header[] = 'Authorization: Bearer FLWSECK_TEST-SANDBOXDEMOKEY-X';

                    if (strtolower(trim($recordInfo->country)) == 'south africa' and ($recordInfo->currency != 'EUR' and $recordInfo->currency != 'GBP')) {
                        $metaArr[] = array("first_name" => $usrAccnt->first_name, "last_name" => $usrAccnt->last_name, "email" => $usrAccnt->email, "mobile_number" => $usrAccnt->mobile);
                        $dataArr = array("account_bank" => $usrAccnt->bank_code, "account_number" => $usrAccnt->account_number, "amount" => $input['amount'], "narration" => "withdraw from DafriBank", "currency" => $recordInfo->currency, "reference" => '"' . $TransId . '"', "callback_url" => HTTP_PATH . "/auth/verifyWithdraw", "debit_currency" => $recordInfo->currency, 'meta' => $metaArr);
                        $data = json_encode($dataArr);
                    } else if (strtolower(trim($recordInfo->country)) == 'nigeria' and ($recordInfo->currency != 'EUR' and $recordInfo->currency != 'GBP')) {
                        $dataArr = array("account_bank" => $usrAccnt->bank_code, "account_number" => $usrAccnt->account_number, "amount" => $input['amount'], "narration" => "withdraw from DafriBank", "currency" => $recordInfo->currency, "reference" => '"' . $TransId . '"', "callback_url" => HTTP_PATH . "/auth/verifyWithdraw", "debit_currency" => $recordInfo->currency);
                        $data = json_encode($dataArr);
                    } else if (strtolower(trim($recordInfo->country)) == 'uganda' and ($recordInfo->currency != 'EUR' and $recordInfo->currency != 'GBP')) {
                        $beneficiary_name = $usrAccnt->first_name . " " . $usrAccnt->last_name;
                        $dataArr = array("account_bank" => $usrAccnt->bank_code, "account_number" => $usrAccnt->account_number, "amount" => $input['amount'], "narration" => "withdraw from DafriBank", "currency" => $recordInfo->currency, "reference" => '"' . $TransId . '"', "callback_url" => HTTP_PATH . "/auth/verifyWithdraw", "destination_branch_code" => $usrAccnt->branch_code, "beneficiary_name" => $beneficiary_name);
                        $data = json_encode($dataArr);
                    } else if (strtolower(trim($recordInfo->country)) == 'united states' and ($recordInfo->currency != 'EUR' and $recordInfo->currency != 'GBP')) {
                        $beneficiary_name = $usrAccnt->first_name . " " . $usrAccnt->last_name;
                        $metaArr[] = array("AccountNumber" => $usrAccnt->account_number, "RoutingNumber" => $usrAccnt->routing_number, "SwiftCode" => $usrAccnt->swift_code, "BankName" => $usrAccnt->bank_name, "BeneficiaryName" => $beneficiary_name, "BeneficiaryAddress" => $usrAccnt->address, "BeneficiaryCountry" => "US");
                        $dataArr = array("amount" => $input['amount'], "narration" => "withdraw from DafriBank", "currency" => $recordInfo->currency, "reference" => '"' . $TransId . '"', "beneficiary_name" => $beneficiary_name, "meta" => $metaArr);
                        $data = json_encode($dataArr);
                        //echo $data; exit;	
                    } else if ($recordInfo->currency == 'EUR' OR $recordInfo->currency == 'GBP') {
                        $beneficiary_name = $usrAccnt->first_name . " " . $usrAccnt->last_name;

                        $metaArr = array("AccountNumber" => $usrAccnt->account_number, "RoutingNumber" => $usrAccnt->routing_number, "SwiftCode" => $usrAccnt->swift_code, "BankName" => $usrAccnt->bank_name, "BeneficiaryName" => $beneficiary_name, "BeneficiaryCountry" => $usrAccnt->country, "PostalCode" => $usrAccnt->postal_code, "StreetNumber" => $usrAccnt->street_number, "StreetName" => $usrAccnt->street_name, "City" => $usrAccnt->city);

                        $dataArr = array("amount" => $input['amount'], "narration" => "withdraw from DafriBank", "currency" => $recordInfo->currency, "reference" => '"' . $TransId . '"', "beneficiary_name" => $beneficiary_name, "meta" => $metaArr);
                        $data = json_encode($dataArr);
                    } else if ((strtolower(trim($recordInfo->country)) != "united states" and strtolower(trim($recordInfo->country)) != "south africa" and strtolower(trim($recordInfo->country)) != "nigeria" and strtolower(trim($recordInfo->country)) != "uganda") and ($recordInfo->currency != 'EUR' OR $recordInfo->currency != 'GBP')) {
                        $beneficiary_name = $usrAccnt->first_name . " " . $usrAccnt->last_name;

                        $metaArr[] = array("AccountNumber" => $usrAccnt->account_number, "RoutingNumber" => $usrAccnt->routing_number, "SwiftCode" => $usrAccnt->swift_code, "BankName" => $usrAccnt->bank_name, "BeneficiaryName" => $beneficiary_name, "BeneficiaryAddress" => $usrAccnt->address, "BeneficiaryCountry" => $usrAccnt->country);

                        $dataArr = array("amount" => $input['amount'], "narration" => "withdraw from DafriBank", "currency" => $recordInfo->currency, "reference" => '"' . $TransId . '"', "beneficiary_name" => $beneficiary_name, "meta" => $metaArr);
                        $data = json_encode($dataArr);
                    }
                    //echo $data; exit;

                    $x = curl_init($url);
                    curl_setopt($x, CURLOPT_HTTPHEADER, $header);
                    curl_setopt($x, CURLOPT_POST, true);
                    curl_setopt($x, CURLOPT_RETURNTRANSFER, true);
                    curl_setopt($x, CURLOPT_SSL_VERIFYPEER, false);
                    curl_setopt($x, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
                    curl_setopt($x, CURLOPT_POSTFIELDS, $data);
                    $y = curl_exec($x);
                    curl_close($x);
                    $response = json_decode($y);
                    //print_r($response); exit;
                    if (trim($response->status) == 'success') {
                        $payAmt = $response->data->fee + $input['amount'] + $fee_amount;
                        $user_wallet = ($recordInfo->wallet_amount - ($response->data->fee + $input['amount'] + $fee_amount)); //Fees from PaymentGateway + amount + dafribank fees
                        User::where("id", Session::get('user_id'))->update(['wallet_amount' => $user_wallet]);

                        Transaction::where("id", $TransId)->update(["user_close_bal" => $user_wallet, "real_value" => $payAmt, "fees" => $response->data->fee, "status" => 2, "refrence_id" => $response->data->id, "billing_description" => "Fees charged by flutterwave API", "user_close_bal" => $user_wallet, "updated_at" => date('Y-m-d H:i:s')]);

                        $emailId = $recordInfo->email;
                        $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hi,</span> ' . $recordInfo->first_name . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">You have initiated the withdrawal process of amount ' . $recordInfo->currency . ' ' . $input['amount'] . ' on the added account ' . $usrAccnt->account_number . '.<br><br>The withdrawal transaction ID is ' . $TransId . '.<br><br>If this is not you, please contact administrator.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . HTTP_PATH . '/business-login" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                        $emailSubject = "DafriBank Digital | Withdraw Initiated of amount " . $recordInfo->currency . ' ' . $input['amount'];
                        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

//                        Session::flash('success_message', "Transfer is initiated, it comes with a status [ NEW ] indicating that the transfer has been queued for processing, We will update you shortly when we get response from bank.");
                        Session::put('success_session_message', "Transfer is initiated, it comes with a status [ NEW ] indicating that the transfer has been queued for processing, We will update you shortly when we get response from bank.");
                        return Redirect::to('auth/withdraw');
                    } else {
                        $error_msg = $response->message;
                        //echo "Error: ".$error_msg; exit;
                        $error_msg = str_replace("meta[0].", "", $error_msg);
//                        Session::flash('error_message', $error_msg);
                        Session::put('error_session_message', $error_msg);
                        return Redirect::to('auth/withdraw');
                    }
                    //print_r($response); exit;
                } else {
//                    Session::flash('error_message', "Unable to find account detail!");
                    Session::put('error_session_message', "Unable to find account detail!");
                    return Redirect::to('auth/add-bank-account');
                }
            }
        }


        return view('users.withdraw', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'accounts' => $accounts]);
    }

    public function addBankAccount() {
        $pageTitle = 'Add New Bank Account';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $input = Input::all();
        if (!empty($input)) {
            if (strtolower(trim($recordInfo->country)) == "south africa" and ($recordInfo->currency != 'EUR' and $recordInfo->currency != 'GBP')) {
                $rules = array(
                    'bank' => 'required',
                    'accntNumbr' => 'required',
                    'first_name' => 'required',
                    'last_name' => 'required',
                    'email' => 'required|email',
                    'mobile' => 'required',
                );
                $customMessages = [
                    'bank.required' => 'Select Bank field can\'t be left blank',
                    'accntNumbr.required' => 'Account number field can\'t be left blank',
                    'first_name.required' => 'First name field can\'t be left blank',
                    'last_name.required' => 'Last name field can\'t be left blank',
                ];
                $validator = Validator::make($input, $rules, $customMessages);
                //$validator = Validator::make($input, $rules);
                if ($validator->fails()) {
                    $messages = $validator->messages();
                    $message = implode('<br>', $messages->all());

                    Session::put('failed_session_message', $message);
                    return Redirect::to('auth/add-bank-account');
//                    return Redirect::to('auth/add-bank-account')->withErrors($validator)->withInput();
                } else {
                    $bnkArr = explode("##", $input['bank']);
                    $accnt = new Account([
                        'user_id' => Session::get('user_id'),
                        'bank_id' => $bnkArr[0],
                        'bank_code' => $bnkArr[1],
                        'bank_name' => $bnkArr[2],
                        'account_number' => $input['accntNumbr'],
                        'first_name' => $input['first_name'],
                        'last_name' => $input['last_name'],
                        'mobile' => $input['mobile'],
                        'email' => $input['email'],
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                    ]);
                    $accnt->save();
//                    Session::flash('success_message', "Bank Account Added Successfully.");
                    Session::put('success_session_message', "Bank Account Added Successfully.");
                    return Redirect::to('auth/add-bank-account');
                }
            } // SA Code End
            else if (strtolower(trim($recordInfo->country)) == "nigeria" and ($recordInfo->currency != 'EUR' and $recordInfo->currency != 'GBP')) {
                $rules = array(
                    'bank' => 'required',
                    'accntNumbr' => 'required',
                );
                $customMessages = [
                    'bank.required' => 'Select Bank field can\'t be left blank',
                    'accntNumbr.required' => 'Account number field can\'t be left blank',
                ];
                $validator = Validator::make($input, $rules, $customMessages);

                if ($validator->fails()) {
                    $messages = $validator->messages();
                    $message = implode('<br>', $messages->all());

                    Session::put('failed_session_message', $message);
                    return Redirect::to('auth/add-bank-account');
//                    return Redirect::to('auth/add-bank-account')->withErrors($validator)->withInput();
                } else {
                    $bnkArr = explode("##", $input['bank']);
                    $accnt = new Account([
                        'user_id' => Session::get('user_id'),
                        'bank_id' => $bnkArr[0],
                        'bank_code' => $bnkArr[1],
                        'bank_name' => $bnkArr[2],
                        'account_number' => $input['accntNumbr'],
                        'first_name' => 'N/A',
                        'last_name' => 'N/A',
                        'mobile' => 'N/A',
                        'email' => 'N/A',
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                    ]);
                    $accnt->save();
                    Session::put('success_session_message', "Bank Account Added Successfully.");
//                    Session::flash('success_message', "Bank Account Added Successfully.");
                    return Redirect::to('auth/add-bank-account');
                }
            } //Nigeria Code End
            else if (strtolower(trim($recordInfo->country)) == "uganda" and ($recordInfo->currency != 'EUR' and $recordInfo->currency != 'GBP')) {
                $rules = array(
                    'bank' => 'required',
                    'accntNumbr' => 'required',
                    'brnchCode' => 'required',
                    'first_name' => 'required',
                    'last_name' => 'required',
                );
                $customMessages = [
                    'bank.required' => 'Select Bank field can\'t be left blank',
                    'accntNumbr.required' => 'Account number field can\'t be left blank',
                    'brnchCode.required' => 'Branch Code field can\'t be left blank',
                    'first_name.required' => 'First name field can\'t be left blank',
                    'last_name.required' => 'Last name field can\'t be left blank',
                ];
                $validator = Validator::make($input, $rules, $customMessages);

                if ($validator->fails()) {
                    $messages = $validator->messages();
                    $message = implode('<br>', $messages->all());

                    Session::put('failed_session_message', $message);
                    return Redirect::to('auth/add-bank-account');
//                    return Redirect::to('auth/add-bank-account')->withErrors($validator)->withInput();
                } else {
                    $bnkArr = explode("##", $input['bank']);
                    $accnt = new Account([
                        'user_id' => Session::get('user_id'),
                        'bank_id' => $bnkArr[0],
                        'bank_code' => $bnkArr[1],
                        'bank_name' => $bnkArr[2],
                        'branch_code' => $input['brnchCode'],
                        'account_number' => $input['accntNumbr'],
                        'first_name' => $input['first_name'],
                        'last_name' => $input['last_name'],
                        'mobile' => 'N/A',
                        'email' => 'N/A',
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                    ]);
                    $accnt->save();
                    Session::put('success_session_message', "Bank Account Added Successfully.");
//                    Session::flash('success_message', "Bank Account Added Successfully.");
                    return Redirect::to('auth/add-bank-account');
                }
            } //Uganda Code End
            else if (strtolower(trim($recordInfo->country)) == "united states" and ($recordInfo->currency != 'EUR' and $recordInfo->currency != 'GBP')) {
                $rules = array(
                    'bank_name' => 'required',
                    'accntNumbr' => 'required',
                    'routing_number' => 'required',
                    'swift_code' => 'required',
                    'first_name' => 'required',
                    'last_name' => 'required',
                    'addrs' => 'required',
                );
                $customMessages = [
                    'bank_name.required' => 'Bank Name field can\'t be left blank',
                    'accntNumbr.required' => 'Account Number field can\'t be left blank',
                    'routing_number.required' => 'Routing Number field can\'t be left blank',
                    'swift_code.required' => 'Swift Code field can\'t be left blank',
                    'first_name.required' => 'First name field can\'t be left blank',
                    'last_name.required' => 'Last name field can\'t be left blank',
                    'addrs.required' => 'Address field can\'t be left blank',
                ];
                $validator = Validator::make($input, $rules, $customMessages);

                if ($validator->fails()) {
                    $messages = $validator->messages();
                    $message = implode('<br>', $messages->all());

                    Session::put('failed_session_message', $message);
                    return Redirect::to('auth/add-bank-account');
//                    return Redirect::to('auth/add-bank-account')->withErrors($validator)->withInput();
                } else {
                    //$bnkArr = explode("##",$input['bank']);
                    $accnt = new Account([
                        'user_id' => Session::get('user_id'),
                        'bank_id' => 0,
                        'bank_code' => 'N/A',
                        'bank_name' => $input['bank_name'],
                        'branch_code' => 'N/A',
                        'account_number' => $input['accntNumbr'],
                        'routing_number' => $input['routing_number'],
                        'swift_code' => $input['swift_code'],
                        'first_name' => $input['first_name'],
                        'last_name' => $input['last_name'],
                        'mobile' => 'N/A',
                        'email' => 'N/A',
                        'address' => $input['addrs'],
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                    ]);
                    $accnt->save();
//                    Session::flash('success_message', "Bank Account Added Successfully.");
                    Session::put('success_session_message', "Bank Account Added Successfully.");
                    return Redirect::to('auth/add-bank-account');
                }
            } //United States Code End
            else if ($recordInfo->currency == 'EUR' OR $recordInfo->currency == 'GBP') {
                $rules = array(
                    'accntNumbr' => 'required',
                    'routing_number' => 'required',
                    'swift_code' => 'required',
                    'bank_name' => 'required',
                    'first_name' => 'required',
                    'last_name' => 'required',
                    'country' => 'required',
                    'zip' => 'required',
                    'street_number' => 'required',
                    'street_name' => 'required',
                    'city' => 'required',
                );
                $customMessages = [
                    'accntNumbr.required' => 'Account Number field can\'t be left blank',
                    'routing_number.required' => 'Routing Number field can\'t be left blank',
                    'swift_code.required' => 'Swift Code field can\'t be left blank',
                    'bank_name.required' => 'Bank Name field can\'t be left blank',
                    'first_name.required' => 'First name field can\'t be left blank',
                    'last_name.required' => 'Last name field can\'t be left blank',
                    'country.required' => 'Country field can\'t be left blank',
                    'zip.required' => 'Postal Code field can\'t be left blank',
                    'street_number.required' => 'Street Number field can\'t be left blank',
                    'street_name.required' => 'Street Name field can\'t be left blank',
                    'city.required' => 'City Name field can\'t be left blank',
                ];
                $validator = Validator::make($input, $rules, $customMessages);

                if ($validator->fails()) {
                    $messages = $validator->messages();
                    $message = implode('<br>', $messages->all());

                    Session::put('failed_session_message', $message);
                    return Redirect::to('auth/add-bank-account');
//                    return Redirect::to('auth/add-bank-account')->withErrors($validator)->withInput();
                } else {
                    //$bnkArr = explode("##",$input['bank']);
                    $accnt = new Account([
                        'user_id' => Session::get('user_id'),
                        'bank_id' => 0,
                        'bank_code' => 'N/A',
                        'bank_name' => $input['bank_name'],
                        'branch_code' => 'N/A',
                        'account_number' => $input['accntNumbr'],
                        'routing_number' => $input['routing_number'],
                        'swift_code' => $input['swift_code'],
                        'first_name' => $input['first_name'],
                        'last_name' => $input['last_name'],
                        'mobile' => 'N/A',
                        'email' => 'N/A',
                        'address' => 'N/A',
                        'street_number' => $input['street_number'],
                        'street_name' => $input['street_name'],
                        'city' => $input['city'],
                        'postal_code' => $input['zip'],
                        'country' => $input['country'],
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                    ]);
                    $accnt->save();
//                    Session::flash('success_message', "Bank Account Added Successfully.");
                    Session::put('success_session_message', "Bank Account Added Successfully.");
                    return Redirect::to('auth/add-bank-account');
                }
            }//Currency = EURO OR GBP END
            else if ((strtolower(trim($recordInfo->country)) != "united states" and strtolower(trim($recordInfo->country)) != "south africa" and strtolower(trim($recordInfo->country)) != "nigeria" and strtolower(trim($recordInfo->country)) != "uganda") and ($recordInfo->currency != 'EUR' OR $recordInfo->currency != 'GBP')) {
                $rules = array(
                    'accntNumbr' => 'required',
                    'routing_number' => 'required',
                    'swift_code' => 'required',
                    'bank_name' => 'required',
                    'first_name' => 'required',
                    'last_name' => 'required',
                    'addrs' => 'required',
                    'country' => 'required',
                );
                $customMessages = [
                    'accntNumbr.required' => 'Account Number field can\'t be left blank',
                    'routing_number.required' => 'Routing Number field can\'t be left blank',
                    'swift_code.required' => 'Swift Code field can\'t be left blank',
                    'bank_name.required' => 'Bank Name field can\'t be left blank',
                    'first_name.required' => 'First name field can\'t be left blank',
                    'last_name.required' => 'Last name field can\'t be left blank',
                    'addrs.required' => 'Address field can\'t be left blank',
                    'country.required' => 'Country field can\'t be left blank',
                ];
                $validator = Validator::make($input, $rules, $customMessages);

                if ($validator->fails()) {
                    $messages = $validator->messages();
                    $message = implode('<br>', $messages->all());

                    Session::put('failed_session_message', $message);
                    return Redirect::to('auth/add-bank-account');
//                    return Redirect::to('auth/add-bank-account')->withErrors($validator)->withInput();
                } else {
                    //$bnkArr = explode("##",$input['bank']);
                    $accnt = new Account([
                        'user_id' => Session::get('user_id'),
                        'bank_id' => 0,
                        'bank_code' => 'N/A',
                        'bank_name' => $input['bank_name'],
                        'branch_code' => 'N/A',
                        'account_number' => $input['accntNumbr'],
                        'routing_number' => $input['routing_number'],
                        'swift_code' => $input['swift_code'],
                        'first_name' => $input['first_name'],
                        'last_name' => $input['last_name'],
                        'mobile' => 'N/A',
                        'email' => 'N/A',
                        'address' => $input['addrs'],
                        'street_number' => 'N/A',
                        'street_name' => 'N/A',
                        'city' => 'N/A',
                        'postal_code' => 'N/A',
                        'country' => $input['country'],
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                    ]);
                    $accnt->save();
//                    Session::flash('success_message', "Bank Account Added Successfully.");
                    Session::put('success_session_message', "Bank Account Added Successfully.");
                    return Redirect::to('auth/add-bank-account');
                }
            }
        }

        $countryArr = array("Nigeria" => "NG", "Ghana" => "GH", "Kenya" => "KE", "Uganda" => "UG", "South Africa" => "ZA", "Tanzania" => "TZ");

        if (array_key_exists(strtoupper(strtolower($recordInfo->country)), $countryArr)) {
            $userContry = $countryArr[strtoupper(strtolower($recordInfo->country))];
            $url = "https://free.flutterwave.com/v3/banks/" . $userContry;
            $header = array();
            $header[] = 'Content-type: application/json';
            $header[] = 'Authorization: Bearer FLWSECK_TEST-SANDBOXDEMOKEY-X';

            $x = curl_init($url);
            curl_setopt($x, CURLOPT_HTTPHEADER, $header);
            //curl_setopt($x, CURLOPT_POST, true);
            curl_setopt($x, CURLOPT_RETURNTRANSFER, true);
            curl_setopt($x, CURLOPT_SSL_VERIFYPEER, false);
            curl_setopt($x, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
            //curl_setopt($x, CURLOPT_POSTFIELDS, $data);
            $y = curl_exec($x);
            curl_close($x);
            $response = json_decode($y);
            //print_r($response);
            if (trim($response->status) == 'success') {
                //if (strtolower(trim($recordInfo->country)) == "south africa") {	
                $bankArr = array();
                for ($i = 0; $i < Count($response->data); $i++) {
                    $bankArr[$response->data[$i]->id . "##" . $response->data[$i]->code . "##" . $response->data[$i]->name] = $response->data[$i]->name;
                }
                /* }
                  else if (strtolower(trim($recordInfo->country)) == "nigeria")
                  {

                  } */
            } else {
//                Session::flash('error_message', "Unable to search Bank's of " . $recordInfo->country . "! Please Try after some time.");
                Session::put('error_session_message', "Unable to search Bank's of " . $recordInfo->country . "! Please Try after some time.");
                $bankArr = array();
            }
            //echo "<pre>".print_r($bankArr);
            //print_r($response); exit;
        } else {
            $bankArr = array();
        }



        return view('users.addBankAccount', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'bankArr' => $bankArr]);
    }

    public function becomeAgent() {
        $pageTitle = 'Become DafriBank Agent';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'fname' => 'required',
                'lname' => 'required',
                'country' => 'required',
                'commission' => 'required|numeric|min:0.1',
                'min_deposit' => 'required|numeric|min:0.1',
                'address' => 'required',
                'phone' => 'required|numeric',
                'payment_method' => 'required',
                //'email' => 'required|email',
                'desc' => 'required',
                'profileImg' => 'required|max:10000|mimes:jpeg,png,jpg,gif'
            );
            $customMessages = [
                'fname.required' => 'First name field can\'t be left blank',
                'lname.required' => 'Last name field can\'t be left blank',
                'country.required' => 'Country name field can\'t be left blank',
                'commission.required' => 'Commission field can\'t be left blank',
                'commission.min' => 'Commission should be greater than 0',
                'min_deposit.required' => 'Minimum Deposit field can\'t be left blank',
                'min_deposit.min' => 'Minimum Deposit should be greater than 0',
                'address.required' => 'Address field can\'t be left blank',
                'phone.required' => 'Phone number field can\'t be left blank',
                'payment_method.required' => 'Payment Method field can\'t be left blank',
                'email.required' => 'Email field can\'t be left blank',
                'email.email' => 'Invalid Email!',
                'desc.required' => 'Description field can\'t be left blank',
                'profileImg.required' => 'Profile image field can\'t be left blank',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            //$validator = Validator::make($input, $rules);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/become-bank-agent')->withInput();
//                return Redirect::to('auth/become-bank-agent')->withErrors($validator)->withInput();
            } else {
                if ($input['commission'] < 2 or $input['commission'] > 9) {
//                    Session::flash('error_message', "Commission rate should be between 2% to 9%.");
                    Session::put('error_session_message', "Commission rate should be between 2% to 9%.");
                    return Redirect::to('auth/become-bank-agent')->withInput();
                }
                $user_wallet_usd = $this->fetchCurrencyRate($recordInfo->currency, $recordInfo->wallet_amount);
                $isExists = Agent::where('user_id', Session::get('user_id'))->first();
                if (!empty($isExists)) {
//                    Session::flash('error_message', "Your request already exists. We will update you soon.");
                    Session::put('error_session_message', "Your request already exists. We will update you soon.");
                    return Redirect::to('auth/become-bank-agent')->withInput();
                } else if ($user_wallet_usd < 250) {
//                    Session::flash('error_message', "Your request not accepted as your wallet don't have sufficient balance, Wallet amount should be > USD 500.");
                    Session::put('error_session_message', "Your request not accepted as your wallet don't have sufficient balance, Wallet amount should be > USD 250.");
                    return Redirect::to('auth/become-bank-agent')->withInput();
                } else if ($recordInfo->is_kyc_done != 1) {
//                    Session::flash('error_message', "Your request not accepted as your KYC is not completed.");
                    Session::put('error_session_message', "Your request not accepted as your KYC is not completed.");
                    return Redirect::to('auth/become-bank-agent')->withInput();
                } else {
                    if (Input::hasFile('profileImg')) {
                        $file = Input::file('profileImg');
                        $uploadedFileName = $this->uploadImage($file, PROFILE_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $profile_image = $uploadedFileName;
                    } else {
                        $profile_image = 'na';
                    }
                    $input['fname'] = ucfirst(strtolower($input['fname']));
                    $input['lname'] = ucfirst(strtolower($input['lname']));
                    $agent = new Agent([
                        "id" => Session::get('user_id'),
                        "user_id" => Session::get('user_id'),
                        "first_name" => $input['fname'],
                        "last_name" => $input['lname'],
                        "country" => $input['country'],
                        "commission" => $input['commission'],
                        "min_amount" => $input['min_deposit'],
                        "address" => $input['address'],
                        "phone" => $input['phone'],
                        "email" => $recordInfo->email,
                        "payment_methods" => $input['payment_method'],
                        "description" => $input['desc'],
                        "profile_image" => $profile_image,
                        "is_approved" => 0,
                        "created_at" => date('Y-m-d H:i:s'),
                        "updated_at" => date('Y-m-d H:i:s'),
                    ]);
                    $agent->save();

//                    Session::flash('success_message', "Agent request saved successfully. We will update you soon.");
                    Session::put('success_session_message', "Agent request saved successfully. We will update you soon.");
                    return Redirect::to('auth/become-bank-agent');
                }
            }
        }

        $countrList = Country::getCountryList();

        return view('users.becomeAgent', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'countrList' => $countrList]);
    }

    public function editAgentDetails() {
        $pageTitle = 'Edit DafriBank Agent';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $input = Input::all();
        $agent = Agent::where('user_id', Session::get('user_id'))->first();
//        echo '<pre>';print_r($input);exit;
        if (!empty($input)) {
            $rules = array(
                'first_name' => 'required',
                'last_name' => 'required',
                'country' => 'required',
                'commission' => 'required|numeric|min:0.1',
                'min_amount' => 'required|numeric|min:0.1',
                'address' => 'required',
                'phone' => 'required|numeric',
                'payment_methods' => 'required',
                //'email' => 'required|email',
                'description' => 'required',
//                'profile_image' => 'max:10000|mimes:jpeg,png,jpg,gif'
            );
            $customMessages = [
                'first_name.required' => 'First name field can\'t be left blank',
                'last_name.required' => 'Last name field can\'t be left blank',
                'country.required' => 'Country name field can\'t be left blank',
                'commission.required' => 'Commission field can\'t be left blank',
                'commission.min' => 'Commission should be greater than 0.',
                'min_amount.required' => 'Minimum Deposit field can\'t be left blank',
                'min_amount.min' => 'Minimum Deposit should be greater than 0.',
                'address.required' => 'Address field can\'t be left blank',
                'phone.required' => 'Phone number field can\'t be left blank',
                'payment_methods.required' => 'Payment Method field can\'t be left blank',
                'email.required' => 'Email field can\'t be left blank',
                'email.email' => 'Invalid Email!',
                'description.required' => 'Description field can\'t be left blank',
//                'profile_image.required' => 'Profile image field can\'t be left blank',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            //$validator = Validator::make($input, $rules);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());
//                echo '<pre>';print_r($input);exit;

                Session::put('error_session_message', $message);
                return Redirect::to('auth/edit-agent-details');
//                return Redirect::to('auth/become-bank-agent')->withErrors($validator)->withInput();
            } else {
                if ($input['commission'] < 2 or $input['commission'] > 9) {
//                    Session::flash('error_message', "Commission rate should be between 2% to 9%.");
                    Session::put('error_session_message', "Commission rate should be between 2% to 9%.");
                    return Redirect::to('auth/edit-agent-details');
                }
                $user_wallet_usd = $this->fetchCurrencyRate($recordInfo->currency, $recordInfo->wallet_amount);
                $isExists = Agent::where('user_id', Session::get('user_id'))->first();
//                if (!empty($isExists)) {
////                    Session::flash('error_message', "Your request already exists. We will update you soon.");
//                    Session::put('error_session_message', "Your request already exists. We will update you soon.");
//                    return Redirect::to('auth/edit-agent-details');
//                } else 
                if ($user_wallet_usd < 250) {
//                    Session::flash('error_message', "Your request not accepted as your wallet don't have sufficient balance, Wallet amount should be > USD 500.");
                    Session::put('error_session_message', "Your request not accepted as your wallet don't have sufficient balance, Wallet amount should be > USD 250.");
                    return Redirect::to('auth/edit-agent-details');
                } else if ($recordInfo->is_kyc_done != 1) {
//                    Session::flash('error_message', "Your request not accepted as your KYC is not completed.");
                    Session::put('error_session_message', "Your request not accepted as your KYC is not completed.");
                    return Redirect::to('auth/edit-agent-details');
                } else {
                    if (Input::hasFile('profile_image')) {
                        $file = Input::file('profile_image');
                        $uploadedFileName = $this->uploadImage($file, PROFILE_FULL_UPLOAD_PATH);
                        //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                        $profile_image = $uploadedFileName;
                        $input['profile_image'] = $profile_image;
                    } else {
                        unset($input['profile_image']);
                    }

                    $input['first_name'] = ucfirst(strtolower($input['first_name']));
                    $input['last_name'] = ucfirst(strtolower($input['last_name']));
//                      echo '<pre>';print_r($input);exit;
                    $serialisedData = $this->serialiseFormData($input, 1);
                    Agent::where('id', $agent->id)->update($serialisedData);
//                     echo '<pre>';print_r($serialisedData);exit;
//                    Session::flash('success_message', "Agent request saved successfully. We will update you soon.");
                    Session::put('success_session_message', "Agent request updated successfully.");
                    return Redirect::to('auth/edit-agent-details');
                }
            }
        }

        $countrList = Country::getCountryList();

        return view('users.editAgentDetails', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'countrList' => $countrList, 'agent' => $agent]);
    }

    public function clientDeposit() {
        $pageTitle = 'Topup Dafri Bank Wallet';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        if ($recordInfo->user_type == 'Personal') {
            $senderName = strtoupper($recordInfo->first_name);
        } else if ($recordInfo->user_type == 'Business') {
            $senderName = strtoupper($recordInfo->business_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
            $senderName = strtoupper($recordInfo->first_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
            $senderName = strtoupper($recordInfo->business_name);
        }

        $currency = $recordInfo->currency;

        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'accNumbr' => 'required',
                'accEml' => 'required|email',
                'amount' => 'required|numeric|min:0.1',
                'otp' => 'required',
            );
            $customMessages = [
                'accNumbr.required' => 'Account number field can\'t be left blank',
                'accEml.required' => 'Email field can\'t be left blank',
                'accEml.email' => 'Invalid Email!',
                'amount.required' => 'Amount field can\'t be left blank',
                'amount.numeric' => 'Invalid Amount value! Use number only.',
                'amount.min' => 'Amount should be greater than 0.',
                'otp.required' => 'OTP field can\'t be left blank',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            //$validator = Validator::make($input, $rules);
            if ($validator->fails()) {
                return Redirect::to('auth/client-deposit')->withErrors($validator)->withInput();
            } else {
                $receiver = User::where('account_number', $input['accNumbr'])->where('email', $input['accEml'])->first();
                if (!empty($receiver)) {
                    $otp = Otp::where('user_id', $receiver->id)->where('otp_for', 'Agent_TOP_UP')->where('otp', $input['otp'])->where("isUsed", 0)->first();
                    if (!empty($otp)) {
                        Otp::where('id', $otp->id)->update(["isUsed" => 1, "updated_at" => date('Y-m-d H:i:s')]);
                        $amount = $input['amount'];
                        if ($recordInfo->wallet_amount >= $amount) {
                            //$sender_wallet = ($recordInfo->wallet_amount - $amount);
                            //User::where('id',Session::get('user_id'))->update(['wallet_amount'=>$sender_wallet]);

                            $agent = Agent::where("user_id", Session::get('user_id'))->first();

                            if ($input['conversn_amount'] > 0) {
                                $agent_commision = (($input['conversn_amount'] * $agent->commission) / 100);
                                //$benificry_wallet = ($recordInfo->wallet_amount + ($input['conversn_amount'] + $agent_commision));
                                $sender_wallet = ($recordInfo->wallet_amount - $amount);
                                $benificry_wallet = $sender_wallet;

                                User::where('id', $recordInfo->id)->update(['wallet_amount' => $sender_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

                                $receiverWallet = $receiver->wallet_amount + ($input['conversn_amount'] - $agent_commision);

                                $this->updateCard($receiverWallet, $receiverWallet, $user);

                                /* if ($receiver->user_type == 'Personal') {
                                  if ($receiverWallet >= 21000 and $receiverWallet <= 50000) {
                                  User::where('id', $receiver->id)->update(['account_category' => 'Gold', 'wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  $this->sendLevelChangeMail($receiver->id, 'Gold');
                                  } else if ($receiverWallet >= 50000 and $receiverWallet <= 100000) {
                                  User::where('id', $receiver->id)->update(['account_category' => 'Platinum', 'wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  $this->sendLevelChangeMail($receiver->id, 'Platinum');
                                  } else if ($receiverWallet >= 100000) {
                                  User::where('id', $receiver->id)->update(['account_category' => 'Private Wealth', 'wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  $this->sendLevelChangeMail($receiver->id, 'Private Wealth');
                                  } else {
                                  User::where('id', $receiver->id)->update(['wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  }
                                  } else if ($receiver->user_type == 'Business') {
                                  if ($receiverWallet <= 1000000) {
                                  User::where('id', $receiver->id)->update(['account_category' => 'Gold', 'wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  $this->sendLevelChangeMail($receiver->id, 'Gold');
                                  } else if ($receiverWallet > 1000000 and $receiverWallet <= 5000000) {
                                  User::where('id', $receiver->id)->update(['account_category' => 'Platinum', 'wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  $this->sendLevelChangeMail($receiver->id, 'Platinum');
                                  } else if ($receiverWallet > 5000000) {
                                  User::where('id', $receiver->id)->update(['account_category' => 'Enterprises', 'wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  $this->sendLevelChangeMail($receiver->id, 'Enterprises');
                                  } else {
                                  User::where('id', $receiver->id)->update(['wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  }
                                  } else {
                                  User::where('id', $receiver->id)->update(['wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  } */
                            } else {
                                $agent_commision = (($amount * $agent->commission) / 100);
                                // $benificry_wallet = $recordInfo->wallet_amount + ($amount+$agent_commision);
                                //User::where('id',$receiver->id)->update(['wallet_amount'=>$benificry_wallet]);
                                $sender_wallet = ($recordInfo->wallet_amount - $amount);
                                $benificry_wallet = $sender_wallet;

                                User::where('id', $recordInfo->id)->update(['wallet_amount' => $sender_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

                                $receiverWallet = $receiver->wallet_amount + ($amount - $agent_commision);

                                $this->updateCard($receiverWallet, $receiverWallet, $user);
                                /*
                                  if ($receiver->user_type == 'Personal') {
                                  if ($receiverWallet >= 21000 and $receiverWallet <= 50000) {
                                  User::where('id', $receiver->id)->update(['account_category' => 'Gold', 'wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  $this->sendLevelChangeMail($receiver->id, 'Gold');
                                  } else if ($receiverWallet >= 50000 and $receiverWallet <= 100000) {
                                  User::where('id', $receiver->id)->update(['account_category' => 'Platinum', 'wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  $this->sendLevelChangeMail($receiver->id, 'Platinum');
                                  } else if ($receiverWallet >= 100000) {
                                  User::where('id', $receiver->id)->update(['account_category' => 'Private Wealth', 'wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  $this->sendLevelChangeMail($receiver->id, 'Private Wealth');
                                  } else {
                                  User::where('id', $receiver->id)->update(['wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  }
                                  } else if ($receiver->user_type == 'Business') {
                                  if ($receiverWallet <= 1000000) {
                                  User::where('id', $receiver->id)->update(['account_category' => 'Gold', 'wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  $this->sendLevelChangeMail($receiver->id, 'Gold');
                                  } else if ($receiverWallet > 1000000 and $receiverWallet <= 5000000) {
                                  User::where('id', $receiver->id)->update(['account_category' => 'Platinum', 'wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  $this->sendLevelChangeMail($receiver->id, 'Platinum');
                                  } else if ($receiverWallet > 5000000) {
                                  User::where('id', $receiver->id)->update(['account_category' => 'Enterprises', 'wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  $this->sendLevelChangeMail($receiver->id, 'Enterprises');
                                  } else {
                                  User::where('id', $receiver->id)->update(['wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  }
                                  } else {
                                  User::where('id', $receiver->id)->update(['wallet_amount' => $receiverWallet, 'updated_at' => date('Y-m-d H:i:s')]);
                                  } */
                            }
                            $refrence_id = time() . rand() . Session::get('user_id');
                            $trans = new Transaction([
                                "user_id" => Session::get('user_id'),
                                "receiver_id" => $receiver->id,
                                "amount" => $amount,
                                "fees" => $agent_commision,
                                "currency" => $currency,
                                "trans_type" => 2,
                                "trans_to" => 'Dafri_Wallet',
                                "trans_for" => 'W2W',
                                "refrence_id" => $refrence_id,
                                "billing_description" => 'You get ' . $currency . ' ' . $amount . ' Conversion rate ' . $input['conversn_rate'] . 'x' . $amount . '=' . $input['conversn_amount'] . '##Wallet2Wallet Transfer##IP:' . $this->get_client_ip(),
                                "status" => 1,
                                "created_at" => date('Y-m-d H:i:s'),
                                "updated_at" => date('Y-m-d H:i:s'),
                            ]);
                            $trans->save();
                            $TransId = $trans->id;

                            $emailId = $receiver->email;
                            if ($receiver->user_type == 'Personal') {
                                $userName = strtoupper($receiver->first_name);
                                $receiverName = strtoupper($receiver->first_name);
                                $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                            } else if ($receiver->user_type == 'Business') {
                                $userName = strtoupper($receiver->business_name);
                                $receiverName = strtoupper($receiver->business_name);
                                $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                            } else if ($receiver->user_type == 'Agent' and $receiver->first_name != "") {
                                $userName = strtoupper($receiver->first_name);
                                $receiverName = strtoupper($receiver->first_name);
                                $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                            } else if ($receiver->user_type == 'Agent' and $receiver->business_name != "") {
                                $userName = strtoupper($receiver->business_name);
                                $receiverName = strtoupper($receiver->business_name);
                                $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                            }
                            $mailAmount = number_format($amount, 2, '.', ',');
                            $mailAmnt = explode(".", $mailAmount);

                            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment from ' . $senderName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' 0.00</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr>
                    <tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr>  <td align="center" style="padding-bottom: 60px;"><a href="#" style="border: 1px solid #C7C7C7; font-size: 18px; padding: 10px 16px; border-radius: 16px; color: #000; text-decoration: none; background: #fff">Download Receipt as PDF</a></td></tr></table></td></tr></tbody></table>';
                            $emailSubject = "DafriBank Digital | Account has been credited with " . $currency . " " . $amount;
                            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                            $notif = new Notification([
                                'user_id' => $receiver->id,
                                'notif_subj' => $emailSubject,
                                'notif_body' => $emailBody,
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s'),
                            ]);
                            $notif->save();

                            $emailId = $recordInfo->email;
                            if ($recordInfo->user_type == "Personal") {
                                $userName = strtoupper($recordInfo->first_name);
                                $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                            } else if ($recordInfo->user_type == "Business") {
                                $userName = strtoupper($recordInfo->business_name);
                                $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                            } else if ($recordInfo->user_type == "Agent" and $recordInfo->first_name != "") {
                                $userName = strtoupper($recordInfo->first_name);
                                $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                            } else if ($recordInfo->user_type == "Agent" and $recordInfo->business_name != "") {
                                $userName = strtoupper($recordInfo->business_name);
                                $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                            }
                            $fees_amount = 0;
                            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment to ' . $receiverName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr>
                    <tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr>  <td align="center" style="padding-bottom: 60px;"><a href="#" style="border: 1px solid #C7C7C7; font-size: 18px; padding: 10px 16px; border-radius: 16px; color: #000; text-decoration: none; background: #fff">Download Receipt as PDF</a></td></tr></table></td></tr></tbody></table>';
                            $emailSubject = "DafriBank Digital | Account has been debited with " . $currency . " " . $amount;
                            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                            $notif = new Notification([
                                'user_id' => $recordInfo->id,
                                'notif_subj' => $emailSubject,
                                'notif_body' => $emailBody,
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s'),
                            ]);
                            $notif->save();
                            $b64TransID = base64_encode($TransId);
                            $b64RefID = base64_encode($refrence_id);
                            return Redirect::to('auth/transfer-success/' . $b64TransID . '/' . $b64RefID);
                        } else {
                            Session::flash('error_message', "Insufficient Balance!");
                            return Redirect::to('auth/client-deposit');
                        }
                    } else {
                        Session::flash('error_message', "Invalid OTP !!");
                        return Redirect::to('auth/client-deposit');
                    }
                } else {
                    Session::flash('error_message', "Invalid Account number or Email!.");
                    return Redirect::to('auth/client-deposit');
                }
            }
        }

        $trans = Transaction::where("user_id", Session::get('user_id'))->orWhere("receiver_id", Session::get('user_id'))->orderBy("id", "DESC")->paginate(25);
        return view('users.clientDeposit', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'trans' => $trans]);
    }

    public function clientWithdraw() {
        $pageTitle = 'Withdraw Dafri Bank Wallet';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        if ($recordInfo->user_type == 'Personal') {
            $senderName = strtoupper($recordInfo->first_name);
        } else if ($recordInfo->user_type == 'Business') {
            $senderName = strtoupper($recordInfo->business_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
            $senderName = strtoupper($recordInfo->first_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
            $senderName = strtoupper($recordInfo->business_name);
        }

        $currency = $recordInfo->currency;

        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'accNumbr' => 'required',
                'accEml' => 'required|email',
                'amount' => 'required|numeric|min:0.1',
                'otp' => 'required',
            );
            $customMessages = [
                'accNumbr.required' => 'Account number field can\'t be left blank',
                'accEml.required' => 'Email field can\'t be left blank',
                'accEml.email' => 'Invalid Email!',
                'amount.required' => 'Amount field can\'t be left blank',
                'amount.numeric' => 'Invalid Amount value! Use number only.',
                'amount.min' => 'Transfer amount should be greater than 0.',
                'otp.required' => 'OTP field can\'t be left blank',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            //$validator = Validator::make($input, $rules);
            if ($validator->fails()) {
                return Redirect::to('auth/client-deposit')->withErrors($validator)->withInput();
            } else {
                $receiver = User::where('account_number', $input['accNumbr'])->where('email', $input['accEml'])->first();
                if (!empty($receiver)) {
                    $otp = Otp::where('user_id', $receiver->id)->where('otp_for', 'Agent_TOP_UP')->where('otp', $input['otp'])->first();
                    if (!empty($otp)) {
                        $amount = $input['amount'];
                        $currency = $recordInfo->currency;
                        if ($input['conversn_amount'] > 0) {
                            if ($receiver->wallet_amount > $input['conversn_amount']) {

                                $agent = Agent::where('user_id', Session::get('user_id'))->first();
                                $agent_commision = $amount * $agent->commission / 100;

                                $sender_wallet = ($recordInfo->wallet_amount + ($amount + $agent_commision));
                                User::where('id', Session::get('user_id'))->update(['wallet_amount' => $sender_wallet]);

                                $benificry_wallet = $receiver->wallet_amount - ($input['conversn_amount'] + $agent_commision);
                                User::where('id', $receiver->id)->update(['wallet_amount' => $benificry_wallet]);

                                $refrence_id = time() . rand() . Session::get('user_id');
                                $trans = new Transaction([
                                    "user_id" => Session::get('user_id'),
                                    "receiver_id" => $receiver->id,
                                    "amount" => $amount,
                                    "fees" => $agent_commision,
                                    "currency" => $currency,
                                    "trans_type" => 1,
                                    "trans_to" => 'Dafri_Wallet',
                                    "trans_for" => 'W2W',
                                    "refrence_id" => $refrence_id,
                                    "billing_description" => 'You get ' . $currency . ' ' . $amount . ' Conversion rate ' . $input['conversn_rate'] . 'x' . $amount . '=' . $input['conversn_amount'] . '##Wallet2Wallet Transfer##IP:' . $this->get_client_ip(),
                                    "status" => 1,
                                    "created_at" => date('Y-m-d H:i:s'),
                                    "updated_at" => date('Y-m-d H:i:s'),
                                ]);
                                $trans->save();
                                $TransId = $trans->id;

                                //User Mail Start
                                $emailId = $receiver->email;
                                if ($receiver->user_type == 'Personal') {
                                    $userName = strtoupper($receiver->first_name);
                                    $receiverName = strtoupper($receiver->first_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                                } else if ($receiver->user_type == 'Business') {
                                    $userName = strtoupper($receiver->business_name);
                                    $receiverName = strtoupper($receiver->business_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                                } else if ($receiver->user_type == 'Agent' and $receiver->first_name != "") {
                                    $userName = strtoupper($receiver->first_name);
                                    $receiverName = strtoupper($receiver->first_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                                } else if ($receiver->user_type == 'Agent' and $receiver->business_name != "") {
                                    $userName = strtoupper($receiver->business_name);
                                    $receiverName = strtoupper($receiver->business_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                                }

                                $mailAmount = number_format($amount, 2, '.', ',');
                                $mailAmnt = explode(".", $mailAmount);

                                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment from ' . $senderName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' 0.00</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Agent Withdraw</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr><tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr><td align="center" style="padding-bottom: 60px;"></td></tr></table></td></tr></tbody></table>';
                                $emailSubject = "DafriBank Digital | Account has been credited with " . $currency . " " . $amount;
//                                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                                $emailData['subject'] = $emailSubject;
                                $emailData['userName'] = $userName;
                                $emailData['senderName'] = $senderName;
                                $emailData['TransId'] = $TransId;
                                $emailData['currency'] = $trans->currency;
                                $emailData['mailAmount'] = $mailAmount;
                                $emailData['refrence_id'] = $refrence_id;
                                $emailData['agent_commision'] = $agent_commision;
                                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
//                               Mail::send('emails.clientWithdraw', $emailData, function ($message)use ($emailData, $emailId) {
//                                   $message->to($emailId, $emailId)
//                                           ->subject($emailData['subject']);
//                               });
                                $notif = new Notification([
                                    'user_id' => $receiver->id,
                                    'notif_subj' => $emailSubject,
                                    'notif_body' => $emailBody,
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s'),
                                ]);
                                $notif->save();

                                //User Mail End
                                //Agent Mail Start
                                $emailId = $recordInfo->email;
                                if ($recordInfo->user_type == "Personal") {
                                    $userName = strtoupper($recordInfo->first_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                                } else if ($recordInfo->user_type == "Business") {
                                    $userName = strtoupper($recordInfo->business_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                                } else if ($recordInfo->user_type == "Agent" and $recordInfo->first_name != "") {
                                    $userName = strtoupper($recordInfo->first_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                                } else if ($recordInfo->user_type == "Agent" and $recordInfo->business_name != "") {
                                    $userName = strtoupper($recordInfo->business_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                                }
                                $fees_amount = 0;
                                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment to ' . $receiverName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">DafriBank Wallet</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr>
                    <tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr><td align="center" style="padding-bottom: 60px;"></td></tr></table></td></tr></tbody></table>';
                                $emailSubject = "DafriBank Digital | Account has been debited with " . $currency . " " . $amount;
                                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                                $notif = new Notification([
                                    'user_id' => $recordInfo->id,
                                    'notif_subj' => $emailSubject,
                                    'notif_body' => $emailBody,
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s'),
                                ]);
                                $notif->save();

                                //Agent Mail End

                                $b64TransID = base64_encode($TransId);
                                $b64RefID = base64_encode($refrence_id);
                                return Redirect::to('auth/transfer-success/' . $b64TransID . '/' . $b64RefID);
                            } else {
                                Session::flash('error_message', "Insufficient Amount!.");
                                return Redirect::to('auth/client-withdraw');
                            }
                        } else {
                            if ($receiver->wallet_amount > $amount) {

                                $agent = Agent::where('user_id', Session::get('user_id'))->first();
                                $agent_commision = $amount * $agent->commission / 100;

                                $sender_wallet = ($recordInfo->wallet_amount + ($amount + $agent_commision));
                                User::where('id', Session::get('user_id'))->update(['wallet_amount' => $sender_wallet]);

                                $benificry_wallet = $receiver->wallet_amount - ($amount + $agent_commision);
                                User::where('id', $receiver->id)->update(['wallet_amount' => $benificry_wallet]);

                                $refrence_id = time() . rand() . Session::get('user_id');
                                $trans = new Transaction([
                                    "user_id" => Session::get('user_id'),
                                    "receiver_id" => $receiver->id,
                                    "amount" => $amount,
                                    "fees" => $agent_commision,
                                    "currency" => $currency,
                                    "trans_type" => 1,
                                    "trans_to" => 'Dafri_Wallet',
                                    "trans_for" => 'W2W',
                                    "refrence_id" => $refrence_id,
                                    "billing_description" => 'Wallet2Wallet Transfer##IP : ' . $this->get_client_ip(),
                                    "status" => 1,
                                    "created_at" => date('Y-m-d H:i:s'),
                                    "updated_at" => date('Y-m-d H:i:s'),
                                ]);
                                $trans->save();
                                $TransId = $trans->id;

                                //User Mail Start
                                $emailId = $receiver->email;
                                if ($receiver->user_type == 'Personal') {
                                    $userName = strtoupper($receiver->first_name);
                                    $receiverName = strtoupper($receiver->first_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                                } else if ($receiver->user_type == 'Business') {
                                    $userName = strtoupper($receiver->business_name);
                                    $receiverName = strtoupper($receiver->business_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                                } else if ($receiver->user_type == 'Agent' and $receiver->first_name != "") {
                                    $userName = strtoupper($receiver->first_name);
                                    $receiverName = strtoupper($receiver->first_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                                } else if ($receiver->user_type == 'Agent' and $receiver->business_name != "") {
                                    $userName = strtoupper($receiver->business_name);
                                    $receiverName = strtoupper($receiver->business_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                                }

                                $mailAmount = number_format($amount, 2, '.', ',');
                                $mailAmnt = explode(".", $mailAmount);

                                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment from ' . $senderName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' 0.00</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Agent Withdraw</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr><tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr>  <td align="center" style="padding-bottom: 60px;"><a href="#" style="border: 1px solid #C7C7C7; font-size: 18px; padding: 10px 16px; border-radius: 16px; color: #000; text-decoration: none; background: #fff">Download Receipt as PDF</a></td></tr></table></td></tr></tbody></table>';
                                $emailSubject = "DafriBank Digital | Account has been debited with " . $currency . " " . $amount;
                                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                                $notif = new Notification([
                                    'user_id' => $receiver->id,
                                    'notif_subj' => $emailSubject,
                                    'notif_body' => $emailBody,
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s'),
                                ]);
                                $notif->save();

                                //User Mail End
                                //Agent Mail Start
                                $emailId = $recordInfo->email;
                                if ($recordInfo->user_type == "Personal") {
                                    $userName = strtoupper($recordInfo->first_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                                } else if ($recordInfo->user_type == "Business") {
                                    $userName = strtoupper($recordInfo->business_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                                } else if ($recordInfo->user_type == "Agent" and $recordInfo->first_name != "") {
                                    $userName = strtoupper($recordInfo->first_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                                } else if ($recordInfo->user_type == "Agent" and $recordInfo->business_name != "") {
                                    $userName = strtoupper($recordInfo->business_name);
                                    $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                                }
                                $fees_amount = 0;
                                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello ' . $userName . '</h1><h6 style="font-size: 16px; color: #8E8E8E; font-weight: 500;margin-top:10px">A payment to ' . $receiverName . ' was successful.</h6></td><td align="center" style="display: block; width: 100%; padding-bottom: 36px;"><span  style="display: inline-block; font-size: 33px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);"> ' . $currency . " " . $mailAmnt[0] . '.' . $mailAmnt[1] . '</span></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><h4 style="font-size: 20px;  text-transform: uppercase; font-weight: 400;">Payment details</h4><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Amount Paid</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $mailAmount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction Fees</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $currency . ' ' . $fees_amount . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Method</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Agent Withdraw</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Transaction ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $TransId . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">Payment Reference</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 ">' . $refrence_id . '</td></tr></table></td></tr>
                    <tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date("D, F d, Y") . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . $mail_dashboard_lnk . '" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr><tr>  <td align="center" style="padding-bottom: 60px;"><a href="#" style="border: 1px solid #C7C7C7; font-size: 18px; padding: 10px 16px; border-radius: 16px; color: #000; text-decoration: none; background: #fff">Download Receipt as PDF</a></td></tr></table></td></tr></tbody></table>';
                                $emailSubject = "DafriBank Digital | Account has been credited with " . $currency . " " . $amount;
                                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                                $notif = new Notification([
                                    'user_id' => $recordInfo->id,
                                    'notif_subj' => $emailSubject,
                                    'notif_body' => $emailBody,
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s'),
                                ]);
                                $notif->save();

                                //Agent Mail End

                                $b64TransID = base64_encode($TransId);
                                $b64RefID = base64_encode($refrence_id);
                                return Redirect::to('auth/transfer-success/' . $b64TransID . '/' . $b64RefID);
                            } else {
                                Session::flash('error_message', "Insufficient Amount!.");
                                return Redirect::to('auth/client-withdraw');
                            }
                        }
                    } else {
                        Session::flash('error_message', "Invalid OTP !!");
                        return Redirect::to('auth/client-withdraw');
                    }
                } else {
                    Session::flash('error_message', "Invalid Account number or Email!.");
                    return Redirect::to('auth/client-withdraw');
                }
            }
        }
        $trans = Transaction::where("user_id", Session::get('user_id'))->orWhere("receiver_id", Session::get('user_id'))->orderBy("id", "DESC")->paginate(25);
        return view('users.clientWithdraw', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'trans' => $trans]);
    }

    public function getCurrencyRateByAccountNumber(Request $request) {
        $apikey = CURRENCY_CONVERT_API_KEY;
        $from_Currency = $request->get('from');
        $acctNumbr = $request->get('acctNumbr');
        $accEml = $request->get('accEml');
        $amount = $request->get('amount');

        $receiver = User::where("account_number", $acctNumbr)->where('email', $accEml)->first();

        if (!empty($receiver)) {
            if (strtolower($from_Currency) == strtolower($receiver->currency)) {
                echo false;
                exit;
            } else {
                $query = $from_Currency . "_" . $receiver->currency;
                $curr_req = "https://free.currconv.com/api/v7/convert?q=" . $query . "&compact=ultra&apiKey=" . $apikey;
                $json = file_get_contents($curr_req);
                $obj = json_decode($json, true);
                $val = floatval($obj[$query]);

                $amount = $request->get('amount');
                $total = $val * $amount;

                if ($receiver->user_type == 'Personal') {
                    $receiver_name = strtoupper($receiver->first_name . " " . $receiver->last_name);
                } else if ($receiver->user_type == 'Business') {
                    $receiver_name = strtoupper($receiver->business_name);
                } else if ($receiver->user_type == 'Agent' and $receiver->first_name != "") {
                    $receiver_name = strtoupper($receiver->first_name . " " . $receiver->last_name);
                } else if ($receiver->user_type == 'Agent' and $receiver->business_name != "") {
                    $receiver_name = strtoupper($receiver->business_name);
                }
                echo $receiver_name . "###" . $receiver->currency . "###" . $val . "###" . $total;
                exit;
            }
        } else {
            echo "INVALID_ACCOUNT_EMAIL";
            exit;
        }
    }

    public function sendOTP4AgentTransfer(Request $request) {
        $acctNum = $request->get('acctNum');
        $accEm = $request->get('accEm');
        $amount = $request->get('amount');

        $user = User::where('account_number', $acctNum)->where('email', $accEm)->first();

        $otp = mt_rand(100000, 999999);

        $ot = new Otp([
            "user_id" => $user->id,
            "otp_for" => 'Agent_TOP_UP',
            "otp" => $otp,
            "isUsed" => 0,
            "created_at" => date('Y-m-d H:i:s'),
            "updated_at" => date('Y-m-d H:i:s'),
        ]);
        $ot->save();

        $id = TWILIO_ID;
        $token = TWILIO_TOKEN;
        $url = "https://free.twilio.com/2010-04-01/Accounts/$id/SMS/Messages";
        $from = TWILIO_NUMBER;
        $to = $user->phone;
        $body = $otp . ' is the OTP for online txn for ' . $user->currency . ' ' . $amount . ' at DafriBank Agent. Pls dont share this OTP.';
        $data = array(
            'From' => $from,
            'To' => $to,
            'Body' => $body,
        );
        $post = http_build_query($data);
        $x = curl_init($url);
        curl_setopt($x, CURLOPT_POST, true);
        curl_setopt($x, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($x, CURLOPT_SSL_VERIFYPEER, false);
        curl_setopt($x, CURLOPT_HTTPAUTH, CURLAUTH_BASIC);
        curl_setopt($x, CURLOPT_USERPWD, "$id:$token");
        curl_setopt($x, CURLOPT_POSTFIELDS, $post);
        $y = curl_exec($x);
        curl_close($x);
        //print_r($y);
        echo 1;
        exit;
    }

    public function transactionDetail($slug) {
        $pageTitle = 'Transaction Detail';

        if ($slug) {
            $trans = Transaction::where("id", $slug)->first();
            $recordInfo = User::where('id', Session::get('user_id'))->first();

            if ($recordInfo->user_type == 'Agent') {
                $agent = Agent::where('user_id', Session::get('user_id'))->first();
                $agent_id = $agent->id;
            } else {
                $agent = false;
                $agent_id = 0;
            }

            return view('users.transactionDetail', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'trans' => $trans, 'agent_id' => $agent_id, 'login_user_id' => Session::get('user_id')]);
        }
    }

    public function listAgent(Request $request) {
        $pageTitle = "Agent's List";
        $query = new Agent();
        $query = $query->sortable();

        if ($request->has('keyword') && $request->get('keyword')) {
            $keyword = $request->get('keyword');

            $query = $query->where(function ($q) use ($keyword) {
                $q = $q->where(DB::raw("CONCAT(`first_name`, ' ', `last_name`)"), 'LIKE', "%" . $keyword . "%")->orWhere('country', 'LIKE', "%" . $keyword . "%");
            });
        }

        if ($request->session()->has('withdrawMthd6_4') && Session::get('withdrawMthd6_4') == 'agent') {
            $showWithdrawButn = true;
            $showDepositButn = false;
            Session::forget('withdrawMthd6_4');
            Session::save();
        } else if ($request->session()->has('depositMthd6_4') && Session::get('depositMthd6_4') == 'agent') {
            $showDepositButn = true;
            $showWithdrawButn = false;
            Session::forget('depositMthd6_4');
            Session::save();
        } else {
            $showWithdrawButn = true;
            $showDepositButn = true;
        }

        $agents = $query->where('is_approved', 1)->orderBy('first_name', 'ASC')->get();
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        return view('users.agentList', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'agents' => $agents, 'showWithdrawButn' => $showWithdrawButn, 'showDepositButn' => $showDepositButn]);
    }

    public function withdrawConfirm() {
        $input = Input::all();
        if (!empty($input)) {
            $remark = $input['remark'];
            Session::put('withdrw_remark', $remark);
            echo 1;
            exit;
        }
    }

    public function changePin() {
        $pageTitle = 'Change Pin';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'current_password' => 'required',
                'new_password' => 'required|min:8',
                'confirm_password' => 'required|same:new_password',
            );
            $customMessages = ['different' => 'You can not change new password same as current password.'];
            $validator = Validator::make($input, $rules, $customMessages);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/change-pin')->withInput();
//                return Redirect::to('auth/change-pin')->withErrors($validator)->withInput();
            } else {
                $old_password = $input['current_password'];
                $newpassword = $input['new_password'];
                if (!password_verify($old_password, $recordInfo->password)) {
                    Session::put('error_session_message', 'Current password is not correct.');
                    return Redirect::to('auth/change-pin');
                } else if ($old_password == $newpassword) {
                    Session::put('error_session_message', 'You can not change new password same as current password');
                    return Redirect::to('auth/change-pin');
                    exit;
                } else {
                    User::where('id', Session::get('user_id'))->update(['password' => bcrypt($input['new_password']), 'updated_at' => date('Y-m-d H:i:s')]);

                    $emailId = $recordInfo->email;
                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> Customer,</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">This is to inform you that your account password has been successfully changed by you using DafriBank\'s Digital services.<br><br>For Security, this request was received from I.P. address: ' . $this->get_client_ip() . '<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
//                    Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                    $emailSubject = "Login Password Changed";
//                    Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                    if ($recordInfo->user_type == 'Personal') {
                        $userName = strtoupper($recordInfo->first_name);
                    } else {
                        $userName = strtoupper($recordInfo->business_name);
                    }
                    $emailData['subject'] = $emailSubject;
                    $emailData['ip'] = $this->get_client_ip();
                    $emailData['userName'] = $userName;
                    Mail::send('emails.passwordTemplate', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });

                    Session::forget('user_id');
                    Session::forget('user_name');
                    Session::forget('email');
                    Session::forget('user_type');
                    Session::save();
//                Session::flash('success_message', "Pin changed successfully.");
                    Session::put('error_session_message', "Password changed successfully.");
                    if ($recordInfo->user_type == 'Personal') {

                        return Redirect::to('personal-login');
                    } else if ($recordInfo->user_type == 'Business') {
                        return Redirect::to('business-login');
                    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                        return Redirect::to('business-login');
                    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                        return Redirect::to('personal-login');
                    }
                }
            }
        }
        return view('users.changePin', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function withdrawRequest() {
        $pageTitle = 'Generate Withdraw Request';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'withdrawAmnt' => 'required|numeric|min:0.1',
            );
            $customMessages = [
                'withdrawAmnt.required' => 'Amount field can\'t be left blank',
                'withdrawAmnt.numeric' => 'Invalid Amount value! Use number only.',
                'withdrawAmnt.min' => 'Amount should be greater than 0.',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('failed_session_message', $message);
                return Redirect::to('auth/withdraw-request');
//                echo '<pre>';print_r($messages->all());exit;
//                return Redirect::to('auth/withdraw-request')->withErrors($validator)->withInput();
            } else {
                $amount = $input['withdrawAmnt'];
                $withdrawMethod = $input['radio'];

//                echo $amount;
//                echo $recordInfo->currency;
                $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);

//                echo "USD: ".$chkAmount." EUR: ".$amount; exit;
                if ($chkAmount < 10 && $withdrawMethod != "crypto") {
                    $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 10);
                    $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
//				  Session::flash('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                    Session::put('error_session_message', "You can't withdraw less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                    //Session::put('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                    return Redirect::to('auth/withdraw-request');
                }

                if ($chkAmount < 25 && $withdrawMethod == "crypto") {
                    $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 25); 
                    $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
//				  Session::flash('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                    Session::put('error_session_message', "You can't withdraw less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                    //Session::put('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                    return Redirect::to('auth/withdraw-request');
                }

                if ($amount > $recordInfo->wallet_amount) {
                    Session::put('error_session_message', "Insufficient Balance");
//				 Session::flash('error_message', "Insufficient Balance");
                    //Session::put('error_message', "Insufficient Balance");
                    //Session::save();
                    return Redirect::to('auth/withdraw-request');
                }


                if ($recordInfo->is_kyc_done != 1 || $recordInfo->is_verify != 1) {      
                    $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
                  //  echo "USD: ".$chkAmount." NDG: ".$amount; exit;
                    if ($chkAmount > TRANS_LIMIT_BEFORE_KYC) {
                        $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, TRANS_LIMIT_BEFORE_KYC);
                        $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
//				  Session::flash('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                        Session::put('error_session_message', "You can't withdraw more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please update your KYC.");
                        //Session::put('error_message', "You can't withdraw more than ".$recordInfo->currency." ".$user_currncy_250.", please update your KYC.");
                        return Redirect::to('auth/withdraw-request');
                    }    

                    $TotalWithdraw = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', 0)->where('trans_for', 'LIKE', '%Withdraw%')->whereIn('status', array(1, 2))->sum('amount');

                    $TotalDebitTrans = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', '!=', 0)->where('trans_type', 2)->where('status', 1)->sum('amount');

                    //check Inactive Amount (Agent Request and paypal Request) Calc Start
                    $TotalInactvAmnt = InactiveAmount::where('user_id', Session::get('user_id'))->sum('amount');
                    //check Inactive Amount (Agent Request and paypal Request) Calc End

                    $ttlWithdrawAmount = $TotalWithdraw + $TotalDebitTrans + $TotalInactvAmnt + $amount;
                    $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $ttlWithdrawAmount);
                    if ($chkAmount >= TRANS_LIMIT_BEFORE_KYC) {
                        $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, TRANS_LIMIT_BEFORE_KYC);
                        $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
//				  Session::flash('error_message', "You can't withdraw more than ". $recordInfo->currency ." ".$user_currncy_250.", please update your KYC.");
                        Session::put('error_session_message', "You can't withdraw more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please update your KYC.");
                        // Session::put('error_message', "You can't withdraw more than ". $recordInfo->currency ." ".$user_currncy_250.", please update your KYC.");
                        return Redirect::to('auth/withdraw-request');
                    }
                }

                $transLimitFlag = $this->checkUserTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $amount);
                $transLimitArr = explode("###", $transLimitFlag);
                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
//				 Session::flash('error_message', $transLimitArr[1]);
                    Session::put('error_session_message', $transLimitArr[1]);
                    //Session::put('error_message', $transLimitArr[1]);
                    return Redirect::to('auth/withdraw-request');
                }

                $transLimitFlag = $this->checkAgentTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $amount);

                $transLimitArr = explode("###", $transLimitFlag);
                //print_r($transLimitArr); exit;

                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
//                    Session::flash('error_message', $transLimitArr[1]);
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('auth/fund-transfer');
                }

                Session::forget('show_otp_screen');
                Session::forget('account_id');
                Session::save();

                if ($withdrawMethod == "bank_transfer") {
                    Session::put('withdrawAmnt6_4', base64_encode($amount));
                    return Redirect::to('/auth/withdraw/');
                } else if ($withdrawMethod == "debit_credit_card") {
                    return Redirect::to('/auth/comming-soon');
                    //Session::put('withdrawAmnt6_4', base64_encode($amount));
                    //return Redirect::to('/auth/withdraw/');	
                } else if ($withdrawMethod == "agent") {
                    Session::put('withdrawAmntAgnt64', base64_encode($amount));
                    Session::put('withdrawMthd6_4', 'agent');
                    Session::put('remark', $input['remark']);
                    Session::forget('depositMthd6_4');
                    return Redirect::to('/auth/agent-list');
                } else if ($withdrawMethod == "crypto") {
                    $amount_usd = $this->convertCurrency($recordInfo->currency,'USD', $amount);
                    //echo $amount_usd; die;
                    $amount_usd=explode("#",$amount_usd)[0];
                    $amount_usd = number_format($amount_usd, 5, '.', '');
                    $amount_user_currency = number_format($amount, 5, '.', '');
                    Session::put('withdrawAmntCrypUSDto64', base64_encode($amount_usd));
                    Session::put('amount_user_currency', base64_encode($amount_user_currency));
                    return Redirect::to('/auth/crypto-withdraw');
                    //return Redirect::to('/auth/comming-soon');
                } else if ($withdrawMethod == "paypal") {
                    Session::put('withdrawAmntPP64', base64_encode($amount));
                    Session::put('withdrawMthdPP', 'payPal');
                    return Redirect::to('/auth/withdraw-paypal');
                } else if ($withdrawMethod == "manual_withdraw") {
                    //echo "Ok with line 5915"; exit;
                    Session::put('withdrawAmntMW64', base64_encode($amount));
                    Session::put('withdrawMthd', 'M_W');
                    return Redirect::to('/auth/manual-withdraw');
                }
            }
        }

        return view('users.withdrawRequest', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function saveWithdrawRequest_old($agentID) {
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $amount = base64_decode(Session::get('withdrawAmntAgnt64'));

        $fees = Fee::where('fee_name', 'AGENT_WITHDRAW_REQUEST')->first();

        $withdrawFees = ($fees->fee_value * $amount) / 100;
        $withdrawFees = number_format($withdrawFees, 2, '.', '');

        if ($recordInfo->wallet_amount < ($amount + $withdrawFees)) {
            Session::put('error_session_message', "Insufficient Fund!");
            return Redirect::to('/auth/withdraw-request');
        }



        $usrWallet = ($recordInfo->wallet_amount - ($amount + $withdrawFees));
        // echo "Wallet Amount: ".$recordInfo->wallet_amount." :: Req Amount: ".$amount." :: After Calculation: ".$usrWallet; //exit;
        if (Session::has('remark')) {
            $remarkMsg = Session::get('remark');
        } else {
            $remarkMsg = 'na';
        }

        User::where('id', Session::get('user_id'))->update(['wallet_amount' => $usrWallet, 'updated_at' => date('Y-m-d H:i:s')]);

        $amount_admin_currency = $this->convertCurrency('USD', $recordInfo->currency, $withdrawFees);
        $amount_admin_currencyArr = explode("##", $amount_admin_currency);
        $admin_amount = $amount_admin_currencyArr[0];
        $admin_converstion_rate = $amount_admin_currencyArr[1];

        $adminInfo = User::where('id', 1)->first();
        $admin_wallet = ($adminInfo->wallet_amount + $admin_amount);
        User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

//        $adminInfo = User::where('id', 1)->first();
//        $admin_wallet = $adminInfo->wallet_amount + ($withdrawFees);
//        User::where('id', 1)->update(['wallet_amount' => $admin_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

        if ($recordInfo->user_type == 'Personal') {
            $user_name = strtoupper($recordInfo->first_name . " " . $recordInfo->last_name);
            $loginLnk = HTTP_PATH . '/personal-login';
        } else if ($recordInfo->user_type == 'Business') {
            $user_name = strtoupper($recordInfo->business_name);
            $loginLnk = HTTP_PATH . '/business-login';
        } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
            $user_name = strtoupper($recordInfo->first_name . " " . $recordInfo->last_name);
            $loginLnk = HTTP_PATH . '/personal-login';
        } else if ($recordInfo->user_type == 'Agent' && $recordInfo->business_name != "") {
            $user_name = strtoupper($recordInfo->business_name);
            $loginLnk = HTTP_PATH . '/business-login';
        }

        $remarkMsg1 = '';
        if ($remarkMsg != 'na') {
            $remarkMsg1 = 'Payout Instructions : ' . $remarkMsg;
        }

        $trans = new Transaction([
            "user_id" => Session::get('user_id'),
            "receiver_id" => $agentID,
            "amount" => $amount,
            "fees" => $withdrawFees,
            "currency" => $recordInfo->currency,
            "trans_type" => 2, //Debit-Withdraw
            "trans_to" => 'Dafri_Wallet',
            "trans_for" => 'Withdraw##Agent',
            "refrence_id" => 'na',
            "billing_description" => $remarkMsg1,
            "user_close_bal" => $usrWallet,
            "real_value" => ($amount + $withdrawFees),
            "status" => 2,
            "created_at" => date('Y-m-d H:i:s'),
            "updated_at" => date('Y-m-d H:i:s'),
        ]);
        $trans->save();
        $TransId = $trans->id;

        $wrq = new WithdrawRequest([
            'user_id' => Session::get('user_id'),
            'user_name' => $user_name,
            'agent_id' => $agentID,
            'amount' => $amount,
            'remark' => $remarkMsg,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s'),
        ]);
        $wrq->save();
        $withdrawReqID = $wrq->id;

        $inactvAmnt = new InactiveAmount([
            'user_id' => Session::get('user_id'),
            'withdraw_req_id' => $withdrawReqID,
            'trans_id' => $TransId,
            'amount' => $amount,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s'),
        ]);
        $inactvAmnt->save();

        //Mail start
        $emailId = $recordInfo->email;
        $userName = $user_name;

        $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your agent withdrawal request with transaction ID ' . $TransId . ' has been created successfully. Our finance team will check and get back to you soon.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . $loginLnk . '"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
        $emailSubject = 'DafriBank Digital | Agent Withdrawal Request Received';
        $agentInfo = Agent::where('id', $agentID)->first();
        $agentname = strtoupper($agentInfo->first_name . ' ' . $agentInfo->last_name);
//        echo $agentname;exit;
        $emailData['subject'] = $emailSubject;
        $emailData['emailId'] = $emailId;
        $emailData['userName'] = $userName;
        $emailData['TransId'] = $TransId;
        $emailData['amount'] = $recordInfo->currency . ' ' . number_format($amount, 2, '.', '');
        $emailData['agentname'] = $agentname;

//        echo $agentInfo;exit;
        Mail::send('emails.saveWithdrawRequest', $emailData, function ($message)use ($emailData, $emailId) {
            $message->to($emailId, $emailId)
                    ->subject($emailData['subject']);
        });

        $emailId = $agentInfo->email;
//          echo '<pre>'; print_r($emailId);exit;
        $emailSubject = 'DafriBank Digital | Agent Withdrawal Request Received';
        $user_name = strtoupper($agentInfo->first_name . " " . $agentInfo->last_name);
        $emailData['subject'] = $emailSubject;
        $emailData['emailId'] = $emailId;
        $emailData['agentname'] = $user_name;
        $emailData['TransId'] = $TransId;
        $emailData['amount'] = $recordInfo->currency . ' ' . number_format($amount, 2, '.', '');
        $emailData['remarkMsg'] = $remarkMsg;
        $emailData['userName'] = $userName;
        Mail::send('emails.saveWithdrawRequestAgent', $emailData, function ($message)use ($emailData, $emailId) {
            $message->to($emailId, $emailId)
                    ->subject($emailData['subject']);
        });
//        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
        $notif = new Notification([
            'user_id' => $recordInfo->id,
            'notif_subj' => $emailSubject,
            'notif_body' => $emailBody,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s'),
        ]);
        $notif->save();
        //Mail End

        Session::forget('remark');
        Session::forget('withdrawMthd6_4');
        Session::save();
//        Session::flash('success_message', "Request successfully sent to agent with Request ID: " . $withdrawReqID);
        Session::put('success_session_message', "Request successfully sent to agent with Request ID: " . $withdrawReqID);
        return Redirect::to('/auth/withdraw-request');
    }

    public function withdrawPaypal(Request $request) {
        $pageTitle = 'Generate Withdraw Request';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'paypal_amount' => 'required|numeric|min:0.1',
                'paypal_email' => 'required|email:filter',
            );
            $customMessages = [
                'paypal_amount.required' => 'Amount field can\'t be left blank',
                'paypal_amount.numeric' => 'Invalid Amount value! Use number only.',
                'paypal_amount.min' => 'Amount should be greater than 0.',
                'paypal_email.required' => "Paypal email field can't be left blank",
                'paypal_email.email' => "Invalid email address! Try again.",
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/withdraw-paypal');
                //                return Redirect::to('auth/withdraw-paypal')->withErrors($validator)->withInput();
            } else {
                $amount = $input['paypal_amount'];
                $email = $input['paypal_email'];

                if ($recordInfo->is_kyc_done != 1 && $recordInfo->is_verify != 1) {
                    if ($input['amount'] > TRANS_LIMIT_BEFORE_KYC) {
                        //Session::flash('error_message', "You can't withdraw more than " .$recordInfo->currency. " 250, please update your KYC.");
                        Session::put('error_session_message', "You can't withdraw more than " . $recordInfo->currency . " ".TRANS_LIMIT_BEFORE_KYC.", please update your KYC.");
                        return Redirect::to('auth/withdraw-paypal');
                    }

                    $TotalWithdraw = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', 0)->where('trans_for', 'LIKE', 'Withdraw%')->whereIn('status', array(1, 2))->sum('amount');

                    $TotalDebitTrans = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', '!=', 0)->where('trans_type', 2)->where('status', 1)->sum('amount');

                    $ttlWithdrawAmount = $TotalWithdraw + $TotalDebitTrans;

                    if ($ttlWithdrawAmount >= TRANS_LIMIT_BEFORE_KYC) {
                        //Session::flash('error_message', "You have exceeded the maximum transaction limit, please update your KYC.");
                        Session::put('error_session_message', "You have exceeded the maximum transaction limit, please update your KYC.");
                        return Redirect::to('auth/fund-transfer');
                    }
                }

                $requestExist = WithdrawRequest::where('user_id', Session::get('user_id'))->where('req_type', 'Paypal')->whereIn('status', array(0, 2))->first();
                //                    echo '<pre>';print_r($requestExist);exit;
                if ($requestExist) {
                    Session::put('error_session_message', 'Your previous withdrawal request not completed yet.');
                    return Redirect::to('auth/withdraw-paypal');
                }

                $withdraw_amount = $amount;
                if ($recordInfo->user_type == 'Personal') {

                    if ($recordInfo->account_category == "Silver") {
                        $fee_name = 'PAYPAL_FEE';
                    } else if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'PAYPAL_FEE_GOLD';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'PAYPAL_FEE_PLATINUM';
                    } else if ($recordInfo->account_category == "Private Wealth") {
                        $fee_name = 'PAYPAL_FEE_PRIVATE_WEALTH';
                    } else {
                        $fee_name = 'PAYPAL_FEE';
                    }
                    // $fee_name = 'PAYPAL_FEE';

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                } else if ($recordInfo->user_type == 'Business') {
                    if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'MERCHANT_PAYPAL_FEE';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'MERCHANT_PAYPAL_FEE_PLATINUM';
                    } else if ($recordInfo->account_category == "Enterprises") {
                        $fee_name = 'MERCHANT_PAYPAL_FEE_ENTERPRIS';
                    } else {
                        $fee_name = 'MERCHANT_PAYPAL_FEE';
                    }
                    // $fee_name = 'MERCHANT_PAYPAL_FEE';

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                } else {
                    if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                        //$fee_name = 'PAYPAL_FEE';
                        if ($recordInfo->account_category == "Silver") {
                            $fee_name = 'PAYPAL_FEE';
                        } else if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'PAYPAL_FEE_GOLD';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'PAYPAL_FEE_PLATINUM';
                        } else if ($recordInfo->account_category == "Private Wealth") {
                            $fee_name = 'PAYPAL_FEE_PRIVATE_WEALTH';
                        } else {
                            $fee_name = 'PAYPAL_FEE';
                        }


                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                        //$fee_name = 'MERCHANT_PAYPAL_FEE';
                        if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'MERCHANT_PAYPAL_FEE';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'MERCHANT_PAYPAL_FEE_PLATINUM';
                        } else if ($recordInfo->account_category == "Enterprises") {
                            $fee_name = 'MERCHANT_PAYPAL_FEE_ENTERPRIS';
                        } else {
                            $fee_name = 'MERCHANT_PAYPAL_FEE';
                        }

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                    }
                }

                $withdraw_amount_total = $withdraw_amount + $fees_amount;

                if ($recordInfo->wallet_amount < $withdraw_amount_total) {
                    Session::put('error_session_message', "Insufficient Balance.");
                    return Redirect::to('auth/withdraw-request');
                }

                $usrWallet = $recordInfo->wallet_amount - $withdraw_amount_total;
                User::where('id', Session::get('user_id'))->update(['wallet_amount' => $usrWallet]);

                $amount_admin_currency = $this->convertCurrency('USD', $recordInfo->currency, $fees_amount);
                $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                $admin_amount = $amount_admin_currencyArr[0];
                $admin_converstion_rate = $amount_admin_currencyArr[1];

                $adminInfo = User::where('id', 1)->first();
                $admin_wallet = ($adminInfo->wallet_amount + $admin_amount);
                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

//                $adminInfo = User::where('id', 1)->first();
//                $admin_wallet = ($adminInfo->wallet_amount + $fees_amount);
//                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                if ($recordInfo->user_type == 'Personal') {
                    $user_name = strtoupper($recordInfo->first_name . " " . $recordInfo->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($recordInfo->user_type == 'Business') {
                    $user_name = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
                    $user_name = strtoupper($recordInfo->first_name . " " . $recordInfo->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($recordInfo->user_type == 'Agent' && $recordInfo->business_name != "") {
                    $user_name = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                }

                $trans = new Transaction([
                    "user_id" => Session::get('user_id'),
                    "receiver_id" => 0,
                    "amount" => $withdraw_amount,
                    "fees" => $fees_amount,
                    "currency" => $recordInfo->currency,
                    "trans_type" => 2, //Debit-Withdraw
                    "trans_to" => 'Dafri_Wallet',
                    "trans_for" => 'Withdraw##Paypal',
                    "refrence_id" => 'na',
                    "billing_description" => 'na',
                    "user_close_bal" => $usrWallet,
                    "real_value" => $withdraw_amount + $fees_amount,
                    "status" => 2,
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s'),
                ]);
                $trans->save();
                $TransId = $trans->id;

                $wrq = new WithdrawRequest([
                    'req_type' => 'Paypal',
                    'user_id' => Session::get('user_id'),
                    'user_name' => $user_name,
                    'agent_id' => 0,
                    'amount' => $amount,
                    'paypal_email' => $email,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $wrq->save();
                $withdrawReqID = $wrq->id;

                $inactvAmnt = new InactiveAmount([
                    'user_id' => Session::get('user_id'),
                    'withdraw_req_id' => $withdrawReqID,
                    'trans_id' => $TransId,
                    'amount' => $amount,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $inactvAmnt->save();

                //Mail start
                $emailId = $recordInfo->email;
                $userName = $user_name;

                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your paypal request with transaction ID ' . $TransId . ' has been submitted successfully and will be processed shortly.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . $loginLnk . '"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                $emailSubject = 'DafriBank Digital | Paypal Request Received';



                $emailData['subject'] = $emailSubject;
                $emailData['emailId'] = $emailId;
                $emailData['userName'] = $userName;
                $emailData['TransId'] = $TransId;

                Mail::send('emails.savePaypalRequest', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });
                //                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                $notif = new Notification([
                    'user_id' => $recordInfo->id,
                    'notif_subj' => $emailSubject,
                    'notif_body' => $emailBody,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $notif->save();
                //Mail End
                //Session::flash('success_message', "Request successfully sent to DafriBank back office with Request ID: ".$withdrawReqID);
                //                Session::put('success_message', "Request successfully sent to DafriBank back office with Request ID: " . $withdrawReqID);
                Session::put('success_session_message', "Request successfully sent to DafriBank back office with Request ID: " . $withdrawReqID);
                return Redirect::to('/overview');
            }
        }


        if ($request->session()->has('withdrawMthdPP') && Session::get('withdrawMthdPP') == 'payPal') {
            $showPage = true;
        } else {
            //            Session::flash('error_message', "Invalid Payment Method!");
            Session::put('error_session_message', "Invalid Payment Method!");
            return Redirect::to('/auth/withdraw-request');
        }

        if ($request->session()->has('withdrawAmntPP64')) {
            $pp_withdraw_amount = Session::get('withdrawAmntPP64');
        } else {
            $pp_withdraw_amount = '0.00';
        }

        return view('users.withdrawPaypal', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'pp_withdraw_amount' => $pp_withdraw_amount]);
    }

    public function withdrawPaypal_old(Request $request) {
        $pageTitle = 'Generate Withdraw Request';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'paypal_amount' => 'required|numeric|min:0.1',
                'paypal_email' => 'required|email:filter',
            );
            $customMessages = [
                'paypal_amount.required' => 'Amount field can\'t be left blank',
                'paypal_amount.numeric' => 'Invalid Amount value! Use number only.',
                'paypal_amount.min' => 'Amount should be greater than 0.',
                'paypal_email.required' => "Paypal email field can't be left blank",
                'paypal_email.email' => "Invalid email address! Try again.",
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/withdraw-paypal');
//                return Redirect::to('auth/withdraw-paypal')->withErrors($validator)->withInput();
            } else {
                $amount = $input['paypal_amount'];
                $email = $input['paypal_email'];

                if ($recordInfo->is_kyc_done != 1 && $recordInfo->is_verify != 1) {
                    if ($input['amount'] > TRANS_LIMIT_BEFORE_KYC) {
                        //Session::flash('error_message', "You can't withdraw more than " .$recordInfo->currency. " 250, please update your KYC.");
                        Session::put('error_session_message', "You can't withdraw more than " . $recordInfo->currency . " ".TRANS_LIMIT_BEFORE_KYC.", please update your KYC.");
                        return Redirect::to('auth/withdraw-paypal');
                    }

                    $TotalWithdraw = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', 0)->where('trans_for', 'LIKE', 'Withdraw%')->whereIn('status', array(1, 2))->sum('amount');

                    $TotalDebitTrans = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', '!=', 0)->where('trans_type', 2)->where('status', 1)->sum('amount');

                    $ttlWithdrawAmount = $TotalWithdraw + $TotalDebitTrans;

                    if ($ttlWithdrawAmount >= TRANS_LIMIT_BEFORE_KYC) {
                        //Session::flash('error_message', "You have exceeded the maximum transaction limit, please update your KYC.");
                        Session::put('error_session_message', "You have exceeded the maximum transaction limit, please update your KYC.");
                        return Redirect::to('auth/fund-transfer');
                    }
                }

                $requestExist = WithdrawRequest::where('user_id', Session::get('user_id'))->whereIn('status', array(0, 2))->first();
//                    echo '<pre>';print_r($requestExist);exit;
                if ($requestExist) {
                    Session::put('error_session_message', 'Your previous withdrawal request not completed yet.');
                    return Redirect::to('auth/withdraw-paypal');
                }

                $withdraw_amount = $amount;
                if ($recordInfo->user_type == 'Personal') {
                    $fee_name = 'PAYPAL_FEE';

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                } else if ($recordInfo->user_type == 'Business') {
                    $fee_name = 'MERCHANT_PAYPAL_FEE';

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                } else {
                    if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                        $fee_name = 'PAYPAL_FEE';

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                    } else if ($user->user_type == 'Agent' and $user->business_name != "") {
                        $fee_name = 'MERCHANT_PAYPAL_FEE';

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                    }
                }

                $withdraw_amount_total = $withdraw_amount + $fees_amount;

                if ($recordInfo->wallet_amount < $withdraw_amount_total) {
                    Session::put('error_session_message', "Insufficient Balance.");
                    return Redirect::to('auth/withdraw-request');
                }

                $usrWallet = $recordInfo->wallet_amount - $withdraw_amount_total;
                User::where('id', Session::get('user_id'))->update(['wallet_amount' => $usrWallet]);

                $amount_admin_currency = $this->convertCurrency('USD', $recordInfo->currency, $fees_amount);
                $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                $admin_amount = $amount_admin_currencyArr[0];
                $admin_converstion_rate = $amount_admin_currencyArr[1];

                $adminInfo = User::where('id', 1)->first();
                $admin_wallet = ($adminInfo->wallet_amount + $admin_amount);
                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

//                $adminInfo = User::where('id', 1)->first();
//                $admin_wallet = ($adminInfo->wallet_amount + $fees_amount);
//                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                if ($recordInfo->user_type == 'Personal') {
                    $user_name = strtoupper($recordInfo->first_name . " " . $recordInfo->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($recordInfo->user_type == 'Business') {
                    $user_name = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
                    $user_name = strtoupper($recordInfo->first_name . " " . $recordInfo->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($recordInfo->user_type == 'Agent' && $recordInfo->business_name != "") {
                    $user_name = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                }

                $trans = new Transaction([
                    "user_id" => Session::get('user_id'),
                    "receiver_id" => 0,
                    "amount" => $withdraw_amount,
                    "fees" => $fees_amount,
                    "currency" => $recordInfo->currency,
                    "trans_type" => 2, //Debit-Withdraw
                    "trans_to" => 'Dafri_Wallet',
                    "trans_for" => 'Withdraw##Paypal',
                    "refrence_id" => 'na',
                    "billing_description" => 'na',
                    "user_close_bal" => $usrWallet,
                    "real_value" => $withdraw_amount + $fees_amount,
                    "status" => 2,
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s'),
                ]);
                $trans->save();
                $TransId = $trans->id;

                $wrq = new WithdrawRequest([
                    'req_type' => 'Paypal',
                    'user_id' => Session::get('user_id'),
                    'user_name' => $user_name,
                    'agent_id' => 0,
                    'amount' => $amount,
                    'paypal_email' => $email,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $wrq->save();
                $withdrawReqID = $wrq->id;

                $inactvAmnt = new InactiveAmount([
                    'user_id' => Session::get('user_id'),
                    'withdraw_req_id' => $withdrawReqID,
                    'trans_id' => $TransId,
                    'amount' => $amount,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $inactvAmnt->save();

                //Mail start
                $emailId = $recordInfo->email;
                $userName = $user_name;

                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your paypal request with transaction ID ' . $TransId . ' has been submitted successfully and will be processed shortly.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . $loginLnk . '"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                $emailSubject = 'DafriBank Digital | Paypal Request Received';



                $emailData['subject'] = $emailSubject;
                $emailData['emailId'] = $emailId;
                $emailData['userName'] = $userName;
                $emailData['TransId'] = $TransId;

                Mail::send('emails.savePaypalRequest', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });
//                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                $notif = new Notification([
                    'user_id' => $recordInfo->id,
                    'notif_subj' => $emailSubject,
                    'notif_body' => $emailBody,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $notif->save();
                //Mail End
                //Session::flash('success_message', "Request successfully sent to DafriBank back office with Request ID: ".$withdrawReqID);
//                Session::put('success_message', "Request successfully sent to DafriBank back office with Request ID: " . $withdrawReqID);
                Session::put('success_session_message', "Request successfully sent to DafriBank back office with Request ID: " . $withdrawReqID);
                return Redirect::to('/overview');
            }
        }


        if ($request->session()->has('withdrawMthdPP') && Session::get('withdrawMthdPP') == 'payPal') {
            $showPage = true;
        } else {
//            Session::flash('error_message', "Invalid Payment Method!");
            Session::put('error_session_message', "Invalid Payment Method!");
            return Redirect::to('/auth/withdraw-request');
        }

        if ($request->session()->has('withdrawAmntPP64')) {
            $pp_withdraw_amount = Session::get('withdrawAmntPP64');
        } else {
            $pp_withdraw_amount = '0.00';
        }

        return view('users.withdrawPaypal', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'pp_withdraw_amount' => $pp_withdraw_amount]);
    }

    private function convertCurrency($toCurrency, $frmCurrency, $amount,$merchant_api=null) {
           //toCurrency : sender 
           //frmCurrency : receiver 

        if ($frmCurrency == 'NGN') {
            $exchange = Ngnexchange::where('id', 1)->first();
            $to = strtolower($toCurrency);
            $var = $to . '_value';

            $val = $exchange->$var;
            $total = $val * $amount;
            return $total . "##" . $val;
        } else if ($toCurrency == 'NGN') {
            if($merchant_api=='merchant_api')
            {
                $exchange = Ngnexchange::where('id', 2)->first();
                $to = strtolower($frmCurrency);
                $var = $to . '_value';
                $val = $exchange->$var;
                $total = $amount / $val;
                return $total . "##" . $val;
            }
            else{
            $exchange = Ngnexchange::where('id', 2)->first();
            $to = strtolower($frmCurrency);
            $var = $to . '_value';
            $val = $exchange->$var;
            $total = $amount * $val;
            return $total . "##" . $val;
            }
        } else {
            $apikey = CURRENCY_CONVERT_API_KEY;
            $query = $toCurrency . "_" . $frmCurrency;
            $curr_req = "https://free.currconv.com/api/v7/convert?q=" . $query . "&compact=ultra&apiKey=" . $apikey;

            $json = file_get_contents($curr_req);
            $obj = json_decode($json, true);
            $val = floatval($obj[$query]);
            $total = $val * $amount;
            return $total . "##" . $val;
        }
    }

    public function agentWithdrawReq() {
        $pageTitle = 'Generate Withdraw Request';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $agentInfo = Agent::where('user_id', $recordInfo->id)->first();
        $wthdrwReq = WithdrawRequest::where('agent_id', $agentInfo->id)->where('req_type', 'Agent')->orderBy('id', 'DESC')->get();

        $input = Input::all();
        if (!empty($input)) {
            $id = base64_decode($input['req']);
            $req = WithdrawRequest::where('id', $id)->first();
            if (!empty($req)) {
                if ($req->user_id == Session::get('user_id')) {
//                    Session::flash('error_message', "Request Agent ID not match!");
                    Session::put('error_session_message', "Request Agent ID not match!");
                    return Redirect::to('/auth/agent-withdraw-request-list');
                }
                //Check Agent Withdraw Limit Start
                $dt = date('Y-m-d');
                $startDT = $dt . ' 00:00:00';
                $endDT = $dt . ' 23:59:59';
                $agent = Agent::where('user_id', Session::get('user_id'))->first();
                //DB::enableQueryLog();
                //$todyTransAmnt = Transaction::where('user_id',Session::get('user_id'))->orWhere('receiver_id',$agent->id)->where('trans_type',2)->whereBetween('created_at',array($startDT,$endDT))->sum('amount');
                $todyTransAmnt = DB::select("select sum(`amount`) as aggregate from `transactions` where (`user_id` = " . Session::get('user_id') . " or `receiver_id` = " . $agent->id . ") and `trans_type` = 2 and `created_at` between '" . $startDT . "' and '" . $endDT . "'");
                $todyTransAmnt = $todyTransAmnt[0]->aggregate;
                //dd(DB::getQueryLog());

                $transLimitFlag = $this->checkAgentTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $todyTransAmnt);
                $transLimitArr = explode("###", $transLimitFlag);
                //print_r($transLimitArr); exit;
                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                    //                    Session::flash('error_message', $transLimitArr[1]);
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('/auth/agent-withdraw-request-list');
                }

//                 $chkAmountUSD = $this->fetchCurrencyRate($recordInfo->currency, $todyTransAmnt);
//                 if ($chkAmountUSD > 10000) {
// //                    Session::flash('error_message', "Sorry, Your daily spending limit is over.");
//                     Session::put('error_session_message', "Sorry, Your daily spending limit is over.");
//                     return Redirect::to('/auth/agent-withdraw-request-list');
//                 }

                //Check Agent Withdraw Limit End
                //Update User and Agent Wallet Start
                $user = User::where('id', $req->user_id)->first(); //Withdraw Requester User	


                $withdrawAmount = $req->amount;
                $agent_amount = $withdrawAmount;
                $agent_converstion_rate = 1;
                if ($user->currency != $recordInfo->currency) {
                    $withdrawAmount = $req->amount;
                    $amount_agent_currency = $this->convertCurrency($user->currency, $recordInfo->currency, $withdrawAmount);
                    $amount_agent_currencyArr = explode("##", $amount_agent_currency);
                    $agent_amount = $amount_agent_currencyArr[0];
                    $agent_converstion_rate = $amount_agent_currencyArr[1];
                }

                $agentWallet = $recordInfo->wallet_amount + $agent_amount;
                User::where('id', Session::get('user_id'))->update(['wallet_amount' => $agentWallet]);

                $getTransID = InactiveAmount::where('withdraw_req_id', $id)->first();

                $agent = Agent::where('id', $req->agent_id)->first();

                //Client Fees for withdraw Start

                /* $fees = Fee::where('fee_name','AGENT_WITHDRAW_REQUEST')->first();
                  $withdrawFees = ($fees->fee_value * $withdrawAmount) / 100;
                  $withdrawFees = number_format($withdrawFees,2,'.','');
                  $user = User::where('id',$req->user_id)->first();
                  $userWallet = $user->wallet_amount - $withdrawFees;
                  User::where('id',$req->user_id)->update(['wallet_amount'=>$userWallet,"updated_at"=>date('Y-m-d H:i:s')]); */

                //Client Fees for withdraw End

                $tranDetail = Transaction::where('id', $getTransID->trans_id)->first();

                $billing_info = '';
                if ($tranDetail) {
                    $billing_info = $tranDetail->billing_description . "##Amount " . $user->currency . " " . $withdrawAmount . " and Conversion rate " . $agent_converstion_rate ." = ".$recordInfo->currency.' '.$agent_amount;
                }     

                $refrence_id = time() . rand() . $req->user_id;
                Transaction::where('id', $getTransID->trans_id)->update(["billing_description" => $billing_info, "status" => 1, 'refrence_id' => $refrence_id,'receiver_close_bal'=>$agentWallet,'sender_real_value'=>$agent_amount, 'updated_at' => DB::raw('updated_at')]);

                InactiveAmount::where('withdraw_req_id', $id)->delete();
                WithdrawRequest::where('id', $id)->delete();
                //Update User and Agent Wallet End
                //Mail To User Start
                $user = User::where('id', $req->user_id)->first();
                $agentName = strtoupper($agent->first_name . ' ' . $agent->last_name);
                if ($user->user_type == 'Personal') {
                    $user_name = strtoupper($user->first_name . ' ' . $user->last_name);
                } else if ($user->user_type == 'Business') {
                    $user_name = strtoupper($user->business_name);
                } else if ($user->user_type == 'Agent' and $user->first_name != "") {
                    $user_name = strtoupper($user->first_name . ' ' . $user->last_name);
                } else if ($user->user_type == 'Agent' and $user->business_name != "") {
                    $user_name = strtoupper($user->business_name);
                }

                $emailId = $user->email;
                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hi</span> ' . $user_name . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your withdrawal request for amount ' . $user->currency . ' ' . $withdrawAmount . ' has been accepted by agent. you can collect amount from ' . $agentName . '.<br><br>If this is not you, please contact administrator.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . HTTP_PATH . '/business-login" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                $emailSubject = "DafriBank Digital | Withdrawal request completed for amount " . $user->currency . ' ' . $withdrawAmount;
//                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                $emailData['subject'] = $emailSubject;
                $emailData['user_name'] = $user_name;
                $emailData['withdrawAmount'] = $user->currency . ' ' . $withdrawAmount;
                $emailData['agentName'] = $agentName;
//        $emailData['loginURL'] = $loginURL;

                Mail::send('emails.withdrawRequest', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });
                //Mail To User End
//                Session::flash('success_message', "Withdraw process completed successfully.");
                Session::put('success_session_message', "Withdraw process completed successfully.");
                return Redirect::to('/auth/agent-withdraw-request-list');
            }
            else{
                Session::put('error_session_message', "Withdraw request is already updated");
                return Redirect::to('/auth/agent-withdraw-request-list'); 
            }
        }

        $query = new Transaction();
        $query = $query->sortable();
        $query = $query->where("user_id", Session::get('user_id'));
        $query = $query->orWhere("receiver_id", Session::get('user_id'))->orWhere('receiver_id', $agentInfo->id);
        $trans = $query->orderBy('id', 'DESC')->paginate(3);

        return view('users.agentWithdrawReq', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'wthdrwReq' => $wthdrwReq, 'agentInfo' => $agentInfo, 'trans' => $trans]);
    }

    public function agentDeclineWithdrawRequest($id) {
        $id = base64_decode($id);

        //Update User Wallet (Return Inactive Amount) Start
        $req = WithdrawRequest::where('id', $id)->first();
        if (!empty($req)) 
        {
        $inactivAmnt = InactiveAmount::where('withdraw_req_id', $id)->first();
        $trans = Transaction::where('id', $inactivAmnt->trans_id)->first();
        $withdrawAmount = $req->amount;
        $agentuser = User::where('id', Session::get('user_id'))->first();
        $user = User::where('id', $req->user_id)->first();
        $userWallet = $user->wallet_amount + ($inactivAmnt->amount);
        User::where('id', $req->user_id)->update(['wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
        $tarns_req = Transaction::where('id', $inactivAmnt->trans_id)->first();

        // $amount_admin_currency = $this->convertCurrency($tarns_req->currency, 'USD', $tarns_req->sender_fees);
        // $amount_admin_currencyArr = explode("##", $amount_admin_currency);
        // $admin_amount = $amount_admin_currencyArr[0];
        // $adminInfo = User::where('id', 1)->first();
        // $admin_wallet = ($adminInfo->wallet_amount - $admin_amount);
        // User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);
        $trans = new Transaction([
            "user_id" => $tarns_req->user_id,
            "receiver_id" => 0,
            "amount" => $withdrawAmount,
            "fees" => 0,
            "currency" => $tarns_req->currency,
            "sender_fees" => 0,
            "sender_currency" => $tarns_req->sender_currency,
            "receiver_currency" => 'USD',
            "trans_type" => 1,
            "trans_to" => 'Dafri_Wallet',
            "trans_for" => 'Withdraw##Agent(Refund)',
            "refrence_id" => $tarns_req->id,
            "user_close_bal" => $userWallet,
            "real_value" => $withdrawAmount,
            "billing_description" => 'IP : ' . $this->get_client_ip(),
            "status" => 1,
            "created_at" => date('Y-m-d H:i:s'),
            "updated_at" => date('Y-m-d H:i:s'),
        ]);
        $trans->save();

        Transaction::where('id', $inactivAmnt->trans_id)->update(['status' => 3, 'updated_at' => DB::raw('updated_at')]);
        InactiveAmount::where('withdraw_req_id', $id)->delete();
        WithdrawRequest::where('id', $id)->delete();
        //Update User Wallet (Return Inactive Amount) End
        //Mail Start
        if ($user->user_type == 'Personal') {
            $user_name = strtoupper($user->first_name . ' ' . $user->last_name);
        } else if ($user->user_type == 'Business') {
            $user_name = strtoupper($user->business_name);
        } else if ($user->user_type == 'Agent' and $user->first_name != "") {
            $user_name = strtoupper($user->first_name . ' ' . $user->last_name);
        } else if ($user->user_type == 'Agent' and $user->business_name != "") {
            $user_name = strtoupper($user->business_name);
        }

        if ($agentuser->user_type == 'Personal') {
            $agentName = strtoupper($agentuser->first_name);
        } else if ($agentuser->user_type == 'Business') {
            $agentName = strtoupper($agentuser->business_name);
        } else if ($agentuser->user_type == 'Agent' and $agentuser->first_name != "") {
            $agentName = strtoupper($agentuser->first_name);
        } else if ($agentuser->user_type == 'Agent' and $agentuser->business_name != "") {
            $agentName = strtoupper($agentuser->business_name);
        }
        $agentInfo = Agent::where('user_id', Session::get('user_id'))->first();
        $agentName = strtoupper($agentInfo->first_name . ' ' . $agentInfo->last_name);

        $emailId = $user->email;
        $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hi</span> ' . $user_name . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your withdrawal request for amount ' . $user->currency . ' ' . $withdrawAmount . ' has been rejected by agent. Your amount (' . $user->currency . ' ' . $withdrawAmount . ') has been refunded to your account.<br><br>If this is not you, please contact administrator.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . HTTP_PATH . '/business-login" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
        $emailSubject = "DafriBank Digital | Withdrawal request Declined by agent for amount " . $user->currency . ' ' . $withdrawAmount;
//        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

        $emailData['subject'] = $emailSubject;
        $emailData['user_name'] = $user_name;
        $emailData['withdrawAmount'] = $user->currency . ' ' . $withdrawAmount;
        $emailData['agentName'] = $agentName;
//        $emailData['loginURL'] = $loginURL;

        Mail::send('emails.withdrawDeclined', $emailData, function ($message)use ($emailData, $emailId) {
            $message->to($emailId, $emailId)
                    ->subject($emailData['subject']);
        });
        //Mail End
//        Session::flash('success_message', "Withdraw request rejected successfully.");
        Session::put('success_session_message', "Withdraw request rejected successfully.");
        return Redirect::to('/auth/agent-withdraw-request-list');
    }
    else{
        Session::put('error_session_message', "Withdraw request is already updated");
        return Redirect::to('/auth/agent-withdraw-request-list'); 
    }
    }

    public function comming_soon() {
        $pageTitle = 'Comming soon';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        return view('users.comming_soon', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function crypto_deposit() {
        $pageTitle = 'Crypto Deposit';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $crypto_currency=CryptoCurrency::where('type','1')->orderBy('id','desc')->get();

        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'cryptoCurr' => 'required',
                'blckChanURL' => 'required',
            );

            $customMessages = [
                'cryptoCurr.required' => 'Crypto Currency field can\'t be left blank.',
                'blckChanURL.required' => 'Blockchain URL field can\'t be left blank.',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('failed_session_message', $message);
                return Redirect::to('auth/crypto-deposit');
//                return Redirect::to('/auth/crypto-deposit')->withErrors($validator)->withInput();
            } else {
                if ($recordInfo->user_type == 'Personal') {
                    $user_name = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($recordInfo->user_type == 'Business') {
                    $user_name = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name == "") {
                    $user_name = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
                    $user_name = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                }


                $requestExist = CryptoDeposit::where('user_id', Session::get('user_id'))->where('amount', Session::get('cryptoAmnt'))->whereIn('status', array(0, 2))->first();
            
                if ($requestExist) {
                    Session::put('error_session_message', 'Your previous same amount crypto deposit request not completed yet.');
                    return Redirect::to('auth/crypto-deposit');
                }


                $requestExistcount = CryptoDeposit::where('user_id', Session::get('user_id'))->whereIn('status', array(0, 2))->count();
           
                if ($requestExistcount >= 2) {
                    Session::put('error_session_message', 'Your previous crypto deposit request not completed yet.');
                    return Redirect::to('auth/crypto-deposit');
                }

                $trans = new Transaction([
                    "user_id" => Session::get('user_id'),
                    "receiver_id" => 0,
                    "amount" => Session::get('cryptoAmntBaseCurr'),
                    "fees" => 0,
                    "currency" => $recordInfo->currency,
                    "trans_type" => 1, //Debit-Withdraw
                    "trans_to" => 'Dafri_Wallet',
                    "trans_for" => 'CryptoDeposit',
                    "refrence_id" => 'na',
                    "billing_description" => 'na',
                    "user_close_bal"=>$recordInfo->wallet_amount,
                    "real_value" => Session::get('cryptoAmntBaseCurr'),
                    "status" => 2,
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s'),
                ]);
                $trans->save();
                $TransId = $trans->id;

                $cd = new CryptoDeposit([
                    'user_id' => Session::get('user_id'),
                    'user_name' => $user_name,
                    'trans_id' => $TransId,
                    'amount' => Session::get('cryptoAmnt'),
                    'crypto_currency' => $input['cryptoCurr'],
                    'blockchain_url' => $input['blckChanURL'],
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $cd->save();

                //Mail Start

                $TransId = $TransId;
                $emailId = $recordInfo->email;
                $userName = $user_name;

                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your Crypto Currency deposit request with transaction ID ' . $TransId . ' has been created successfully. Our finance team will check and get back to you soon.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . $loginLnk . '"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                $emailSubject = 'DafriBank Digital | Crypto Deposit Request Received';
//                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                $emailData['subject'] = $emailSubject;
                $emailData['userName'] = $user_name;
                $emailData['TransId'] = $TransId;
//                $emailData['amount_cc'] = $user->currency . ' ' . $amount_cc;
                $emailData['loginLnk'] = $loginLnk;

                Mail::send('emails.cryptoRequest', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });

                $notif = new Notification([
                    'user_id' => $recordInfo->id,
                    'notif_subj' => $emailSubject,
                    'notif_body' => $emailBody,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $notif->save();
                //Mail End

               // Session::forget('cryptoAmnt');
               // Session::forget('cryptoAmntBaseCurr');
              //  Session::save();
//                Session::flash('success_message', "Crypto Deposit Request submitted successfully and will be processed shortly.");
                Session::put('success_session_message', "Crypto Deposit Request submitted successfully and will be processed shortly.");
                return Redirect::to('auth/add-fund');
            }
        }

        return view('users.crypto_deposit', ['title' => $pageTitle, 'recordInfo' => $recordInfo,'crypto_currency'=>$crypto_currency]);
    }

    public function bank_transfer() {
        $pageTitle = 'Bank Transfer';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        return view('users.bank_transfer', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function resentOtpCrypto(Request $request) {
        if (!empty($request->has('user_id'))) {
            $otp = mt_rand(100000, 999999);
            $verifyCode = $this->encpassword($otp);
            User::where('id', $request->user_id)->update(['verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s')]);
            $recordInfo = User::where('id', $request->user_id)->first();
            if ($recordInfo->user_type == 'Personal') {
                $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
            } else if ($recordInfo->user_type == 'Business') {
                $userName = strtoupper($recordInfo->business_name);
            } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
            } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                $userName = strtoupper($recordInfo->business_name);
            }

            $emailId = $recordInfo->email;
            $userName = $userName;
            $emailSubject = "DafriBank Digital - Crypto Withdraw Requested";

            $withdraw_amount =base64_decode(Session::get('amount_user_currency'));
            $emailData['subject'] = $emailSubject;
            $emailData['userName'] = $userName;
            $emailData['otp'] = $otp;
            $emailData['category'] = $recordInfo->account_category;
            ;
            $emailData['withdraw_amount'] = $recordInfo->currency . ' ' . $withdraw_amount;
            Mail::send('emails.cryptoWithDrawOTP', $emailData, function ($message)use ($emailData, $emailId) {
                $message->to($emailId, $emailId)
                        ->subject($emailData['subject']);
            });
            echo true;
            exit;
        }
    }


    public function send_crypto_withdraw_otp() {
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $amount = base64_decode(Session::get('amount_user_currency'));
        $input = Input::all();

        Session::forget('select_crypto_options');
        Session::forget('crypto_payoutAddr');

        Session::put('select_crypto_options', $input['cryptoCurr']);
        Session::put('crypto_payoutAddr', $input['payoutAddr']);
        $otp = mt_rand(100000, 999999);
        $verifyCode = $this->encpassword($otp);
        User::where('id', Session::get('user_id'))->update(['verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s')]);
        if ($recordInfo->user_type == 'Personal') {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == 'Business') {
            $userName = strtoupper($recordInfo->business_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
            $userName = strtoupper($recordInfo->business_name);
        }
        //OTP Mail Start
        $emailId = $recordInfo->email;
        $userName = $userName;
        $withdraw_amount = $amount;
        $emailSubject = "DafriBank Digital - Crypto Withdrawal Requested";
        $emailData['subject'] = $emailSubject;
        $emailData['userName'] = $userName;
        $emailData['otp'] = $otp;
        $emailData['category'] = $recordInfo->account_category;
        $emailData['withdraw_amount'] = $recordInfo->currency . ' ' . $withdraw_amount;
        Mail::send('emails.cryptoWithDrawOTP', $emailData, function ($message)use ($emailData, $emailId) {
            $message->to($emailId, $emailId)
                    ->subject($emailData['subject']);
        });
        return Redirect::to('auth/crypto-withdraw-otp');
    }

    public function crypto_withdraw_otp() {
        $pageTitle = 'Withdraw Otp Verify';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        return view('users.crypto_withdraw_otp', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
        }

    public function crypto_withdraw() {
        $pageTitle = 'Crypto Withdraw';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $input = Input::all();

        $crypto_currency=CryptoCurrency::where('type','2')->orderBy('id','desc')->get();

        if (!empty($input)) {
            $rules = array(
                'otp_verify' => 'required',
            );
            $customMessages = [
                'otp_verify.required' => 'OTP field can\'t be left blank',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());
                Session::put('error_session_message', $message);
                return Redirect::to('auth/crypto-withdraw-otp');
            }else {

                $otp = $input['otp_verify'];
                $dateChk = date('Y-m-d H:i', strtotime('+15 minutes', strtotime($recordInfo->otp_time)));
                if (!password_verify($otp, $recordInfo->verify_code) || date('Y-m-d H:i') > $dateChk) {
                    Session::put('error_session_message', "You have entered wrong OTP code.");
                    return Redirect::to('auth/crypto-withdraw-otp');

                }

                if ($recordInfo->user_type == 'Personal') {
                    $user_name = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($recordInfo->user_type == 'Business') {
                    $user_name = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name == "") {
                    $user_name = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
                    $user_name = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                }

                $requestExist = CryptoWithdraw::where('user_id', Session::get('user_id'))->whereIn('status', array(0, 2))->first();
                //                    echo '<pre>';print_r($requestExist);exit;
                if ($requestExist) {
                    Session::put('error_session_message', 'Your previous withdrawal request not completed yet.');
                    return Redirect::to('auth/crypto-withdraw');
                }

                    //to check same amount withdrawal in 24 hours
                    $date=date('Y-m-d');
                    $requestExist_24 = Transaction::where('user_id', Session::get('user_id'))->where('amount',base64_decode(Session::get('amount_user_currency')))->where('trans_for','CryptoWithdraw')->whereDate('created_at',$date)->count();
                    if($requestExist_24 > 0)
                    {
                    Session::put('error_session_message', 'We were unable to process this request because you previously transferred identical amount in the less 24h. Please try again with a different amount.');
                    return Redirect::to('auth/withdraw-request');
                    }



                $withdraw_amount = base64_decode(Session::get('amount_user_currency'));
                if ($recordInfo->user_type == 'Personal') {
                    //$fee_name = 'CRYPTO_WITHDRAW';
                    if ($recordInfo->account_category == "Silver") {
                        $fee_name = 'CRYPTO_WITHDRAW';
                    } else if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'CRYPTO_WITHDRAW_GOLD';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'CRYPTO_WITHDRAW_PLATINUM';
                    } else if ($recordInfo->account_category == "Private Wealth") {
                        $fee_name = 'CRYPTO_WITHDRAW_PRIVATE_WEALTH';
                    } else {
                        $fee_name = 'CRYPTO_WITHDRAW';
                    }

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                } else if ($recordInfo->user_type == 'Business') {
                    //$fee_name = 'MERCHANT_CRYPTO_WITHDRAW';
                    if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'MERCHANT_CRYPTO_WITHDRAW';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'MERCHANT_CRYPTO_WITHDRAW_PLATINUM';
                    } else if ($recordInfo->account_category == "Enterprises") {
                        $fee_name = 'MERCHANT_CRYPTO_WITHDRAW_ENTERPRIS';
                    } else {
                        $fee_name = 'MERCHANT_CRYPTO_WITHDRAW';
                    }

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                } else {
                    if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                        //$fee_name = 'CRYPTO_WITHDRAW';
                        if ($recordInfo->account_category == "Silver") {
                            $fee_name = 'CRYPTO_WITHDRAW';
                        } else if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'CRYPTO_WITHDRAW_GOLD';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'CRYPTO_WITHDRAW_PLATINUM';
                        } else if ($recordInfo->account_category == "Private Wealth") {
                            $fee_name = 'CRYPTO_WITHDRAW_PRIVATE_WEALTH';
                        } else {
                            $fee_name = 'CRYPTO_WITHDRAW';
                        }

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                        //$fee_name = 'MERCHANT_CRYPTO_WITHDRAW';
                        if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'MERCHANT_CRYPTO_WITHDRAW';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'MERCHANT_CRYPTO_WITHDRAW_PLATINUM';
                        } else if ($recordInfo->account_category == "Enterprises") {
                            $fee_name = 'MERCHANT_CRYPTO_WITHDRAW_ENTERPRIS';
                        } else {
                            $fee_name = 'MERCHANT_CRYPTO_WITHDRAW';
                        }

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                    }
                }

                $withdraw_amount_total = $withdraw_amount + $fees_amount;
                if ($recordInfo->wallet_amount < $withdraw_amount_total) {
                    Session::put('error_session_message', "The amount in your account can't cover " . $recordInfo->currency . ' ' . ($fees_amount) . " fee for this transaction. Please try again with different amount.");
                    return Redirect::to('auth/withdraw-request');
                }

                $affiliate_per=0;
                $refrlComm=0;
                $total_ref=0;
                $referlCode = 'refid=' . $recordInfo->referral;
                $referrer = Referalcode::where('referal_link', $referlCode)->first();
                if ($recordInfo->referral != 'na') {
                    if($recordInfo->currency=="USD")
                    {
                      $affiliate_per = ($fees_amount * 25) / 100;
                      $refrlComm=$fees_amount-$affiliate_per;
                      $total_ref=$refrlComm;
                    }
                    else{
                        $referral_User=User::where('id',$referrer->user_id)->first(); 
                        if ($referral_User->user_type == 'Personal') {
                            $convr_fee_name_ref = 'CONVERSION_FEE';
                        } elseif ($referral_User->user_type == 'Business') {
                            $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                        } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                            $convr_fee_name_ref = 'CONVERSION_FEE';
                        } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                            $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                        }
                        $amountt = ($fees_amount * 25) / 100;
                        $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                        $conversion_feet = $fees_convr->fee_value;
                        $affiliate_per= $amountt * $conversion_feet / 100;
                        $total_ref=$amountt-$affiliate_per;
                        $total_ref_in_usd=$this->convertCurrency( $recordInfo->currency,'USD', $total_ref); 
                        $refrlComm=explode("##",$total_ref_in_usd)[0];
                    }
                  }

                $user_wallet = $recordInfo->wallet_amount - $withdraw_amount_total;
                User::where('id', $recordInfo->id)->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                // echo $withdraw_amount_total; die;
                $withdraw_amount_total = $withdraw_amount + $fees_amount+$affiliate_per-$total_ref;
                $amount_admin_currency = $this->convertCurrency($recordInfo->currency, 'USD', $withdraw_amount_total);
                $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                $admin_amount = $amount_admin_currencyArr[0];
                $admin_converstion_rate = $amount_admin_currencyArr[1];

                $adminInfo = User::where('id', 1)->first();
                $admin_wallet = ($adminInfo->wallet_amount + $admin_amount);
                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

//                $adminInfo = User::where('id', 1)->first();
//                $admin_wallet = ($adminInfo->wallet_amount + $fees_amount);
//                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);
                $trans = new Transaction([
                    "user_id" => Session::get('user_id'),
                    "receiver_id" => 0,
                    "amount" => $withdraw_amount,
                    "fees" => $fees_amount,
                    "currency" => $recordInfo->currency,
                    "sender_fees" => $fees_amount,
                    "sender_currency" => $recordInfo->currency,
                    "receiver_currency" => 'USD',
                    "trans_type" => 2,
                    "trans_to" => 'Dafri_Wallet',
                    "trans_for" => 'CryptoWithdraw',
                    "refrence_id" => 'na',
                    "user_close_bal" => $user_wallet,
                    "real_value" => $withdraw_amount_total,
                    "billing_description" => 'IP : ' . $this->get_client_ip(),
                    "status" => 2,
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s'),
                ]);
                $trans->save();
                $TransId = $trans->id;

                if (!empty($referrer)) {
                    $refComm = new ReferralCommission([ 
                        'user_id' => $recordInfo->id,
                        'referrer_id' => $referrer->user_id,
                        'amount' => $refrlComm,
                        'trans_id' => $TransId,
                        'action' => 'CRYPTO WITHDRAW',
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s')
                    ]);
                    $refComm->save();
                }

                $crypWithdrw = new CryptoWithdraw([
                    'user_id' => Session::get('user_id'),
                    'user_name' => $user_name,
                    'user_email' => $recordInfo->email,
                    'trans_id' => $TransId,
                    'amount' => base64_decode(Session::get('withdrawAmntCrypUSDto64')),
                    'crypto_currency' => Session::get('select_crypto_options'),
                    'payout_addrs' => Session::get('crypto_payoutAddr'),
                    'status' => 0,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $crypWithdrw->save();
                //Mail Start

                $emailId = $recordInfo->email;
                $userName = $user_name;

                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your Crypto Currency withdrawal request with transaction ID ' . $TransId . ' has been created successfully. Our finance team will check and get back to you soon.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . $loginLnk . '"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                $emailSubject = 'DafriBank Digital | Crypto Withdrawal Request Received';
                $emailData['subject'] = $emailSubject;
                $emailData['emailId'] = $emailId;
                $emailData['userName'] = $userName;
                $emailData['TransId'] = $TransId;

                Mail::send('emails.crypto_withdraw', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });
                //                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                $notif = new Notification([
                    'user_id' => $recordInfo->id,
                    'notif_subj' => $emailSubject,
                    'notif_body' => $emailBody,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $notif->save();
                //Mail End

                Session::forget('withdrawAmntCrypUSDto64');
                Session::forget('amount_user_currency');
                Session::save();
                //                Session::flash('success_message', "Crypto Withdraw Request Saved Successfully, Our finance team will check and get back to you soon.");
                //                Session::put('success_session_message', "Crypto Withdraw Request Saved Successfully, Our finance team will check and get back to you soon.");
                Session::put('success_session_message', "Crypto withdrawal request submitted successfully and will be processed shortly.");
                return Redirect::to('/overview');
            }
        }
        return view('users.crypto_withdraw', ['title' => $pageTitle, 'recordInfo' => $recordInfo,'crypto_currency'=>$crypto_currency]);
    }

    public function crypto_withdraw_old() {
        $pageTitle = 'Crypto Withdraw';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'cryptoCurr' => 'required',
                'payoutAddr' => 'required',
            );

            $customMessages = [
                'cryptoCurr.required' => 'Crypto Currency field can\'t be left blank.',
                'payoutAddr.required' => 'Payout URL field can\'t be left blank.',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/crypto-withdraw');
//                return Redirect::to('/auth/crypto-withdraw')->withErrors($validator)->withInput();
            } else {
                if ($recordInfo->user_type == 'Personal') {
                    $user_name = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($recordInfo->user_type == 'Business') {
                    $user_name = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name == "") {
                    $user_name = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
                    $user_name = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                }

                $requestExist = CryptoWithdraw::where('user_id', Session::get('user_id'))->whereIn('status', array(0, 2))->first();
//                    echo '<pre>';print_r($requestExist);exit;
                if ($requestExist) {
                    Session::put('error_session_message', 'Your previous withdrawal request not completed yet.');
                    return Redirect::to('auth/crypto-withdraw');
                }

                $withdraw_amount = base64_decode(Session::get('amount_user_currency'));
                if ($recordInfo->user_type == 'Personal') {
                    $fee_name = 'CRYPTO_WITHDRAW';

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                } else if ($recordInfo->user_type == 'Business') {
                    $fee_name = 'MERCHANT_CRYPTO_WITHDRAW';

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                } else {
                    if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                        $fee_name = 'CRYPTO_WITHDRAW';

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                    } else if ($user->user_type == 'Agent' and $user->business_name != "") {
                        $fee_name = 'MERCHANT_CRYPTO_WITHDRAW';

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                    }
                }

                $withdraw_amount_total = $withdraw_amount + $fees_amount;

                if ($recordInfo->wallet_amount < $withdraw_amount_total) {
                    Session::put('error_session_message', "Insufficient Balance.");
                    return Redirect::to('auth/withdraw-request');
                }

                $user_wallet = $recordInfo->wallet_amount - $withdraw_amount_total;
                User::where('id', $recordInfo->id)->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

                $amount_admin_currency = $this->convertCurrency('USD', $recordInfo->currency, $fees_amount);
                $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                $admin_amount = $amount_admin_currencyArr[0];
                $admin_converstion_rate = $amount_admin_currencyArr[1];

                $adminInfo = User::where('id', 1)->first();
                $admin_wallet = ($adminInfo->wallet_amount + $admin_amount);
                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

//                $adminInfo = User::where('id', 1)->first();
//                $admin_wallet = ($adminInfo->wallet_amount + $fees_amount);
//                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                $trans = new Transaction([
                    "user_id" => Session::get('user_id'),
                    "receiver_id" => 0,
                    "amount" => $withdraw_amount,
                    "fees" => $fees_amount,
                    "currency" => $recordInfo->currency,
                    "trans_type" => 2,
                    "trans_to" => 'Dafri_Wallet',
                    "trans_for" => 'CryptoWithdraw',
                    "refrence_id" => 'na',
                    "user_close_bal" => $user_wallet,
                    "real_value" => $withdraw_amount_total,
                    "billing_description" => 'IP : ' . $this->get_client_ip(),
                    "status" => 2,
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s'),
                ]);
                $trans->save();
                $TransId = $trans->id;

                $crypWithdrw = new CryptoWithdraw([
                    'user_id' => Session::get('user_id'),
                    'user_name' => $user_name,
                    'user_email' => $recordInfo->email,
                    'trans_id' => $TransId,
                    'amount' => base64_decode(Session::get('withdrawAmntCrypUSDto64')),
                    'crypto_currency' => $input['cryptoCurr'],
                    'payout_addrs' => $input['payoutAddr'],
                    'status' => 0,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $crypWithdrw->save();

                //Mail Start

                $emailId = $recordInfo->email;
                $userName = $user_name;

                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your Crypto Currency withdrawal request with transaction ID ' . $TransId . ' has been created successfully. Our finance team will check and get back to you soon.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . $loginLnk . '"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                $emailSubject = 'DafriBank Digital | Crypto Withdrawal Request Received';
                $emailData['subject'] = $emailSubject;
                $emailData['emailId'] = $emailId;
                $emailData['userName'] = $userName;
                $emailData['TransId'] = $TransId;

                Mail::send('emails.crypto_withdraw', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });
//                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                $notif = new Notification([
                    'user_id' => $recordInfo->id,
                    'notif_subj' => $emailSubject,
                    'notif_body' => $emailBody,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $notif->save();
                //Mail End

                Session::forget('withdrawAmntCrypUSDto64');
                Session::forget('amount_user_currency');
                Session::save();
//                Session::flash('success_message', "Crypto Withdraw Request Saved Successfully, Our finance team will check and get back to you soon.");
//                Session::put('success_session_message', "Crypto Withdraw Request Saved Successfully, Our finance team will check and get back to you soon.");
                Session::put('success_session_message', "Crypto withdrawal request submitted successfully and will be processed shortly.");
                return Redirect::to('/overview');
            }
        }
        return view('users.crypto_withdraw', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function help() {
        $pageTitle = 'Help';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $input = Input::all();
        if (!empty($input)) {
            $rules = array(
                'fbDesc' => 'required',
                'fbFname' => 'required',
                'fbLname' => 'required',
                'fbEmail' => 'required|email:filter',
            );
            $customMessages = [
                'fbDesc.required' => 'Help Description field can\'t be left blank',
                'fbFname.required' => 'First name field can\'t be left blank',
                'fbLname.required' => 'Last name field can\'t be left blank',
                'fbEmail.required' => 'Email field can\'t be left blank',
                'fbEmail.email' => 'Invalid Email',
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            //$validator = Validator::make($input, $rules);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/help')->withInput(Input::except('password'));
//                return Redirect::to('auth/help')->withErrors($validator)->withInput(Input::except('password'));
            } else {
                $support = new Contact([
                    'user_id' => Session::get('user_id'),
                    'support_txt' => $input['fbDesc'],
                    'first_name' => $input['fbFname'],
                    'last_name' => $input['fbLname'],
                    'email' => $input['fbEmail'],
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $support->save();
                $TicketID = $support->id;

                $emailId = 'hello@dafribank.com'; //hello@dafribank.com;
                $fbDesc = nl2br($input['fbDesc']);
                $fbDesc = trim($fbDesc);

                $emailBody = '<!DOCTYPE html><html><head><title>Help</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><!-- START HEADER/BANNER --><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 800px; margin: 0 auto; background: #fff;border-radius: 40px; padding: 30px 0;"><tr><td align="center" style="padding: 0 0 20px; display: block; width: 100%"><h1 style="font-size: 25px; margin-bottom: 0; font-weight: 500;">Hello, DafriTechnologies LTD</h1></td></tr><tr><td style="display: block; width: 100%; border-spacing: 0px !important; "><img src="' . HTTP_PATH . '/public/img/divider-mail.png" style="width: 100%"></td></tr><tr><td style="width: 100%; display: block; padding: 0 40px; box-sizing: border-box;"><table width="100%"><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 " width="30%">Ticket ID</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 " width="70%"> DBS-' . $TicketID . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 " width="30%">First Name</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 " width="70%">' . $input['fbFname'] . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 "width="30%">Last Name </td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 "width="70%">' . $input['fbLname'] . '</td></tr><tr><td align="left" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 "width="30%">Email</td><td align="right" style="padding: 15px 0;border-bottom: 1px solid #C7C7C7 "width="70%">' . $input['fbEmail'] . '</td></tr><tr style="width: 100%;"><td align="left" style="padding: 15px 0;"width="100%">Description</td></tr><tr style="width: 100%;"><td align="left" style="" width="100%" colspan="2"><p style="margin: 0; font-size: 14px; line-height: 27px;">' . $fbDesc . '</p></td></tr><tr></tr></table></td></tr><tr><td align="center" style="width: 100%; display: block;  font-size: 20px; padding: 40px 0 0">' . date('l, M d, Y') . '</td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E ">Have questions or help ? Call 011 568 5053 or visit our <a href="#" style="color: #1381D0; text-decoration: none;"> FAQ </a> page.</p></td></tr></table></td></tr></tbody> </table>';
//			  echo '<pre>';print_r($emailBody);exit;			  
                $emailSubject = 'Help Center | DafriBank Digital';
                $emailData['subject'] = $emailSubject;
                $emailData['TicketID'] = $TicketID;
                $emailData['fbFname'] = strtoupper($support->first_name);
                $emailData['fbLname'] = strtoupper($support->last_name);
                $emailData['fbType'] = $support->support_type;
                $emailData['fbEmail'] = $support->email;
                $emailData['fbDesc'] = $support->support_txt;

                Mail::send('emails.help2', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });
//                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                //Sender Email Start
                $emailId = $recordInfo->email;
                if ($recordInfo->first_name != "") {
                    $user_name = strtoupper($recordInfo->first_name);
                } else {
                    $user_name = strtoupper($recordInfo->business_name);
                }

                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Dear</span> ' . $user_name . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Thank you for getting in touch!<br><br>Please note ticket ID ' . $TicketID . ' for future reference. Have a great day!<br><br>For Security, this request was received from I.P. address: ' . $this->get_client_ip() . '<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards, <br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr> </tbody></table></body></html>';

                $emailSubject = 'Help Center | DafriBank Digital';
                $emailData['subject'] = $emailSubject;
                $emailData['emailId'] = $emailId;
                $emailData['user_name'] = $user_name;
                $emailData['TicketID'] = $TicketID;
                $emailData['get_client_ip'] = $this->get_client_ip();

                Mail::send('emails.help', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });
//                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                //Sender Email End
//                Session::flash('success_message', "Message sent Successfully.");
                Session::put('success_session_message', "Message sent Successfully.");
                return Redirect::to('auth/help');
            }
        }

        return view('users.help', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function cardPayment()
    {
        $pageTitle = 'Strip Payment';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        return view('users.cardPayment', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
        
    }

 

   public function cardSuccessPayment()
   {
    Session::flash('success_session_message', "Card Deposit Request has been completed successfully.");
    return Redirect::to('/auth/add-fund');
   }

   public function cardCancelPayment(Request $request,$slug)
   {
    $request = Input::all();
    $deposit_amount=$slug;
    $user = $recordInfo = User::where('id', Session::get('user_id'))->first();
     if ($user->user_type == 'Personal') {
            $user_name = strtoupper($user->first_name) . " " . ucwords($user->last_name);
            $loginLnk = HTTP_PATH . '/personal-login';
        } else if ($user->user_type == 'Business') {
            $user_name = strtoupper($user->business_name);
            $loginLnk = HTTP_PATH . '/business-login';
        } else if ($user->user_type == 'Agent' && $user->first_name == "") {
            $user_name = strtoupper($user->business_name);
            $loginLnk = HTTP_PATH . '/business-login';
        } else if ($user->user_type == 'Agent' && $user->first_name != "") {
            $user_name = strtoupper($user->first_name) . " " . ucwords($user->last_name);
            $loginLnk = HTTP_PATH . '/personal-login';
        }

        if ($recordInfo->user_type == 'Personal') {
            if ($recordInfo->account_category == "Silver") {
                $fee_name = 'BANK_CARD_CANCEL';
            } else if ($recordInfo->account_category == "Gold") {
                $fee_name = 'BANK_CARD_CANCEL_GOLD';
            } else if ($recordInfo->account_category == "Platinum") {
                $fee_name = 'BANK_CARD_CANCEL_PLATINUM';
            } else if ($recordInfo->account_category == "Private Wealth") {
                $fee_name = 'BANK_CARD_CANCEL_PRIVATE_WEALTH';
            } else {
                $fee_name = 'BANK_CARD_CANCEL';
            }
            $fees = Fee::where('fee_name', $fee_name)->first();
            $fees_amount = ($deposit_amount * $fees->fee_value) / 100;
        } else if ($recordInfo->user_type == 'Business') {
            if ($recordInfo->account_category == "Gold") {
                $fee_name = 'MERCHANT_BANK_CARD_CANCEL_GOLD';
            } else if ($recordInfo->account_category == "Platinum") {
                $fee_name = 'MERCHANT_BANK_CARD_CANCEL_PLATINUM';
            } else if ($recordInfo->account_category == "Enterprises") {
                $fee_name = 'MERCHANT_BANK_CARD_CANCEL_Enterprises';
            } else {
                $fee_name = 'MERCHANT_BANK_CARD_CANCEL_GOLD';
            }
            $fees = Fee::where('fee_name', $fee_name)->first();
            $fees_amount = ($deposit_amount * $fees->fee_value) / 100;
            } else {
            if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
    
                if ($recordInfo->account_category == "Silver") {
                    $fee_name = 'BANK_CARD_CANCEL';
                } else if ($recordInfo->account_category == "Gold") {
                    $fee_name = 'BANK_CARD_CANCEL_GOLD';
                } else if ($recordInfo->account_category == "Platinum") {
                    $fee_name = 'BANK_CARD_CANCEL_PLATINUM';
                } else if ($recordInfo->account_category == "Private Wealth") {
                    $fee_name = 'BANK_CARD_CANCEL_PRIVATE_WEALTH';
                } else {
                    $fee_name = 'BANK_CARD_CANCEL';
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fees_amount = ($deposit_amount * $fees->fee_value) / 100;

            } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
              
                if ($recordInfo->account_category == "Gold") {
                    $fee_name = 'MERCHANT_BANK_CARD_CANCEL_GOLD';
                } else if ($recordInfo->account_category == "Platinum") {
                    $fee_name = 'MERCHANT_BANK_CARD_CANCEL_PLATINUM';
                } else if ($recordInfo->account_category == "Enterprises") {
                    $fee_name = 'MERCHANT_BANK_CARD_CANCEL_Enterprises';
                } else {
                    $fee_name = 'MERCHANT_BANK_CARD_CANCEL_GOLD';
                }
                $fees = Fee::where('fee_name', $fee_name)->first();
                $fees_amount = ($deposit_amount * $fees->fee_value) / 100;

            }
        }
         
            $billing_description = 'IP : ' . $this->get_client_ip() . '##Receiver Fees: ' . $recordInfo->currency . ' ' . $fees_amount;

            $total_credit=$fees_amount;
            $user_wallet = $recordInfo->wallet_amount - $total_credit;
            $refrence_id = time() . rand() . Session::get('user_id');
            $trans = new Transaction([
            "user_id" => Session::get('user_id'),
            "receiver_id" => 0,
            "amount" => $deposit_amount,
            "fees" => $fees_amount,
            "receiver_fees"=>$fees_amount,
            "receiver_currency"=>$recordInfo->currency,
            "currency" => $recordInfo->currency,
            'sender_currency' =>'USD',
            "trans_type" => 1, //Debit-Withdraw
            "trans_to" => 'Dafri_Wallet',
            "trans_for" => 'CardDeposit',
            "refrence_id" =>$refrence_id,
            "billing_description" =>$billing_description,
            "user_close_bal"=>$user_wallet,
            "real_value" =>$total_credit,
            "status" => 3,
            "created_at" => date('Y-m-d H:i:s'),
            "updated_at" => date('Y-m-d H:i:s'),
        ]);
        $trans->save();
        $TransId = $trans->id;

        $amount_admin_currency = $this->convertCurrency($recordInfo->currency, 'USD',$fees_amount);
        $amount_admin_currencyArr = explode("##", $amount_admin_currency);
        $admin_amount = $amount_admin_currencyArr[0];

        $adminInfo = User::where('id', 1)->first();
        $admin_wallet = ($adminInfo->wallet_amount + $admin_amount);
        User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

        User::where('id', Session::get('user_id'))->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

        $emailId = $user->email;
        $userName = strtoupper($user_name);
        $emailSubject = 'DafriBank Digital | Card Deposit Request has been cancelled';
        $emailData['subjects'] = $emailSubject;
        $emailData['userName'] = $userName;
        $emailData['emailId'] = $emailId;
        $emailData['TransId'] = $TransId;
        $emailData['loginLnk'] = $loginLnk;
        $emailData['amount'] = number_format($deposit_amount, 2, '.', '');
        $emailData['fees_amount'] =number_format($fees_amount, 2, '.', ',');
        $emailData['currency'] = $user->currency;   
        Mail::send('emails.cardPaymentCancel', $emailData, function ($message)use ($emailData, $emailId) {
            $message->to($emailId, $emailId)
                    ->subject($emailData['subjects']);
        });

        $notif = new Notification([
            'user_id' => $user->id,
            'notif_subj' => $emailSubject,
            'notif_body' => $emailSubject,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s'),
        ]);
        $notif->save();

        Session::flash('error_session_message', "Card Deposit Request has been cancelled.");
        return Redirect::to('/auth/add-fund');
   }


   public function party_withdraw(Request $request) {

    $pageTitle = '3rd Party Pay';
    $recordInfo = User::where('id', Session::get('user_id'))->first();
    $approvedCountryArr = array('South Africa', 'Botswana', 'Namibia', 'Nigeria', 'Swaziland', 'Lesotho');
    if ($recordInfo->user_type == 'Personal') {
        $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
    } else if ($recordInfo->user_type == 'Business') {
        $userName = strtoupper($recordInfo->business_name);
    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
        $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
        $userName = strtoupper($recordInfo->business_name);
    }

    $bankAccnt = WithdrawAccount::where('user_id', Session::get('user_id'))->where('withdraw_type', 2)->where('is_deleted', 0)->get();
    $input = Input::all();
    if (!empty($input) and $input['addAccount'] == 'true') {
            $check_duplicate = WithdrawAccount::where('user_id', Session::get('user_id'))->where('account_number', $input['accNumbr'])->where('is_deleted', 0)->count();
                $wa = new WithdrawAccount([
                        'user_id' => Session::get('user_id'),
                        'user_name' => $userName,
                        'account_number' => $input['accNumbr'],
                        'account_name' => $input['accName'],
                        'bank_name' => $input['bnkName'],
                        'branch_code' => $input['brnchCod'],
                        'account_currency' => $input['currncy'],
                        'account_type' => $input['acctTyp'],
                        'routing_number' => $input['routNumbr'],
                        'type_transfer'=>$input['type_transfer'],
                        'bnkAdd'=> $input['bnkAdd'],
                        'reasonPay'=> $input['reasonPay'],
                        'iBan'=> $input['iBan'],
                        'sorCode'=> $input['sorCode'],
                        'bic'=> $input['bic'],
                        'wisaEmail'=> $input['wisaEmail'],
                        'cotb'=> $input['cotb'],
                        'swc'=> $input['swc'],
                        'currncy'=> $input['currncy'],
                        'withdraw_type'=>2,
                        'status' => 0,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $wa->save();

                $emailSubject = 'DafriBank Digital | Beneficiary added successfully';
                $notif = new Notification([
                    'user_id' => $recordInfo->id,
                    'notif_subj' => $emailSubject,
                    'notif_body' => $emailSubject,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $notif->save();
                Session::put('success_session_message', "Account Added Successfully.");
                return Redirect::back();
         }

    if (!empty($input) and (isset($input['saveWithdrawReq']) && $input['saveWithdrawReq'] == 'true')) {
        $rules = array(
            'withdrawAmnt' => 'required|numeric|min:0.1',
            'account_id' => 'required',
        );
        $customMessages = [
            'withdrawAmnt.required' => 'Amount field can\'t be left blank',
            'withdrawAmnt.numeric' => 'Invalid Amount value! Use number only.',
            'withdrawAmnt.min' => 'Amount should be greater than 0.',
            'account_id.required' => 'Select Beneficiary Account',
        ];
        $validator = Validator::make($input, $rules, $customMessages);
        if ($validator->fails()) {
            $messages = $validator->messages();
            $message = implode('<br>', $messages->all());

            Session::put('error_session_message', $message);
            return Redirect::to('auth/party-withdraw');
            //                return Redirect::to('auth/manual-withdraw')->withErrors($validator)->withInput();
        } else {

                $withdraw_amount = $input['withdrawAmnt'];
                $amount = $input['withdrawAmnt'];
                $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
//                echo "USD: ".$chkAmount." EUR: ".$amount; exit;
                if ($chkAmount < 10 ) {
                    $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 10);
                    $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                    Session::put('error_session_message', "You can't withdraw less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                    return Redirect::to('auth/party-withdraw');
                }

                if ($amount > $recordInfo->wallet_amount) {
                    Session::put('error_session_message', "Insufficient Balance");
                    return Redirect::to('auth/party-withdraw');
                }

                if ($recordInfo->is_kyc_done != 1 || $recordInfo->is_verify != 1) {      
                    $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
                  //  echo "USD: ".$chkAmount." NDG: ".$amount; exit;
                    if ($chkAmount > TRANS_LIMIT_BEFORE_KYC) {
                        $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, TRANS_LIMIT_BEFORE_KYC);
                        $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                        Session::put('error_session_message', "You can't withdraw more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please update your KYC.");
                        return Redirect::to('auth/party-withdraw');
                    }    

                    $TotalWithdraw = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', 0)->where('trans_for', 'LIKE', '%Global Pay%')->whereIn('status', array(1, 2))->sum('amount');

                    $TotalDebitTrans = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', '!=', 0)->where('trans_type', 2)->where('status', 1)->sum('amount');

                    $TotalInactvAmnt = InactiveAmount::where('user_id', Session::get('user_id'))->sum('amount');

                    $ttlWithdrawAmount = $TotalWithdraw + $TotalDebitTrans + $TotalInactvAmnt + $amount;
                    echo"<pre>";print_r(ttlWithdrawAmount);die;
                    $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $ttlWithdrawAmount);
                    if ($chkAmount >= TRANS_LIMIT_BEFORE_KYC) {
                        $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, TRANS_LIMIT_BEFORE_KYC);
                        $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                        Session::put('error_session_message', "You can't withdraw more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please update your KYC.");
                        return Redirect::to('auth/party-request');
                    }
                }

                $transLimitFlag = $this->checkUserTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $amount);
                $transLimitArr = explode("###", $transLimitFlag);
                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('auth/party-withdraw');
                }

                $transLimitFlag = $this->checkAgentTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $amount);
                $transLimitArr = explode("###", $transLimitFlag);
                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('auth/party-withdraw');
                }

            $WithdrawAccount=WithdrawAccount::where('id',$input['account_id'])->first()->type_transfer;
            if($WithdrawAccount=="US Bank Transfer" || $WithdrawAccount=="UK Bank Transfer" || $WithdrawAccount=="Bank Wire Transfer (Global)" || $WithdrawAccount=="IBAN EU Transfer")
            {
                      $chkAmount = $this->myCurrencyRate($recordInfo->currency,300);
                      if ($withdraw_amount < $chkAmount) {
                        
                          $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 300);
                          $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                          Session::put('error_session_message', "You can't withdraw less than " . $recordInfo->currency . " " . $user_currncy_250);
                          return Redirect::to('auth/party-withdraw');
                      }
            }

            $otp = mt_rand(100000, 999999);
            $verifyCode = $this->encpassword($otp);
            User::where('id', Session::get('user_id'))->update(['verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s')]);

            //OTP Mail Start
            $emailId = $recordInfo->email;
            $userName = $userName;

            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">' . $otp . ' is your One Time Password to authenticate your Withdrawal Request to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
            $emailSubject = "DafriBank Digital - Withdrawal Requested";
            //                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

            $withdraw_amount = $withdraw_amount;
            $emailData['subject'] = $emailSubject;
            $emailData['userName'] = $userName;
            $emailData['otp'] = $otp;
            $emailData['category'] = $recordInfo->account_category;
            $emailData['withdraw_amount'] = $recordInfo->currency . ' ' . $withdraw_amount;

            Mail::send('emails.withdrawOTP', $emailData, function ($message)use ($emailData, $emailId) {
                $message->to($emailId, $emailId)
                        ->subject($emailData['subject']);
            });
            //OTP Mail End
            Session::put('party_withdrawAmntMW64',base64_encode($withdraw_amount));
            Session::put('account_id', $input['account_id']);
            if (isset($input['payment_type'])) {
                Session::put('payment_type', $input['payment_type']);
            }
            return Redirect::to('auth/party-withdraw-otp');
        }
    }

    return view('users.party_withdraw', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'bankAccnt' => $bankAccnt, 'account_name' => $userName]);
}

public function party_withdraw_otp(Request $request) {
    $pageTitle = 'Global Pay';
    $recordInfo = User::where('id', Session::get('user_id'))->first();
    if ($recordInfo->user_type == 'Personal') {
        $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
    } else if ($recordInfo->user_type == 'Business') {
        $userName = strtoupper($recordInfo->business_name);
    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
        $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
        $userName = strtoupper($recordInfo->business_name);
    }

    $input = Input::all();
    if (!empty($input) and (isset($input['validateOTP']) && $input['validateOTP'] == 'true')) {
        $rules = array(
            'otp_verify' => 'required',
        );
        $customMessages = [
            'otp_verify.required' => 'OTP field can\'t be left blank',
        ];
        $validator = Validator::make($input, $rules, $customMessages);

        if ($validator->fails()) {
            $messages = $validator->messages();
            $message = implode('<br>', $messages->all());

            Session::put('error_session_message', $message);
            return Redirect::to('auth/party-withdraw-otp');
            //                return Redirect::to('auth/manual-withdraw')->withErrors($validator)->withInput();
        } else {
            $otp = $input['otp_verify'];
            $dateChk = date('Y-m-d H:i', strtotime('+15 minutes', strtotime($recordInfo->otp_time)));

            if (!password_verify($otp, $recordInfo->verify_code) || date('Y-m-d H:i') > $dateChk) {
                Session::put('error_session_message', "You have entered wrong OTP code.");
                return Redirect::to('auth/party-withdraw-otp');
                //                    return Redirect::to('auth/manual-withdraw')->withErrors('You have entered wrong OTP code.');
            } else {

                $requestExist = ManualWithdraw::where('user_id', Session::get('user_id'))->where('withdraw_type',2)->whereIn('status', array(0, 2))->first();
                //                    echo '<pre>';print_r($requestExist);exit;
                if ($requestExist) {
                    Session::put('error_session_message', 'Your previous 3rd party pay request not completed yet.');
                    return Redirect::to('auth/party-withdraw');
                }

                //to check same amount withdrawal in 24 hours
                $date=date('Y-m-d');
                $requestExist_24 = ManualWithdraw::where('user_id', Session::get('user_id'))->where('withdraw_type',2)->where('amount',base64_decode(Session::get('party_withdrawAmntMW64')))->whereDate('created_at',$date)->count();
                if($requestExist_24 > 0)
                {
                Session::put('error_session_message', 'We were unable to process this request because you previously transferred identical amount in the less 24h. Please try again with a different amount.');
                return Redirect::to('auth/party-withdraw');
                }

                $currency = $recordInfo->currency;

                $payment_type = 'normal';
                if (Session::has('payment_type')) {
                    $payment_type = Session::get('payment_type');
                }

                $user_invited_amountt = 0;
                $R55_fees_amount = 0;
                $refId=0;
                $withdraw_amount = base64_decode(Session::get('party_withdrawAmntMW64'));  
              //  echo $recordInfo->user_type; die;
                if ($recordInfo->user_type == 'Personal') {
                    //$fee_name = 'MANUAL_WITHDRAW';
                    if ($recordInfo->account_category == "Silver") {
                        $fee_name = 'MANUAL_WITHDRAW';
                    } else if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'MANUAL_WITHDRAW_GOLD';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'MANUAL_WITHDRAW_PLATINUM';
                    } else if ($recordInfo->account_category == "Private Wealth") {
                        $fee_name = 'MANUAL_WITHDRAW_PRIVATE_WEALTH';
                    } else {
                        $fee_name = 'MANUAL_WITHDRAW';
                    }

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;

                    if ($payment_type == 'fast') {
                        $fee_name1 = 'R55_FEE';
                        $fees1 = Fee::where('fee_name', $fee_name1)->first();
                        $R55_fees_amount = ($withdraw_amount * $fees1->fee_value) / 100;
                    }


                    if ($recordInfo->referral != 'na') {
                        $refrlComm = ($fees_amount * 25) / 100;
                        $referlCode = 'refid=' . $recordInfo->referral;
                        $referrer = Referalcode::where('referal_link', $referlCode)->first();
                        if ($currency != 'USD') {
                            $referral_User=User::where('id',$referrer->user_id)->first(); 
                            if ($referral_User->user_type == 'Personal') {
                                $convr_fee_name_ref = 'CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Business') {
                                $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                $convr_fee_name_ref = 'CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                            }
                            $amountt = $refrlComm;
                            $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                            $conversion_feet = $fees_convr->fee_value;

                            $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                            $host_currency = trim($currency);
                            $user_currency = 'USD';

                            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                            $convertedCurrArr = explode('##', $convertedCurrArr);
                            $user_invited_amountt = $convertedCurrArr[0];
                        } else {
                            $user_invited_amountt = $refrlComm;
                        }

                        //                                echo '<pre>';print_r($convertedCurrArr);exit;
                        if (!empty($referrer)) {
                            $refComm = new ReferralCommission([
                                'user_id' => Session::get('user_id'),
                                'referrer_id' => $referrer->user_id,
                                'amount' => $user_invited_amountt,
                                'action' => '3rd PARTY PAY',
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                            ]);
                        }
                    }
                } else if ($recordInfo->user_type == 'Business') {
                    //$fee_name = 'MERCHANT_MANUAL_WITHDRAW';


                    if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'MERCHANT_MANUAL_WITHDRAW';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'MERCHANT_MANUAL_WITHDRAW_PLATINUM';
                    } else if ($recordInfo->account_category == "Enterprises") {
                        $fee_name = 'MERCHANT_MANUAL_WITHDRAW_ENTERPRIS';
                    } else {
                        $fee_name = 'MERCHANT_MANUAL_WITHDRAW';
                    } 

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;

                    if ($payment_type == 'fast') {
                        $fee_name1 = 'MERCHANT_R55_FEE';
                        $fees1 = Fee::where('fee_name', $fee_name1)->first();
                        $R55_fees_amount = ($withdraw_amount * $fees1->fee_value) / 100;
                    }

                    if ($recordInfo->referral != 'na') {
                        $refrlComm = ($fees_amount * 25) / 100;
                        $referlCode = 'refid=' . $recordInfo->referral;
                        $referrer = Referalcode::where('referal_link', $referlCode)->first();
                        if ($currency != 'USD') {
                            $referral_User=User::where('id',$referrer->user_id)->first(); 
                            if ($referral_User->user_type == 'Personal') {
                                $convr_fee_name_ref = 'CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Business') {
                                $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                $convr_fee_name_ref = 'CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                            }
                            $amountt = $refrlComm;
                            $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                            $conversion_feet = $fees_convr->fee_value;

                            $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                            $host_currency = trim($currency);
                            $user_currency = 'USD';

                            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                            $convertedCurrArr = explode('##', $convertedCurrArr);
                            $user_invited_amountt = $convertedCurrArr[0];
                        } else {
                            $user_invited_amountt = $refrlComm;
                        }

                        //                                echo '<pre>';print_r($convertedCurrArr);exit;
                        if (!empty($referrer)) {
                            $refComm = new ReferralCommission([
                                'user_id' => Session::get('user_id'),
                                'referrer_id' => $referrer->user_id,
                                'amount' => $user_invited_amountt,
                                'action' => '3rd PARTY PAY',
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                            ]);
                        }
                    }
                } else {
                    if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                        //$fee_name = 'MANUAL_WITHDRAW';
                        if ($recordInfo->account_category == "Silver") {
                            $fee_name = 'MANUAL_WITHDRAW';
                        } else if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'MANUAL_WITHDRAW_GOLD';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'MANUAL_WITHDRAW_PLATINUM';
                        } else if ($recordInfo->account_category == "Private Wealth") {
                            $fee_name = 'MANUAL_WITHDRAW_PRIVATE_WEALTH';
                        } else {
                            $fee_name = 'MANUAL_WITHDRAW';
                        }
                        //DB::enableQueryLog();

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        // dd(DB::getQueryLog());
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;

                        if ($payment_type == 'fast') {
                            $fee_name1 = 'R55_FEE';
                            $fees1 = Fee::where('fee_name', $fee_name1)->first();
                            $R55_fees_amount = ($withdraw_amount * $fees1->fee_value) / 100;
                        }

                        if ($recordInfo->referral != 'na') {
                            $refrlComm = ($fees_amount * 25) / 100;
                            $referlCode = 'refid=' . $recordInfo->referral;
                            $referrer = Referalcode::where('referal_link', $referlCode)->first();
                            if ($currency != 'USD') {
                                $referral_User=User::where('id',$referrer->user_id)->first(); 
                                if ($referral_User->user_type == 'Personal') {
                                    $convr_fee_name_ref = 'CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Business') {
                                    $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                    $convr_fee_name_ref = 'CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                    $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                }
                                $amountt = $refrlComm;
                                $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                                $conversion_feet = $fees_convr->fee_value;

                                $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                                $host_currency = trim($currency);
                                $user_currency = 'USD';

                                $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                                $convertedCurrArr = explode('##', $convertedCurrArr);
                                $user_invited_amountt = $convertedCurrArr[0];
                            } else {
                                $user_invited_amountt = $refrlComm;
                            }

                            //                                echo '<pre>';print_r($convertedCurrArr);exit;
                            if (!empty($referrer)) {
                                $refComm = new ReferralCommission([
                                    'user_id' => Session::get('user_id'),
                                    'referrer_id' => $referrer->user_id,
                                    'amount' => $user_invited_amountt,
                                    'action' => '3rd PARTY PAY',
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                ]);
                            }
                        }
                    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                       
                        if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW_PLATINUM';
                        } else if ($recordInfo->account_category == "Enterprises") {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW_ENTERPRIS';
                        } else {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW';
                        }

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;

                        if ($payment_type == 'fast') {
                            $fee_name1 = 'MERCHANT_R55_FEE';
                            $fees1 = Fee::where('fee_name', $fee_name1)->first();
                            $R55_fees_amount = ($withdraw_amount * $fees1->fee_value) / 100;
                        }

                        if ($recordInfo->referral != 'na') {
                            $refrlComm = ($fees_amount * 25) / 100;
                            $referlCode = 'refid=' . $recordInfo->referral;
                            $referrer = Referalcode::where('referal_link', $referlCode)->first();
                            if ($currency != 'USD') {
                                $referral_User=User::where('id',$referrer->user_id)->first(); 
                                if ($referral_User->user_type == 'Personal') {
                                    $convr_fee_name_ref = 'CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Business') {
                                    $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                    $convr_fee_name_ref = 'CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                    $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                }
                                $amountt = $refrlComm;
                                $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                                $conversion_feet = $fees_convr->fee_value;

                                $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                                $host_currency = trim($currency);
                                $user_currency = 'USD';

                                $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                                $convertedCurrArr = explode('##', $convertedCurrArr);
                                $user_invited_amountt = $convertedCurrArr[0];
                            } else {
                                $user_invited_amountt = $refrlComm;
                            }

                            //                                echo '<pre>';print_r($convertedCurrArr);exit;
                            if (!empty($referrer)) {
                                $refComm = new ReferralCommission([
                                    'user_id' => Session::get('user_id'),
                                    'referrer_id' => $referrer->user_id,
                                    'amount' => $user_invited_amountt,
                                    'action' => '3rd PARTY PAY',
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                ]);
                            }
                        }
                    }
                }

                $withdraw_amount_total = $withdraw_amount + $fees_amount + $R55_fees_amount;
//                    echo '/'.$withdraw_amount;
//                    echo '/'.$fees_amount;
//                    echo '/'.$R55_fees_amount;
//                    echo '/';

                if ($recordInfo->wallet_amount < $withdraw_amount_total) {
                    Session::put('error_session_message', "The amount in your account can't cover " . $recordInfo->currency . ' ' . ($fees_amount+$R55_fees_amount) . " fee for this transaction. Please try again with different amount.");
                    return Redirect::to('auth/party-withdraw');
                }

                User::where('id', Session::get('user_id'))->update(['verify_code' => '', 'updated_at' => date('Y-m-d H:i:s')]);
                $account_id = Session::get('account_id');


                $user_wallet = $recordInfo->wallet_amount - $withdraw_amount_total;
                User::where('id', Session::get('user_id'))->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

                $amount_admin_currency = $this->convertCurrency($recordInfo->currency, 'USD', ($withdraw_amount_total));
                $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                $admin_amount = $amount_admin_currencyArr[0];
                $admin_converstion_rate = $amount_admin_currencyArr[1];

                $adminInfo = User::where('id', 1)->first();
                $admin_wallet = ($adminInfo->wallet_amount + $admin_amount - $user_invited_amountt);
                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                if ($R55_fees_amount > 0) {
                    $billing_description = 'IP : ' . $this->get_client_ip() . '##Sender Fees: ' . $recordInfo->currency . ' ' . $fees_amount . '##R55 Fees: ' . $recordInfo->currency . ' ' . $R55_fees_amount;
                } else {
                    $billing_description = 'IP : ' . $this->get_client_ip() . '##Sender Fees: ' . $recordInfo->currency . ' ' . $fees_amount;
                }

                $refrence_id = time() . rand() . Session::get('user_id');
                $trans = new Transaction([
                    "user_id" => Session::get('user_id'),
                    "receiver_id" => 0,
                    "amount" => $withdraw_amount,
                    "fees" => $fees_amount + $R55_fees_amount,
                    "sender_fees" => $fees_amount + $R55_fees_amount,
                    "currency" => $recordInfo->currency,
                    "sender_currency" => $recordInfo->currency,
                    "receiver_currency" => 'USD',
                    "trans_type" => 2,
                    "trans_to" => 'Dafri_Wallet',
                    "trans_for" => '3rd Party Pay',
                    "refrence_id" => $refrence_id,
                    "user_close_bal" => $user_wallet,
                    "real_value" => $withdraw_amount_total,
                    "billing_description" => $billing_description,
                    "status" => 2,
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s'),
                ]);
                $trans->save();
                $TransId = $trans->id;
              
                $manulWthdr = new ManualWithdraw([
                    'user_id' => Session::get('user_id'),
                    'user_name' => $userName,
                    'user_email' => $recordInfo->email,
                    'trans_id' => $TransId,
                    'account_id' => $account_id,
                    'payment_type' => $payment_type,
                    'amount' => $withdraw_amount,
                    'status' => 0,
                    'withdraw_type'=>2,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $manulWthdr->save();
                $manualWithdrawID = $manulWthdr->id;

                if (!empty($referrer)) {
                    $refComm->save();
                    $refId = $refComm->id;
                    ReferralCommission::where('id', $refId)->update(['trans_id' => $TransId]);
                }

                $inactvAmnt = new InactiveAmount([
                    'user_id' => Session::get('user_id'),
                    'withdraw_req_id' => $manualWithdrawID,
                    'trans_id' => $TransId,
                    'amount' => $withdraw_amount,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $inactvAmnt->save();
                $inactiveAmountID = $inactvAmnt->id;
                Session::put('success_session_message', '3rd Party Pay request submitted successfully and will be processed shortly.');
                return Redirect::to('/overview');
            }
        }
    }

    return view('users.party_withdraw_otp', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);

    }

   public function global_withdraw(Request $request) {

    $pageTitle = 'Global Pay';
    $recordInfo = User::where('id', Session::get('user_id'))->first();
    $approvedCountryArr = array('South Africa', 'Botswana', 'Namibia', 'Nigeria', 'Swaziland', 'Lesotho');
    if ($recordInfo->user_type == 'Personal') {
        $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
    } else if ($recordInfo->user_type == 'Business') {
        $userName = strtoupper($recordInfo->business_name);
    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
        $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
        $userName = strtoupper($recordInfo->business_name);
    }

    $bankAccnt = WithdrawAccount::where('user_id', Session::get('user_id'))->where('withdraw_type', 1)->where('is_deleted', 0)->get();
    $input = Input::all();
    if (!empty($input) and $input['addAccount'] == 'true') {
            $check_duplicate = WithdrawAccount::where('user_id', Session::get('user_id'))->where('account_number', $input['accNumbr'])->where('is_deleted', 0)->count();
                $wa = new WithdrawAccount([
                    'user_id' => Session::get('user_id'),
                    'user_name' => $userName,
                    'account_number' => $input['accNumbr'],
                    'account_name' => $input['accName'],
                    'bank_name' => $input['bnkName'],
                    'branch_code' => $input['brnchCod'],
                    'account_currency' => $input['currncy'],
                    'account_type' => $input['acctTyp'],
                    'type_transfer'=>$input['type_transfer'],
                    'bnkAdd'=> $input['bnkAdd'],
                    'reasonPay'=> $input['reasonPay'],
                    'cotb'=> $input['cotb'],
                    'swc'=> $input['swc'],
                    'currncy'=> $input['currncy'],
                    'withdraw_type'=>1,
                    'status' => 0,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $wa->save();

                $emailSubject = 'DafriBank Digital | Beneficiary added successfully';
                $notif = new Notification([
                    'user_id' => $recordInfo->id,
                    'notif_subj' => $emailSubject,
                    'notif_body' => $emailSubject,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $notif->save();
                Session::put('success_session_message', "Account Added Successfully.");
                return Redirect::back();
         }

    if (!empty($input) and (isset($input['saveWithdrawReq']) && $input['saveWithdrawReq'] == 'true')) {
        $rules = array(
            'withdrawAmnt' => 'required|numeric|min:0.1',
            'account_id' => 'required',
        );
        $customMessages = [
            'withdrawAmnt.required' => 'Amount field can\'t be left blank',
            'withdrawAmnt.numeric' => 'Invalid Amount value! Use number only.',
            'withdrawAmnt.min' => 'Amount should be greater than 0.',
            'account_id.required' => 'Select Beneficiary Account',
        ];
        $validator = Validator::make($input, $rules, $customMessages);
        if ($validator->fails()) {
            $messages = $validator->messages();
            $message = implode('<br>', $messages->all());

            Session::put('error_session_message', $message);
            return Redirect::to('auth/global-withdraw');
            //                return Redirect::to('auth/manual-withdraw')->withErrors($validator)->withInput();
        } else {

                $withdraw_amount = $input['withdrawAmnt'];
                $amount = $input['withdrawAmnt'];
                $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
//                echo "USD: ".$chkAmount." EUR: ".$amount; exit;
                if ($chkAmount < 10 ) {
                    $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 10);
                    $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                    Session::put('error_session_message', "You can't withdraw less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                    return Redirect::to('auth/global-withdraw');
                }

                if ($amount > $recordInfo->wallet_amount) {
                    Session::put('error_session_message', "Insufficient Balance");
                    return Redirect::to('auth/global-withdraw');
                }

                if ($recordInfo->is_kyc_done != 1 || $recordInfo->is_verify != 1) {      
                    $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
                  //  echo "USD: ".$chkAmount." NDG: ".$amount; exit;
                    if ($chkAmount > TRANS_LIMIT_BEFORE_KYC) {
                        $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, TRANS_LIMIT_BEFORE_KYC);
                        $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                        Session::put('error_session_message', "You can't withdraw more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please update your KYC.");
                        return Redirect::to('auth/global-withdraw');
                    }    

                    $TotalWithdraw = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', 0)->where('trans_for', 'LIKE', '%Global Pay%')->whereIn('status', array(1, 2))->sum('amount');

                    $TotalDebitTrans = Transaction::where('user_id', Session::get('user_id'))->where('receiver_id', '!=', 0)->where('trans_type', 2)->where('status', 1)->sum('amount');

                    $TotalInactvAmnt = InactiveAmount::where('user_id', Session::get('user_id'))->sum('amount');

                    $ttlWithdrawAmount = $TotalWithdraw + $TotalDebitTrans + $TotalInactvAmnt + $amount;
                    $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $ttlWithdrawAmount);
                    if ($chkAmount >= TRANS_LIMIT_BEFORE_KYC) {
                        $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, TRANS_LIMIT_BEFORE_KYC);
                        $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                        Session::put('error_session_message', "You can't withdraw more than " . $recordInfo->currency . " " . $user_currncy_250 . ", please update your KYC.");
                        return Redirect::to('auth/withdraw-request');
                    }
                }

                $transLimitFlag = $this->checkUserTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $amount);
                $transLimitArr = explode("###", $transLimitFlag);
                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('auth/global-withdraw');
                }

                $transLimitFlag = $this->checkAgentTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $amount);
                $transLimitArr = explode("###", $transLimitFlag);
                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('auth/global-withdraw');
                }

            $WithdrawAccount=WithdrawAccount::where('id',$input['account_id'])->first()->type_transfer;
            if($WithdrawAccount=="US Bank Transfer" || $WithdrawAccount=="UK Bank Transfer" || $WithdrawAccount=="Bank Wire Transfer (Global)" || $WithdrawAccount=="IBAN EU Transfer")
            {
                     $chkAmount = $this->myCurrencyRate($recordInfo->currency,300);
                      if ($withdraw_amount < $chkAmount) {
                          $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 300);
                          $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                          Session::put('error_session_message', "You can't withdraw less than " . $recordInfo->currency . " " . $user_currncy_250);
                          return Redirect::to('auth/global-withdraw');
                      }
            }

            $otp = mt_rand(100000, 999999);
            $verifyCode = $this->encpassword($otp);
            User::where('id', Session::get('user_id'))->update(['verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s')]);

            //OTP Mail Start
            $emailId = $recordInfo->email;
            $userName = $userName;

            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">' . $otp . ' is your One Time Password to authenticate your Withdrawal Request to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
            $emailSubject = "DafriBank Digital - Withdrawal Requested";
            //                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

            $withdraw_amount = $withdraw_amount;
            $emailData['subject'] = $emailSubject;
            $emailData['userName'] = $userName;
            $emailData['otp'] = $otp;
            $emailData['category'] = $recordInfo->account_category;
            $emailData['withdraw_amount'] = $recordInfo->currency . ' ' . $withdraw_amount;

            Mail::send('emails.withdrawOTP', $emailData, function ($message)use ($emailData, $emailId) {
                $message->to($emailId, $emailId)
                        ->subject($emailData['subject']);
            });
            //OTP Mail End
            Session::put('global_withdrawAmntMW64',base64_encode($withdraw_amount));
            Session::put('account_id', $input['account_id']);
            if (isset($input['payment_type'])) {
                Session::put('payment_type', $input['payment_type']);
            }
            return Redirect::to('auth/global-withdraw-otp');
        }
    }

    return view('users.global_withdraw', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'bankAccnt' => $bankAccnt, 'account_name' => $userName]);
}

    public function global_withdraw_otp(Request $request) {
    $pageTitle = 'Global Pay';
    $recordInfo = User::where('id', Session::get('user_id'))->first();
    if ($recordInfo->user_type == 'Personal') {
        $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
    } else if ($recordInfo->user_type == 'Business') {
        $userName = strtoupper($recordInfo->business_name);
    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
        $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
        $userName = strtoupper($recordInfo->business_name);
    }

    $input = Input::all();
    if (!empty($input) and (isset($input['validateOTP']) && $input['validateOTP'] == 'true')) {
        $rules = array(
            'otp_verify' => 'required',
        );
        $customMessages = [
            'otp_verify.required' => 'OTP field can\'t be left blank',
        ];
        $validator = Validator::make($input, $rules, $customMessages);

        if ($validator->fails()) {
            $messages = $validator->messages();
            $message = implode('<br>', $messages->all());

            Session::put('error_session_message', $message);
            return Redirect::to('auth/global-withdraw-otp');
            //                return Redirect::to('auth/manual-withdraw')->withErrors($validator)->withInput();
        } else {
            $otp = $input['otp_verify'];
            $dateChk = date('Y-m-d H:i', strtotime('+15 minutes', strtotime($recordInfo->otp_time)));

            if (!password_verify($otp, $recordInfo->verify_code) || date('Y-m-d H:i') > $dateChk) {
                Session::put('error_session_message', "You have entered wrong OTP code.");
                return Redirect::to('auth/global-withdraw-otp');
                //                    return Redirect::to('auth/manual-withdraw')->withErrors('You have entered wrong OTP code.');
            } else {

                $requestExist = ManualWithdraw::where('user_id', Session::get('user_id'))->where('withdraw_type',1)->whereIn('status', array(0, 2))->first();
                //                    echo '<pre>';print_r($requestExist);exit;
                if ($requestExist) {
                    Session::put('error_session_message', 'Your previous global pay request not completed yet.');
                    return Redirect::to('auth/global-withdraw');
                }

                //to check same amount withdrawal in 24 hours
                $date=date('Y-m-d');
                $requestExist_24 = ManualWithdraw::where('user_id', Session::get('user_id'))->where('withdraw_type',1)->where('amount',base64_decode(Session::get('global_withdrawAmntMW64')))->whereDate('created_at',$date)->count();
                if($requestExist_24 > 0)
                {
                Session::put('error_session_message', 'We were unable to process this request because you previously transferred identical amount in the less 24h. Please try again with a different amount.');
                return Redirect::to('auth/global-withdraw');
                }

                $currency = $recordInfo->currency;

                $payment_type = 'normal';
                if (Session::has('payment_type')) {
                    $payment_type = Session::get('payment_type');
                }

                $user_invited_amountt = 0;
                $R55_fees_amount = 0;
                $refId=0;
                $withdraw_amount = base64_decode(Session::get('global_withdrawAmntMW64'));  
              //  echo $recordInfo->user_type; die;
                if ($recordInfo->user_type == 'Personal') {
                    //$fee_name = 'MANUAL_WITHDRAW';
                    if ($recordInfo->account_category == "Silver") {
                        $fee_name = 'MANUAL_WITHDRAW';
                    } else if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'MANUAL_WITHDRAW_GOLD';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'MANUAL_WITHDRAW_PLATINUM';
                    } else if ($recordInfo->account_category == "Private Wealth") {
                        $fee_name = 'MANUAL_WITHDRAW_PRIVATE_WEALTH';
                    } else {
                        $fee_name = 'MANUAL_WITHDRAW';
                    }

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;

                    if ($payment_type == 'fast') {
                        $fee_name1 = 'R55_FEE';
                        $fees1 = Fee::where('fee_name', $fee_name1)->first();
                        $R55_fees_amount = ($withdraw_amount * $fees1->fee_value) / 100;
                    }


                    if ($recordInfo->referral != 'na') {
                        $refrlComm = ($fees_amount * 25) / 100;
                        $referlCode = 'refid=' . $recordInfo->referral;
                        $referrer = Referalcode::where('referal_link', $referlCode)->first();
                        if ($currency != 'USD') {
                            $referral_User=User::where('id',$referrer->user_id)->first(); 
                            if ($referral_User->user_type == 'Personal') {
                                $convr_fee_name_ref = 'CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Business') {
                                $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                $convr_fee_name_ref = 'CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                            }
                            $amountt = $refrlComm;
                            $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                            $conversion_feet = $fees_convr->fee_value;

                            $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                            $host_currency = trim($currency);
                            $user_currency = 'USD';

                            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                            $convertedCurrArr = explode('##', $convertedCurrArr);
                            $user_invited_amountt = $convertedCurrArr[0];
                        } else {
                            $user_invited_amountt = $refrlComm;
                        }

                        //                                echo '<pre>';print_r($convertedCurrArr);exit;
                        if (!empty($referrer)) {
                            $refComm = new ReferralCommission([
                                'user_id' => Session::get('user_id'),
                                'referrer_id' => $referrer->user_id,
                                'amount' => $user_invited_amountt,
                                'action' => 'GLOBAL PAY',
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                            ]);
                        }
                    }
                } else if ($recordInfo->user_type == 'Business') {
                    //$fee_name = 'MERCHANT_MANUAL_WITHDRAW';


                    if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'MERCHANT_MANUAL_WITHDRAW';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'MERCHANT_MANUAL_WITHDRAW_PLATINUM';
                    } else if ($recordInfo->account_category == "Enterprises") {
                        $fee_name = 'MERCHANT_MANUAL_WITHDRAW_ENTERPRIS';
                    } else {
                        $fee_name = 'MERCHANT_MANUAL_WITHDRAW';
                    } 

                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;

                    if ($payment_type == 'fast') {
                        $fee_name1 = 'MERCHANT_R55_FEE';
                        $fees1 = Fee::where('fee_name', $fee_name1)->first();
                        $R55_fees_amount = ($withdraw_amount * $fees1->fee_value) / 100;
                    }

                    if ($recordInfo->referral != 'na') {
                        $refrlComm = ($fees_amount * 25) / 100;
                        $referlCode = 'refid=' . $recordInfo->referral;
                        $referrer = Referalcode::where('referal_link', $referlCode)->first();
                        if ($currency != 'USD') {
                            $referral_User=User::where('id',$referrer->user_id)->first(); 
                            if ($referral_User->user_type == 'Personal') {
                                $convr_fee_name_ref = 'CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Business') {
                                $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                $convr_fee_name_ref = 'CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                            }
                            $amountt = $refrlComm;
                            $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                            $conversion_feet = $fees_convr->fee_value;

                            $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                            $host_currency = trim($currency);
                            $user_currency = 'USD';

                            $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                            $convertedCurrArr = explode('##', $convertedCurrArr);
                            $user_invited_amountt = $convertedCurrArr[0];
                        } else {
                            $user_invited_amountt = $refrlComm;
                        }

                        //                                echo '<pre>';print_r($convertedCurrArr);exit;
                        if (!empty($referrer)) {
                            $refComm = new ReferralCommission([
                                'user_id' => Session::get('user_id'),
                                'referrer_id' => $referrer->user_id,
                                'amount' => $user_invited_amountt,
                                'action' => 'GLOBAL PAY',
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s')
                            ]);
                        }
                    }
                } else {
                    if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                        //$fee_name = 'MANUAL_WITHDRAW';
                        if ($recordInfo->account_category == "Silver") {
                            $fee_name = 'MANUAL_WITHDRAW';
                        } else if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'MANUAL_WITHDRAW_GOLD';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'MANUAL_WITHDRAW_PLATINUM';
                        } else if ($recordInfo->account_category == "Private Wealth") {
                            $fee_name = 'MANUAL_WITHDRAW_PRIVATE_WEALTH';
                        } else {
                            $fee_name = 'MANUAL_WITHDRAW';
                        }
                        //DB::enableQueryLog();

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        // dd(DB::getQueryLog());
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;

                        if ($payment_type == 'fast') {
                            $fee_name1 = 'R55_FEE';
                            $fees1 = Fee::where('fee_name', $fee_name1)->first();
                            $R55_fees_amount = ($withdraw_amount * $fees1->fee_value) / 100;
                        }

                        if ($recordInfo->referral != 'na') {
                            $refrlComm = ($fees_amount * 25) / 100;
                            $referlCode = 'refid=' . $recordInfo->referral;
                            $referrer = Referalcode::where('referal_link', $referlCode)->first();
                            if ($currency != 'USD') {
                                $referral_User=User::where('id',$referrer->user_id)->first(); 
                                if ($referral_User->user_type == 'Personal') {
                                    $convr_fee_name_ref = 'CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Business') {
                                    $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                    $convr_fee_name_ref = 'CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                    $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                }
                                $amountt = $refrlComm;
                                $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                                $conversion_feet = $fees_convr->fee_value;

                                $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                                $host_currency = trim($currency);
                                $user_currency = 'USD';

                                $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                                $convertedCurrArr = explode('##', $convertedCurrArr);
                                $user_invited_amountt = $convertedCurrArr[0];
                            } else {
                                $user_invited_amountt = $refrlComm;
                            }

                            //                                echo '<pre>';print_r($convertedCurrArr);exit;
                            if (!empty($referrer)) {
                                $refComm = new ReferralCommission([
                                    'user_id' => Session::get('user_id'),
                                    'referrer_id' => $referrer->user_id,
                                    'amount' => $user_invited_amountt,
                                    'action' => 'GLOBAL PAY',
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                ]);
                            }
                        }
                    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                       
                        if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW_PLATINUM';
                        } else if ($recordInfo->account_category == "Enterprises") {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW_ENTERPRIS';
                        } else {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW';
                        }

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;

                        if ($payment_type == 'fast') {
                            $fee_name1 = 'MERCHANT_R55_FEE';
                            $fees1 = Fee::where('fee_name', $fee_name1)->first();
                            $R55_fees_amount = ($withdraw_amount * $fees1->fee_value) / 100;
                        }

                        if ($recordInfo->referral != 'na') {
                            $refrlComm = ($fees_amount * 25) / 100;
                            $referlCode = 'refid=' . $recordInfo->referral;
                            $referrer = Referalcode::where('referal_link', $referlCode)->first();
                            if ($currency != 'USD') {
                                $referral_User=User::where('id',$referrer->user_id)->first(); 
                                if ($referral_User->user_type == 'Personal') {
                                    $convr_fee_name_ref = 'CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Business') {
                                    $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                    $convr_fee_name_ref = 'CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                    $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                }
                                $amountt = $refrlComm;
                                $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                                $conversion_feet = $fees_convr->fee_value;

                                $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                                $host_currency = trim($currency);
                                $user_currency = 'USD';

                                $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                                $convertedCurrArr = explode('##', $convertedCurrArr);
                                $user_invited_amountt = $convertedCurrArr[0];
                            } else {
                                $user_invited_amountt = $refrlComm;
                            }

                            //                                echo '<pre>';print_r($convertedCurrArr);exit;
                            if (!empty($referrer)) {
                                $refComm = new ReferralCommission([
                                    'user_id' => Session::get('user_id'),
                                    'referrer_id' => $referrer->user_id,
                                    'amount' => $user_invited_amountt,
                                    'action' => 'GLOBAL PAY',
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                ]);
                            }
                        }
                    }
                }

                $withdraw_amount_total = $withdraw_amount + $fees_amount + $R55_fees_amount;
//                    echo '/'.$withdraw_amount;
//                    echo '/'.$fees_amount;
//                    echo '/'.$R55_fees_amount;
//                    echo '/';

                if ($recordInfo->wallet_amount < $withdraw_amount_total) {
                    Session::put('error_session_message', "The amount in your account can't cover " . $recordInfo->currency . ' ' . ($fees_amount+$R55_fees_amount) . " fee for this transaction. Please try again with different amount.");
                    return Redirect::to('auth/global-withdraw');
                }

                User::where('id', Session::get('user_id'))->update(['verify_code' => '', 'updated_at' => date('Y-m-d H:i:s')]);
                $account_id = Session::get('account_id');


                $user_wallet = $recordInfo->wallet_amount - $withdraw_amount_total;
                User::where('id', Session::get('user_id'))->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

                $amount_admin_currency = $this->convertCurrency($recordInfo->currency, 'USD', ($withdraw_amount_total));
                $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                $admin_amount = $amount_admin_currencyArr[0];
                $admin_converstion_rate = $amount_admin_currencyArr[1];

                $adminInfo = User::where('id', 1)->first();
                $admin_wallet = ($adminInfo->wallet_amount + $admin_amount - $user_invited_amountt);
                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                if ($R55_fees_amount > 0) {
                    $billing_description = 'IP : ' . $this->get_client_ip() . '##Sender Fees: ' . $recordInfo->currency . ' ' . $fees_amount . '##R55 Fees: ' . $recordInfo->currency . ' ' . $R55_fees_amount;
                } else {
                    $billing_description = 'IP : ' . $this->get_client_ip() . '##Sender Fees: ' . $recordInfo->currency . ' ' . $fees_amount;
                }

                $refrence_id = time() . rand() . Session::get('user_id');
                $trans = new Transaction([
                    "user_id" => Session::get('user_id'),
                    "receiver_id" => 0,
                    "amount" => $withdraw_amount,
                    "fees" => $fees_amount + $R55_fees_amount,
                    "sender_fees" => $fees_amount + $R55_fees_amount,
                    "currency" => $recordInfo->currency,
                    "sender_currency" => $recordInfo->currency,
                    "receiver_currency" => 'USD',
                    "trans_type" => 2,
                    "trans_to" => 'Dafri_Wallet',
                    "trans_for" => 'Global Pay',
                    "refrence_id" => $refrence_id,
                    "user_close_bal" => $user_wallet,
                    "real_value" => $withdraw_amount_total,
                    "billing_description" => $billing_description,
                    "status" => 2,
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s'),
                ]);
                $trans->save();
                $TransId = $trans->id;
              
                $manulWthdr = new ManualWithdraw([
                    'user_id' => Session::get('user_id'),
                    'user_name' => $userName,
                    'user_email' => $recordInfo->email,
                    'trans_id' => $TransId,
                    'account_id' => $account_id,
                    'payment_type' => $payment_type,
                    'amount' => $withdraw_amount,
                    'status' => 0,
                    'withdraw_type'=>1,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $manulWthdr->save();
                $manualWithdrawID = $manulWthdr->id;

                if (!empty($referrer)) {
                    $refComm->save();
                    $refId = $refComm->id;
                    ReferralCommission::where('id', $refId)->update(['trans_id' => $TransId]);
                }

                $inactvAmnt = new InactiveAmount([
                    'user_id' => Session::get('user_id'),
                    'withdraw_req_id' => $manualWithdrawID,
                    'trans_id' => $TransId,
                    'amount' => $withdraw_amount,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $inactvAmnt->save();
                $inactiveAmountID = $inactvAmnt->id;
                Session::put('success_session_message', 'Global Pay request submitted successfully and will be processed shortly.');
                return Redirect::to('/overview');
            }
        }
    }

    return view('users.global_withdraw_otp', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);

    }
    
    public function manual_withdraw(Request $request) {
        $pageTitle = 'Manual Withdraw';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $approvedCountryArr = array('South Africa', 'Botswana', 'Namibia', 'Nigeria', 'Swaziland', 'Lesotho');
    /*    if (!in_array($recordInfo->country, $approvedCountryArr)) {
            //Session::flash('error_message', "Sorry manual withdraw service presently not available in your country! Use Card OR Crypto Withdraw.");
            Session::put('error_session_message', "Sorry, Manual Bank Withdrawal is not available in your country! . Please use other withdrawal methods.");
            //Session.save();
            return Redirect::to('auth/withdraw-request');
        } */

        if ($recordInfo->user_type == 'Personal') {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == 'Business') {
            $userName = strtoupper($recordInfo->business_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
            $userName = strtoupper($recordInfo->business_name);
        }

        $bankAccnt = WithdrawAccount::where('user_id', Session::get('user_id'))->where('withdraw_type','=', 0)->where('is_deleted', 0)->get();

        $input = Input::all();
        if (!empty($input) and $input['addAccount'] == 'true') {
           /*  $rules = array(
                'accNumbr' => 'required',
                'confirm_accNumbr' => 'required|same:accNumbr',
                'accName' => 'required',
                'bnkName' => 'required',
                'brnchCod' => 'required',
                'currncy' => 'required',
                'acctTyp' => 'required',
            );
            $customMessages = [
                'accNumbr.required' => 'Account number field can\'t be left blank',
                'accName.required' => 'Account name field can\'t be left blank',
                'bnkName.required' => 'Bank name field can\'t be left blank',
                'brnchCod.required' => 'Branch code field can\'t be left blank',
                'currncy.required' => 'Currency field can\'t be left blank',
                'acctTyp.required' => 'Account type field can\'t be left blank',
            ];
           $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/manual-withdraw');
                //                return Redirect::to('auth/manual-withdraw')->withErrors($validator)->withInput();
            } else { */

                $check_duplicate = WithdrawAccount::where('user_id', Session::get('user_id'))->where('withdraw_type','=', 0)->where('account_number', $input['accNumbr'])->where('is_deleted', 0)->count();
                // echo $check_duplicate; die;

                if ($check_duplicate >= 1) {
                 //   Session::put('error_session_message', 'Duplicate Entry Found With This Account Number');
                   // return Redirect::to('auth/manual-withdraw');
                }

                if (Count($bankAccnt) < 4) {
                    $wa = new WithdrawAccount([
                        'user_id' => Session::get('user_id'),
                        'user_name' => $userName,
                        'account_number' => $input['accNumbr'],
                        'account_name' => $userName,
                        'bank_name' => $input['bnkName'],
                        'branch_code' => $input['brnchCod'],
                        'account_currency' => $input['currncy'],
                        'account_type' => $input['acctTyp'],
                        'routing_number' => $input['routNumbr'],
                        'type_transfer'=>$input['type_transfer'],
                        'bnkAdd'=> $input['bnkAdd'],
                        'reasonPay'=> $input['reasonPay'],
                        'iBan'=> $input['iBan'],
                        'sorCode'=> $input['sorCode'],
                        'bic'=> $input['bic'],
                        'wisaEmail'=> $input['wisaEmail'],
                        'cotb'=> $input['cotb'],
                        'swc'=> $input['swc'],
                        'currncy'=> $input['currncy'],
                        'status' => 0,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $wa->save();

                    $emailSubject = 'DafriBank Digital | Manual Withdraw request has been sent';
                    $notif = new Notification([
                        'user_id' => $recordInfo->id,
                        'notif_subj' => $emailSubject,
                        'notif_body' => $emailSubject,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $notif->save();


                    //                    Session::flash('success_message', "Account Added Successfully.");
                    Session::put('success_session_message', "Account Added Successfully.");
                    //Session::put('success_message', "Account Added Successfully.");
                    return Redirect::back();
                } else {
                    //                    Session::flash('error_message', "You can add max 4 accounts!");
                    Session::put('error_session_message', "You can add max 4 accounts!");
                    return Redirect::back();
                }
        //    }
        }

        if (!empty($input) and (isset($input['saveWithdrawReq']) && $input['saveWithdrawReq'] == 'true')) {
            $rules = array(
                'account_id' => 'required',
            );
            $customMessages = [
                'account_id.required' => 'Select Bank Account!',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/manual-withdraw');
                //                return Redirect::to('auth/manual-withdraw')->withErrors($validator)->withInput();
            } else {


                $WithdrawAccount=WithdrawAccount::where('id',$input['account_id'])->first()->type_transfer;

                if($WithdrawAccount=="US Bank Transfer" || $WithdrawAccount=="IBAN EU Transfer"){

                    Session::put('error_session_message', "Services are not available at the moment for bank account-" . $WithdrawAccount);
                    return Redirect::to('auth/withdraw-request');

                }


                if($WithdrawAccount=="US Bank Transfer" || $WithdrawAccount=="UK Bank Transfer" || $WithdrawAccount=="Bank Wire Transfer (Global)" || $WithdrawAccount=="IBAN EU Transfer")
                {
                    $withdraw_amount = base64_decode(Session::get('withdrawAmntMW64'));
                    $chkAmount = $this->myCurrencyRate($recordInfo->currency,300);
                      if ($withdraw_amount < $chkAmount) {
                          $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 300);
                          $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                          Session::put('error_session_message', "You can't withdraw less than " . $recordInfo->currency . " " . $user_currncy_250);
                          return Redirect::to('auth/withdraw-request');
                      }
                }

                $otp = mt_rand(100000, 999999);
                $verifyCode = $this->encpassword($otp);

                User::where('id', Session::get('user_id'))->update(['verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s')]);

                //OTP Mail Start
                $emailId = $recordInfo->email;
                $userName = $userName;

                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">' . $otp . ' is your One Time Password to authenticate your Withdrawal Request to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                $emailSubject = "DafriBank Digital - Withdrawal Requested";
                //                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                $withdraw_amount = base64_decode(Session::get('withdrawAmntMW64'));
                $emailData['subject'] = $emailSubject;
                $emailData['userName'] = $userName;
                $emailData['otp'] = $otp;
                $emailData['category'] = $recordInfo->account_category;
                $emailData['withdraw_amount'] = $recordInfo->currency . ' ' . $withdraw_amount;

                Mail::send('emails.withdrawOTP', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });
                //OTP Mail End


                Session::put('show_otp_screen', 'yes');
                Session::put('account_id', $input['account_id']);
                if (isset($input['payment_type'])) {
                    Session::put('payment_type', $input['payment_type']);
                }
                return Redirect::to('auth/manual-withdraw');
            }
        }

        if (!empty($input) and (isset($input['validateOTP']) && $input['validateOTP'] == 'true')) {
            $rules = array(
                'otp_verify' => 'required',
            );
            $customMessages = [
                'otp_verify.required' => 'OTP field can\'t be left blank',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/manual-withdraw');
                //                return Redirect::to('auth/manual-withdraw')->withErrors($validator)->withInput();
            } else {
                $otp = $input['otp_verify'];
                $dateChk = date('Y-m-d H:i', strtotime('+15 minutes', strtotime($recordInfo->otp_time)));

                if (!password_verify($otp, $recordInfo->verify_code) || date('Y-m-d H:i') > $dateChk) {
                    Session::put('error_session_message', "You have entered wrong OTP code.");
                    return Redirect::to('auth/manual-withdraw');
                    //                    return Redirect::to('auth/manual-withdraw')->withErrors('You have entered wrong OTP code.');
                } else {

                    $requestExist = ManualWithdraw::where('user_id', Session::get('user_id'))->whereIn('status', array(0, 2))->first();
                    //                    echo '<pre>';print_r($requestExist);exit;
                    if ($requestExist) {
                        Session::put('error_session_message', 'Your previous withdrawal request not completed yet.');
                        return Redirect::to('auth/manual-withdraw');
                    }

                    //to check same amount withdrawal in 24 hours
                    $date=date('Y-m-d');
                    $requestExist_24 = ManualWithdraw::where('user_id', Session::get('user_id'))->where('amount',base64_decode(Session::get('withdrawAmntMW64')))->whereDate('created_at',$date)->count();
                    if($requestExist_24 > 0)
                    {
                    Session::put('error_session_message', 'We were unable to process this request because you previously transferred identical amount in the less 24h. Please try again with a different amount.');
                    return Redirect::to('auth/withdraw-request');
                    }

                    $currency = $recordInfo->currency;

                    $payment_type = 'normal';
                    if (Session::has('payment_type')) {
                        $payment_type = Session::get('payment_type');
                    }

                    $user_invited_amountt = 0;
                    $R55_fees_amount = 0;
                    $refId=0;
                    $withdraw_amount = base64_decode(Session::get('withdrawAmntMW64'));  
                  //  echo $recordInfo->user_type; die;
                    if ($recordInfo->user_type == 'Personal') {
                        //$fee_name = 'MANUAL_WITHDRAW';
                        if ($recordInfo->account_category == "Silver") {
                            $fee_name = 'MANUAL_WITHDRAW';
                        } else if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'MANUAL_WITHDRAW_GOLD';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'MANUAL_WITHDRAW_PLATINUM';
                        } else if ($recordInfo->account_category == "Private Wealth") {
                            $fee_name = 'MANUAL_WITHDRAW_PRIVATE_WEALTH';
                        } else {
                            $fee_name = 'MANUAL_WITHDRAW';
                        }

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;

                        if ($payment_type == 'fast') {
                            $fee_name1 = 'R55_FEE';
                            $fees1 = Fee::where('fee_name', $fee_name1)->first();
                            $R55_fees_amount = ($withdraw_amount * $fees1->fee_value) / 100;
                        }


                        if ($recordInfo->referral != 'na') {
                            $refrlComm = ($fees_amount * 25) / 100;
                            $referlCode = 'refid=' . $recordInfo->referral;
                            $referrer = Referalcode::where('referal_link', $referlCode)->first();
                            if ($currency != 'USD') {
                                $referral_User=User::where('id',$referrer->user_id)->first(); 
                                if ($referral_User->user_type == 'Personal') {
                                    $convr_fee_name_ref = 'CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Business') {
                                    $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                    $convr_fee_name_ref = 'CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                    $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                }
                                $amountt = $refrlComm;
                                $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                                $conversion_feet = $fees_convr->fee_value;

                                $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                                $host_currency = trim($currency);
                                $user_currency = 'USD';

                                $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                                $convertedCurrArr = explode('##', $convertedCurrArr);
                                $user_invited_amountt = $convertedCurrArr[0];
                            } else {
                                $user_invited_amountt = $refrlComm;
                            }

                            //                                echo '<pre>';print_r($convertedCurrArr);exit;
                            if (!empty($referrer)) {
                                $refComm = new ReferralCommission([
                                    'user_id' => Session::get('user_id'),
                                    'referrer_id' => $referrer->user_id,
                                    'amount' => $user_invited_amountt,
                                    'action' => 'MANUAL WITHDRAW',
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                ]);
                                $refComm->save();
                                $refId = $refComm->id;
                            }
                        }
                    } else if ($recordInfo->user_type == 'Business') {
                        //$fee_name = 'MERCHANT_MANUAL_WITHDRAW';


                        if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW_PLATINUM';
                        } else if ($recordInfo->account_category == "Enterprises") {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW_ENTERPRIS';
                        } else {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW';
                        } 

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;

                        if ($payment_type == 'fast') {
                            $fee_name1 = 'MERCHANT_R55_FEE';
                            $fees1 = Fee::where('fee_name', $fee_name1)->first();
                            $R55_fees_amount = ($withdraw_amount * $fees1->fee_value) / 100;
                        }

                        if ($recordInfo->referral != 'na') {
                            $refrlComm = ($fees_amount * 25) / 100;
                            $referlCode = 'refid=' . $recordInfo->referral;
                            $referrer = Referalcode::where('referal_link', $referlCode)->first();
                            if ($currency != 'USD') {
                                $referral_User=User::where('id',$referrer->user_id)->first(); 
                                if ($referral_User->user_type == 'Personal') {
                                    $convr_fee_name_ref = 'CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Business') {
                                    $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                    $convr_fee_name_ref = 'CONVERSION_FEE';
                                } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                    $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                }
                                $amountt = $refrlComm;
                                $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                                $conversion_feet = $fees_convr->fee_value;

                                $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                                $host_currency = trim($currency);
                                $user_currency = 'USD';

                                $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                                $convertedCurrArr = explode('##', $convertedCurrArr);
                                $user_invited_amountt = $convertedCurrArr[0];
                            } else {
                                $user_invited_amountt = $refrlComm;
                            }

                            //                                echo '<pre>';print_r($convertedCurrArr);exit;
                            if (!empty($referrer)) {
                                $refComm = new ReferralCommission([
                                    'user_id' => Session::get('user_id'),
                                    'referrer_id' => $referrer->user_id,
                                    'amount' => $user_invited_amountt,
                                    'action' => 'MANUAL WITHDRAW',
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s')
                                ]);
                                $refComm->save();
                                $refId = $refComm->id;
                            }
                        }
                    } else {
                        if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                            //$fee_name = 'MANUAL_WITHDRAW';
                            if ($recordInfo->account_category == "Silver") {
                                $fee_name = 'MANUAL_WITHDRAW';
                            } else if ($recordInfo->account_category == "Gold") {
                                $fee_name = 'MANUAL_WITHDRAW_GOLD';
                            } else if ($recordInfo->account_category == "Platinum") {
                                $fee_name = 'MANUAL_WITHDRAW_PLATINUM';
                            } else if ($recordInfo->account_category == "Private Wealth") {
                                $fee_name = 'MANUAL_WITHDRAW_PRIVATE_WEALTH';
                            } else {
                                $fee_name = 'MANUAL_WITHDRAW';
                            }
                            //DB::enableQueryLog();

                            $fees = Fee::where('fee_name', $fee_name)->first();
                            // dd(DB::getQueryLog());
                            $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;

                            if ($payment_type == 'fast') {
                                $fee_name1 = 'R55_FEE';
                                $fees1 = Fee::where('fee_name', $fee_name1)->first();
                                $R55_fees_amount = ($withdraw_amount * $fees1->fee_value) / 100;
                            }

                            if ($recordInfo->referral != 'na') {
                                $refrlComm = ($fees_amount * 25) / 100;
                                $referlCode = 'refid=' . $recordInfo->referral;
                                $referrer = Referalcode::where('referal_link', $referlCode)->first();
                                if ($currency != 'USD') {
                                    $referral_User=User::where('id',$referrer->user_id)->first(); 
                                    if ($referral_User->user_type == 'Personal') {
                                        $convr_fee_name_ref = 'CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Business') {
                                        $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                        $convr_fee_name_ref = 'CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                        $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                    }
                                    $amountt = $refrlComm;
                                    $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                                    $conversion_feet = $fees_convr->fee_value;

                                    $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                                    $host_currency = trim($currency);
                                    $user_currency = 'USD';

                                    $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                                    $convertedCurrArr = explode('##', $convertedCurrArr);
                                    $user_invited_amountt = $convertedCurrArr[0];
                                } else {
                                    $user_invited_amountt = $refrlComm;
                                }

                                //                                echo '<pre>';print_r($convertedCurrArr);exit;
                                if (!empty($referrer)) {
                                    $refComm = new ReferralCommission([
                                        'user_id' => Session::get('user_id'),
                                        'referrer_id' => $referrer->user_id,
                                        'amount' => $user_invited_amountt,
                                        'action' => 'MANUAL WITHDRAW',
                                        'created_at' => date('Y-m-d H:i:s'),
                                        'updated_at' => date('Y-m-d H:i:s')
                                    ]);
                                    $refComm->save();
                                    $refId = $refComm->id;
                                }
                            }
                        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                           
                            if ($recordInfo->account_category == "Gold") {
                                $fee_name = 'MERCHANT_MANUAL_WITHDRAW';
                            } else if ($recordInfo->account_category == "Platinum") {
                                $fee_name = 'MERCHANT_MANUAL_WITHDRAW_PLATINUM';
                            } else if ($recordInfo->account_category == "Enterprises") {
                                $fee_name = 'MERCHANT_MANUAL_WITHDRAW_ENTERPRIS';
                            } else {
                                $fee_name = 'MERCHANT_MANUAL_WITHDRAW';
                            }

                            $fees = Fee::where('fee_name', $fee_name)->first();
                            $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;

                            if ($payment_type == 'fast') {
                                $fee_name1 = 'MERCHANT_R55_FEE';
                                $fees1 = Fee::where('fee_name', $fee_name1)->first();
                                $R55_fees_amount = ($withdraw_amount * $fees1->fee_value) / 100;
                            }

                            if ($recordInfo->referral != 'na') {
                                $refrlComm = ($fees_amount * 25) / 100;
                                $referlCode = 'refid=' . $recordInfo->referral;
                                $referrer = Referalcode::where('referal_link', $referlCode)->first();
                                if ($currency != 'USD') {
                                    $referral_User=User::where('id',$referrer->user_id)->first(); 
                                    if ($referral_User->user_type == 'Personal') {
                                        $convr_fee_name_ref = 'CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Business') {
                                        $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                        $convr_fee_name_ref = 'CONVERSION_FEE';
                                    } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                        $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                                    }
                                    $amountt = $refrlComm;
                                    $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                                    $conversion_feet = $fees_convr->fee_value;

                                    $user_invited_amount1 = $amountt - ($amountt * $conversion_feet) / 100;

                                    $host_currency = trim($currency);
                                    $user_currency = 'USD';

                                    $convertedCurrArr = $this->convertCurrency($host_currency, $user_currency, $user_invited_amount1);
                                    $convertedCurrArr = explode('##', $convertedCurrArr);
                                    $user_invited_amountt = $convertedCurrArr[0];
                                } else {
                                    $user_invited_amountt = $refrlComm;
                                }

                                //                                echo '<pre>';print_r($convertedCurrArr);exit;
                                if (!empty($referrer)) {
                                    $refComm = new ReferralCommission([
                                        'user_id' => Session::get('user_id'),
                                        'referrer_id' => $referrer->user_id,
                                        'amount' => $user_invited_amountt,
                                        'action' => 'MANUAL WITHDRAW',
                                        'created_at' => date('Y-m-d H:i:s'),
                                        'updated_at' => date('Y-m-d H:i:s')
                                    ]);
                                    $refComm->save();
                                    $refId = $refComm->id;
                                }
                            }
                        }
                    }

                    $withdraw_amount_total = $withdraw_amount + $fees_amount + $R55_fees_amount;
//                    echo '/'.$withdraw_amount;
//                    echo '/'.$fees_amount;
//                    echo '/'.$R55_fees_amount;
//                    echo '/';

                    if ($recordInfo->wallet_amount < $withdraw_amount_total) {
                        Session::put('error_session_message', "The amount in your account can't cover " . $recordInfo->currency . ' ' . ($fees_amount+$R55_fees_amount) . " fee for this transaction. Please try again with different amount.");
                        return Redirect::to('auth/withdraw-request');
                    }

                    User::where('id', Session::get('user_id'))->update(['verify_code' => '', 'updated_at' => date('Y-m-d H:i:s')]);
                    $account_id = Session::get('account_id');


                    $user_wallet = $recordInfo->wallet_amount - $withdraw_amount_total;
                    User::where('id', Session::get('user_id'))->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

                    $amount_admin_currency = $this->convertCurrency($recordInfo->currency, 'USD', ($withdraw_amount_total));
                    $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                    $admin_amount = $amount_admin_currencyArr[0];
                    $admin_converstion_rate = $amount_admin_currencyArr[1];

                    $adminInfo = User::where('id', 1)->first();
                    $admin_wallet = ($adminInfo->wallet_amount + $admin_amount - $user_invited_amountt);
                    User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                    if ($R55_fees_amount > 0) {
                        $billing_description = 'IP : ' . $this->get_client_ip() . '##Sender Fees: ' . $recordInfo->currency . ' ' . $fees_amount . '##R55 Fees: ' . $recordInfo->currency . ' ' . $R55_fees_amount;
                    } else {
                        $billing_description = 'IP : ' . $this->get_client_ip() . '##Sender Fees: ' . $recordInfo->currency . ' ' . $fees_amount;
                    }

                    $refrence_id = time() . rand() . Session::get('user_id');
                    $trans = new Transaction([
                        "user_id" => Session::get('user_id'),
                        "receiver_id" => 0,
                        "amount" => $withdraw_amount,
                        "fees" => $fees_amount + $R55_fees_amount,
                        "sender_fees" => $fees_amount + $R55_fees_amount,
                        "currency" => $recordInfo->currency,
                        "sender_currency" => $recordInfo->currency,
                        "receiver_currency" => 'USD',
                        "trans_type" => 2,
                        "trans_to" => 'Dafri_Wallet',
                        "trans_for" => 'Manual Withdraw',
                        "refrence_id" => $refrence_id,
                        "user_close_bal" => $user_wallet,
                        "real_value" => $withdraw_amount_total,
                        "billing_description" => $billing_description,
                        "status" => 2,
                        "created_at" => date('Y-m-d H:i:s'),
                        "updated_at" => date('Y-m-d H:i:s'),
                    ]);
                    $trans->save();
                    $TransId = $trans->id;

                    if($refId > 0){
                        ReferralCommission::where('id', $refId)->update(['trans_id' => $TransId]);
                    }

                    $manulWthdr = new ManualWithdraw([
                        'user_id' => Session::get('user_id'),
                        'user_name' => $userName,
                        'user_email' => $recordInfo->email,
                        'trans_id' => $TransId,
                        'account_id' => $account_id,
                        'payment_type' => $payment_type,
                        'amount' => $withdraw_amount,
                        'status' => 0,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $manulWthdr->save();
                    $manualWithdrawID = $manulWthdr->id;

                    $inactvAmnt = new InactiveAmount([
                        'user_id' => Session::get('user_id'),
                        'withdraw_req_id' => $manualWithdrawID,
                        'trans_id' => $TransId,
                        'amount' => $withdraw_amount,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $inactvAmnt->save();
                    $inactiveAmountID = $inactvAmnt->id;
                    //                    Session::flash('success_message', 'Withdraw request saved successfully, Our finance team will check and get back to you soon.');
                    Session::put('success_session_message', 'Withdrawal request submitted successfully and will be processed shortly.');
                    return Redirect::to('/overview');
                }
            }
        }

        return view('users.manual_withdraw', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'bankAccnt' => $bankAccnt, 'account_name' => $userName]);
    }

    public function manual_withdraw_old(Request $request) {
        $pageTitle = 'Manual Withdraw';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $approvedCountryArr = array('South Africa', 'Botswana', 'Namibia', 'Nigeria', 'Swaziland', 'Lesotho');
        if (!in_array($recordInfo->country, $approvedCountryArr)) {
            //Session::flash('error_message', "Sorry manual withdraw service presently not available in your country! Use Card OR Crypto Withdraw.");
            Session::put('error_session_message', "Sorry, Manual Bank Withdrawal is not available in your country! . Please use other withdrawal methods.");
            //Session.save();
            return Redirect::to('auth/withdraw-request');
        }

        if ($recordInfo->user_type == 'Personal') {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == 'Business') {
            $userName = strtoupper($recordInfo->business_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
            $userName = strtoupper($recordInfo->business_name);
        }

        $bankAccnt = WithdrawAccount::where('user_id', Session::get('user_id'))->where('is_deleted', 0)->get();

        $input = Input::all();
        if (!empty($input) and $input['addAccount'] == 'true') {
            $rules = array(
                'accNumbr' => 'required',
                'confirm_accNumbr' => 'required|same:accNumbr',
                'accName' => 'required',
                'bnkName' => 'required',
                'brnchCod' => 'required',
                'currncy' => 'required',
                'acctTyp' => 'required',
            );
            $customMessages = [
                'accNumbr.required' => 'Account number field can\'t be left blank',
                'accName.required' => 'Account name field can\'t be left blank',
                'bnkName.required' => 'Bank name field can\'t be left blank',
                'brnchCod.required' => 'Branch code field can\'t be left blank',
                'currncy.required' => 'Currency field can\'t be left blank',
                'acctTyp.required' => 'Account type field can\'t be left blank',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/manual-withdraw');
//                return Redirect::to('auth/manual-withdraw')->withErrors($validator)->withInput();
            } else {
                if (Count($bankAccnt) < 4) {
                    $wa = new WithdrawAccount([
                        'user_id' => Session::get('user_id'),
                        'user_name' => $userName,
                        'account_number' => $input['accNumbr'],
                        'account_name' => $userName,
                        'bank_name' => $input['bnkName'],
                        'branch_code' => $input['brnchCod'],
                        'account_currency' => $input['currncy'],
                        'account_type' => $input['acctTyp'],
                        'routing_number' => $input['routNumbr'],
                        'status' => 0,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $wa->save();

//                    Session::flash('success_message', "Account Added Successfully.");
                    Session::put('success_session_message', "Account Added Successfully.");
                    //Session::put('success_message', "Account Added Successfully.");
                    return Redirect::to('auth/manual-withdraw');
                } else {
//                    Session::flash('error_message', "You can add max 4 accounts!");
                    Session::put('error_session_message', "You can add max 4 accounts!");
                    return Redirect::to('auth/manual-withdraw');
                }
            }
        }

        if (!empty($input) and (isset($input['saveWithdrawReq']) && $input['saveWithdrawReq'] == 'true')) {
            $rules = array(
                'account_id' => 'required',
            );
            $customMessages = [
                'account_id.required' => 'Select Bank Account!',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/manual-withdraw');
//                return Redirect::to('auth/manual-withdraw')->withErrors($validator)->withInput();
            } else {
                $otp = mt_rand(100000, 999999);
                $verifyCode = $this->encpassword($otp);

                User::where('id', Session::get('user_id'))->update(['verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s')]);

                //OTP Mail Start
                $emailId = $recordInfo->email;
                $userName = $userName;

                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">' . $otp . ' is your One Time Password to authenticate your Withdrawal Request to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                $emailSubject = "DafriBank Digital - Withdrawal Requested";
//                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                $withdraw_amount = base64_decode(Session::get('withdrawAmntMW64'));
                $emailData['subject'] = $emailSubject;
                $emailData['userName'] = $userName;
                $emailData['otp'] = $otp;
                $emailData['category'] = $recordInfo->account_category;
                $emailData['withdraw_amount'] = $recordInfo->currency . ' ' . $withdraw_amount;

                Mail::send('emails.withdrawOTP', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });
                //OTP Mail End

                Session::put('show_otp_screen', 'yes');
                Session::put('account_id', $input['account_id']);
                return Redirect::to('auth/manual-withdraw');
            }
        }

        if (!empty($input) and (isset($input['validateOTP']) && $input['validateOTP'] == 'true')) {
            $rules = array(
                'otp_verify' => 'required',
            );
            $customMessages = [
                'otp_verify.required' => 'OTP field can\'t be left blank',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/manual-withdraw');
//                return Redirect::to('auth/manual-withdraw')->withErrors($validator)->withInput();
            } else {
                $otp = $input['otp_verify'];
                $dateChk = date('Y-m-d H:i', strtotime('+15 minutes', strtotime($recordInfo->otp_time)));

                if (!password_verify($otp, $recordInfo->verify_code) || date('Y-m-d H:i') > $dateChk) {
                    Session::put('error_session_message', "You have entered wrong OTP code.");
                    return Redirect::to('auth/manual-withdraw');
//                    return Redirect::to('auth/manual-withdraw')->withErrors('You have entered wrong OTP code.');
                } else {

                    $requestExist = ManualWithdraw::where('user_id', Session::get('user_id'))->whereIn('status', array(0, 2))->first();
//                    echo '<pre>';print_r($requestExist);exit;
                    if ($requestExist) {
                        Session::put('error_session_message', 'Your previous withdrawal request not completed yet.');
                        return Redirect::to('auth/manual-withdraw');
                    }

                    $withdraw_amount = base64_decode(Session::get('withdrawAmntMW64'));
                    if ($recordInfo->user_type == 'Personal') {
                        $fee_name = 'MANUAL_WITHDRAW';

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                    } else if ($recordInfo->user_type == 'Business') {
                        $fee_name = 'MERCHANT_MANUAL_WITHDRAW';

                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                    } else {
                        if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                            $fee_name = 'MANUAL_WITHDRAW';

                            $fees = Fee::where('fee_name', $fee_name)->first();
                            $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                        } else if ($user->user_type == 'Agent' and $user->business_name != "") {
                            $fee_name = 'MERCHANT_MANUAL_WITHDRAW';

                            $fees = Fee::where('fee_name', $fee_name)->first();
                            $fees_amount = ($withdraw_amount * $fees->fee_value) / 100;
                        }
                    }

                    $withdraw_amount_total = $withdraw_amount + $fees_amount;

                    if ($recordInfo->wallet_amount < $withdraw_amount_total) {
                        Session::put('error_session_message', "Insufficient Balance.");
                        return Redirect::to('auth/withdraw-request');
                    }

                    User::where('id', Session::get('user_id'))->update(['verify_code' => '', 'updated_at' => date('Y-m-d H:i:s')]);
                    $account_id = Session::get('account_id');

                    $user_wallet = $recordInfo->wallet_amount - $withdraw_amount_total;
                    User::where('id', Session::get('user_id'))->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

                    $amount_admin_currency = $this->convertCurrency('USD', $recordInfo->currency, $fees_amount);
                    $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                    $admin_amount = $amount_admin_currencyArr[0];
                    $admin_converstion_rate = $amount_admin_currencyArr[1];

                    $adminInfo = User::where('id', 1)->first();
                    $admin_wallet = ($adminInfo->wallet_amount + $admin_amount);
                    User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                    $refrence_id = time() . rand() . Session::get('user_id');
                    $trans = new Transaction([
                        "user_id" => Session::get('user_id'),
                        "receiver_id" => 0,
                        "amount" => $withdraw_amount,
                        "fees" => $fees_amount,
                        "currency" => $recordInfo->currency,
                        "trans_type" => 2,
                        "trans_to" => 'Dafri_Wallet',
                        "trans_for" => 'Manual Withdraw',
                        "refrence_id" => $refrence_id,
                        "user_close_bal" => $user_wallet,
                        "real_value" => $withdraw_amount_total,
                        "billing_description" => 'IP:' . $this->get_client_ip(),
                        "status" => 2,
                        "created_at" => date('Y-m-d H:i:s'),
                        "updated_at" => date('Y-m-d H:i:s'),
                    ]);
                    $trans->save();
                    $TransId = $trans->id;

                    $manulWthdr = new ManualWithdraw([
                        'user_id' => Session::get('user_id'),
                        'user_name' => $userName,
                        'user_email' => $recordInfo->email,
                        'trans_id' => $TransId,
                        'account_id' => $account_id,
                        'amount' => $withdraw_amount,
                        'status' => 0,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $manulWthdr->save();
                    $manualWithdrawID = $manulWthdr->id;

                    $inactvAmnt = new InactiveAmount([
                        'user_id' => Session::get('user_id'),
                        'withdraw_req_id' => $manualWithdrawID,
                        'trans_id' => $TransId,
                        'amount' => $withdraw_amount,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $inactvAmnt->save();
                    $inactiveAmountID = $inactvAmnt->id;
//                    Session::flash('success_message', 'Withdraw request saved successfully, Our finance team will check and get back to you soon.');
                    Session::put('success_session_message', 'Withdrawal request submitted successfully and will be processed shortly.');
                    return Redirect::to('/overview');
                }
            }
        }

        return view('users.manual_withdraw', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'bankAccnt' => $bankAccnt, 'account_name' => $userName]);
    }

    public function resentOtpManualWithdraw(Request $request) {
        if (!empty($request->has('user_id'))) {
            $otp = mt_rand(100000, 999999);
            $verifyCode = $this->encpassword($otp);
            User::where('id', $request->user_id)->update(['verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s')]);

            $recordInfo = User::where('id', $request->user_id)->first();

            if ($recordInfo->user_type == 'Personal') {
                $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
            } else if ($recordInfo->user_type == 'Business') {
                $userName = strtoupper($recordInfo->business_name);
            } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
            } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                $userName = strtoupper($recordInfo->business_name);
            }

            $emailId = $recordInfo->email;
            $userName = $userName;

            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">' . $otp . ' is your One Time Password to authenticate your Withdrawal Request to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
            $emailSubject = "DafriBank Digital - Withdrawal Requested";
//            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

            $withdraw_amount = base64_decode(Session::get('withdrawAmntMW64'));
            $emailData['subject'] = $emailSubject;
            $emailData['userName'] = $userName;
            $emailData['otp'] = $otp;
            $emailData['category'] = $recordInfo->account_category;
            ;
            $emailData['withdraw_amount'] = $recordInfo->currency . ' ' . $withdraw_amount;

            Mail::send('emails.withdrawOTP', $emailData, function ($message)use ($emailData, $emailId) {
                $message->to($emailId, $emailId)
                        ->subject($emailData['subject']);
            });
            echo true;
            exit;
        }
    }

    public function kyc_detail(Request $request) {
        $pageTitle = 'User KYC Details';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        return view('users.kyc_detail', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function compliance(Request $request) {
        $pageTitle = 'User Compliance';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $input = Input::all();

        if (!empty($input)) {
            if (Input::hasFile('certificate_of_incorporation')) {
                $file = Input::file('certificate_of_incorporation');
                $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                $input['certificate_of_incorporation'] = $uploadedFileName;
            } else {
                unset($input['certificate_of_incorporation']);
            }
            if (Input::hasFile('article')) {
                $file = Input::file('article');
                $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                $input['article'] = $uploadedFileName;
            } else {
                unset($input['article']);
            }
            if (Input::hasFile('memorandum')) {
                $file = Input::file('memorandum');
                $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                $input['memorandum'] = $uploadedFileName;
            } else {
                unset($input['memorandum']);
            }
            if (Input::hasFile('tax_certificate')) {
                $file = Input::file('tax_certificate');
                $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                $input['tax_certificate'] = $uploadedFileName;
            } else {
                unset($input['tax_certificate']);
            }
            if (Input::hasFile('address_proof')) {
                $file = Input::file('address_proof');
                $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                $input['address_proof'] = $uploadedFileName;
            } else {
                unset($input['address_proof']);
            }
            if (Input::hasFile('identity')) {
                $file = Input::file('identity');
                $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                $input['identity'] = $uploadedFileName;
            } else {
                unset($input['identity']);
            }
            if (Input::hasFile('person_identity')) {
                $file = Input::file('person_identity');
                $uploadedFileName = $this->uploadImage($file, DOCUMENT_FULL_UPLOAD_PATH);
                //$this->resizeImage($uploadedFileName, DOCUMENT_FULL_UPLOAD_PATH, DOCUMENT_SMALL_UPLOAD_PATH, DOCUMENT_MW, DOCUMENT_MH);
                $input['person_identity'] = $uploadedFileName;
            } else {
                unset($input['person_identity']);
            }

            $serialisedData = $this->serialiseFormData($input, 1);
            User::where('id', $recordInfo->id)->update($serialisedData);

            Session::put('success_session_message', 'Documents uploaded successfully');
            return Redirect::to('auth/compliance');
        }
        return view('users.compliance', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function deleteWithdrawAccount($account_id) {
        $account = WithdrawAccount::where('id', $account_id)->first();
        if (!empty($account)) {
            $chkUser = User::where('id', $account->user_id)->first();
            if (!empty($chkUser)) {
                WithdrawAccount::where('id', $account_id)->update(['is_deleted' => 1, 'updated_at' => date('Y-m-d H:i:s')]);
                Session::put('success_session_message', 'Account Successfully removed from system.');
//                Session::flash('success_message', 'Account Successfully removed from system.');
                  return Redirect::back();
            } else {
//                Session::flash('error_message', 'Invalid User ID.');
                Session::put('error_session_message', 'Invalid User ID.');
                return Redirect::back();
            }
        } else {
//            Session::flash('error_message', 'Invalid Account ID.');
            Session::put('error_session_message', 'Invalid Account ID.');
            return Redirect::back();
        }
    }

    public function private_banking(Request $request) {
        $pageTitle = 'Private Banking';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        return view('users.private_banking', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function buyCellCrypto() {
        $pageTitle = 'Buy Sell Crypto';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        return view('users.buy-cell-crypto', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function clientwithdrawal() {
        $pageTitle = 'Generate Withdraw Request';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $agentInfo = Agent::where('user_id', $recordInfo->id)->first();
        $wthdrwReq = WithdrawRequest::where('agent_id', $agentInfo->id)->where('req_type', 'Agent')->orderBy('id', 'ASC')->get();

        $input = Input::all();
        if (!empty($input)) {
            $id = base64_decode($input['req']);
            $req = WithdrawRequest::where('id', $id)->first();
            if (!empty($req)) {
                if ($req->agent_id == Session::get('user_id')) {
                    //                    Session::flash('error_message', "Request Agent ID not match!");
                    Session::put('error_session_message', "Request Agent ID not match!");
                    return Redirect::to('/auth/agent-withdraw-request-list');
                }

                //Check Agent Withdraw Limit Start
                $dt = date('Y-m-d');
                $startDT = $dt . ' 00:00:00';
                $endDT = $dt . ' 23:59:59';
                $agent = Agent::where('user_id', Session::get('user_id'))->first();
                //DB::enableQueryLog();
                //$todyTransAmnt = Transaction::where('user_id',Session::get('user_id'))->orWhere('receiver_id',$agent->id)->where('trans_type',2)->whereBetween('created_at',array($startDT,$endDT))->sum('amount');
                $todyTransAmnt = DB::select("select sum(`amount`) as aggregate from `transactions` where (`user_id` = " . Session::get('user_id') . " or `receiver_id` = " . $agent->id . ") and `trans_type` = 2 and `created_at` between '" . $startDT . "' and '" . $endDT . "'");
                $todyTransAmnt = $todyTransAmnt[0]->aggregate;
                //dd(DB::getQueryLog());

                $chkAmountUSD = $this->fetchCurrencyRate($recordInfo->currency, $todyTransAmnt);
                //echo "USD Amount: ".$chkAmountUSD; exit;
                if ($chkAmountUSD > 10000) {
                    //                    Session::flash('error_message', "Sorry, Your daily spending limit is over.");
                    Session::put('error_session_message', "Sorry, Your daily spending limit is over.");
                    return Redirect::to('/auth/agent-withdraw-request-list');
                }

                //Check Agent Withdraw Limit End
                //Update User and Agent Wallet Start
                $user = User::where('id', $req->user_id)->first(); //Withdraw Requester User    
                $withdrawAmount = $req->amount;
                $amount_agent_currency = $this->convertCurrency($user->currency, $recordInfo->currency, $withdrawAmount);
                $amount_agent_currencyArr = explode("##", $amount_agent_currency);
                $agent_amount = $amount_agent_currencyArr[0];
                $agent_converstion_rate = $amount_agent_currencyArr[1];

                $agentWallet = $recordInfo->wallet_amount + $agent_amount;
                User::where('id', Session::get('user_id'))->update(['wallet_amount' => $agentWallet]);

                $getTransID = InactiveAmount::where('withdraw_req_id', $id)->first();

                $agent = Agent::where('id', $req->agent_id)->first();

                //Client Fees for withdraw Start

                /* $fees = Fee::where('fee_name','AGENT_WITHDRAW_REQUEST')->first();
                  $withdrawFees = ($fees->fee_value * $withdrawAmount) / 100;
                  $withdrawFees = number_format($withdrawFees,2,'.','');
                  $user = User::where('id',$req->user_id)->first();
                  $userWallet = $user->wallet_amount - $withdrawFees;
                  User::where('id',$req->user_id)->update(['wallet_amount'=>$userWallet,"updated_at"=>date('Y-m-d H:i:s')]); */

                //Client Fees for withdraw End

                Transaction::where('id', $getTransID->trans_id)->update(["billing_description" => "Amount " . $user->currency . " " . $withdrawAmount . " and Conversion rate " . $agent_converstion_rate . "X" . $withdrawAmount . "=" . $agent_amount, "status" => 1, "updated_at" => date('Y-m-d H:i:s')]);

                InactiveAmount::where('withdraw_req_id', $id)->delete();
                WithdrawRequest::where('id', $id)->delete();
                //Update User and Agent Wallet End
                //Mail To User Start
                $user = User::where('id', $req->user_id)->first();
                $agentName = strtoupper($agent->first_name . ' ' . $agent->last_name);
                if ($user->user_type == 'Personal') {
                    $user_name = strtoupper($user->first_name);
                } else if ($user->user_type == 'Business') {
                    $user_name = strtoupper($user->business_name);
                } else if ($user->user_type == 'Agent' and $user->first_name != "") {
                    $user_name = strtoupper($user->first_name);
                } else if ($user->user_type == 'Agent' and $user->business_name != "") {
                    $user_name = strtoupper($user->business_name);
                }

                $emailId = $user->email;
                $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Receipt Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td align="center"><table class="col-600" width="900" border="0" align="center" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400"><span style="color: #A2A2A2">Hi</span> ' . $user_name . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your withdrawal request for amount ' . $user->currency . ' ' . $withdrawAmount . ' has been accepted by agent. you can collect amount from ' . $agentName . '.<br><br>If this is not you, please contact administrator.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/business-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><a href="' . HTTP_PATH . '/business-login" style="color: #1381D0; text-decoration: none; font-size: 18px">Head to your dashboard </a> to see more information on this payment<p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                $emailSubject = "DafriBank Digital | Withdrawal request completed for amount " . $user->currency . ' ' . $withdrawAmount;
                //                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                $emailData['subject'] = $emailSubject;
                $emailData['user_name'] = $user_name;
                $emailData['withdrawAmount'] = $user->currency . ' ' . $withdrawAmount;
                $emailData['agentName'] = $agentName;
                //        $emailData['loginURL'] = $loginURL;

                Mail::send('emails.withdrawRequest', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });
                //Mail To User End
                //                Session::flash('success_message', "Withdraw process completed successfully.");
                Session::put('success_session_message', "Withdraw process completed successfully.");
                return Redirect::to('/auth/agent-withdraw-request-list');
            }
        }

        $query = new Transaction();
        $query = $query->sortable();
        $query = $query->where("user_id", Session::get('user_id'));
        $query = $query->orWhere("receiver_id", Session::get('user_id'))->orWhere('receiver_id', $agentInfo->id);
        $trans = $query->orderBy('id', 'DESC')->paginate(3);

        return view('users.clientWithdrawReq', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'wthdrwReq' => $wthdrwReq, 'agentInfo' => $agentInfo, 'trans' => $trans]);
    }

    public function merchantWithdrawReq() {
        $pageTitle = 'Generate Withdraw Request';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $agentInfo = Agent::where('user_id', $recordInfo->id)->first();
        //print_r($agentInfo); die;
        $wthdrwReq = WithdrawRequest::where('agent_id', $recordInfo->id)->where('req_type', 'Merchant')->orderBy('id', 'DESC')->get();
        $input = Input::all();
        if (!empty($input)) {

            $id = base64_decode($input['req']);
            $req = WithdrawRequest::where('id', $id)->first();
            if (!empty($req)) {
                if ($req->user_id == Session::get('user_id')) {
                    // Session::flash('error_message', "Request Agent ID not match!");
                    Session::put('error_session_message', "Request Merchant ID not match!");
                    return Redirect::to('/auth/merchant-withdraw-request-list');
                }
                $withdrawAmount = $req->amount;
                $transLimitFlag = $this->checkUserTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $withdrawAmount);

                $transLimitArr = explode("###", $transLimitFlag);
                //print_r($transLimitArr); exit;

                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                    //                    Session::flash('error_message', $transLimitArr[1]);
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('auth/fund-transfer');
                }

                $user = User::where('id', $req->user_id)->first();
                if ($user->user_type == 'Personal' && $user->first_name != '' || $user->user_type == 'Agent' && $user->first_name != '') {
                    if ($user->account_category == "Silver") {
                        $r_fee_name = 'ONLINE_PAYMENT_RECEIVER';  
                    } else if ($user->account_category == "Gold") {
                        $r_fee_name = 'ONLINE_PAYMENT_RECEIVER_GOLD';
                    } else if ($user->account_category == "Platinum") {
                        $r_fee_name = 'ONLINE_PAYMENT_RECEIVER_PLATINUM';
                    } else if ($user->account_category == "Private Wealth") {
                        $r_fee_name = 'ONLINE_PAYMENT_RECEIVER_PRIVATE_WEALTH';
                    }
                    $r_fees = Fee::where('fee_name', $r_fee_name)->first();
                    $r_fees_amount = ($withdrawAmount * $r_fees->fee_value) / 100;
                } else if ($user->user_type == 'Business' || $user->user_type == 'Agent' && $user->first_name == '') {
                    if ($user->account_category == "Gold") {
                        $r_fee_name = 'MERCHANT__WITHDRAW_API_RECEIVER_GOLD';
                    } else if ($user->account_category == "Platinum") {
                        $r_fee_name = 'MERCHANT__WITHDRAW_API_RECEIVER_PLATINU';
                    } else if ($user->account_category == "Enterprises") {
                        $r_fee_name = 'MERCHANT__WITHDRAW_API_RECEIVER_Enterpr';
                    }
                    $r_fees = Fee::where('fee_name', $r_fee_name)->first();
                    $r_fees_amount = ($withdrawAmount * $r_fees->fee_value) / 100;
                }
                //to cut the fees of receiver
                $conversion_fee = 0;
                $conversion_fee_amount = 0;
                $admin_percentage = 0;
                $admin_fees_cal=0;
                // if ($user->currency != $recordInfo->currency) {
                //     $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                //     $conversion_fee = $fees_convr->fee_value;
                //     $conversion_fee_amount = ($withdrawAmount * $conversion_fee) / 100;
                //     $receiverAmount = $req->amount - $r_fees_amount;
                //     $total_fees_in_user_currency = $r_fees_amount;
                //     $admin_fees_cal=$total_fees_in_user_currency;
                //     $converted_amt = $this->convertCurrency($user->currency, 'USD', $total_fees_in_user_currency);
                //     $total_amt = explode("##", $converted_amt)[0];
                //     $amount_agent_currency = $this->convertCurrency($user->currency, $recordInfo->currency, $withdrawAmount);
                //     $amount_agent_currencyArr = explode("##", $amount_agent_currency);
                //     $agent_amount = $amount_agent_currencyArr[0];
                //     $agent_converstion_rate = $amount_agent_currencyArr[1];
                // } else {
                //     $receiverAmount = $req->amount - $r_fees_amount;
                //     $total_amt = $r_fees_amount;
                //     $admin_fees_cal=$r_fees_amount;
                // }

                $receiverAmount = $req->amount - $r_fees_amount;
                $total_amt = $r_fees_amount;
                $admin_fees_cal=$r_fees_amount;

                //to calculate the admin % in usd
                $admin_fees_in_usd=$this->convertCurrency($user->currency, 'USD', $admin_fees_cal);
                $admin_fees_in_usd = explode("##", $admin_fees_in_usd);
                $admin_fees_in_usd = $admin_fees_in_usd[0];

                $agentWallet = $user->wallet_amount + $receiverAmount;
                
                //to calculate the % of merchant side
                if ($recordInfo->account_category == "Gold") {
                    $fee_name = 'MERCHANT_API_WITHDRAW_FEE_GOLD';
                } else if ($recordInfo->account_category == "Platinum") {
                    $fee_name = 'MERCHANT_API_WITHDRAW_FEE_PLATINUM';
                } else if ($recordInfo->account_category == "Enterprises") {
                    $fee_name = 'MERCHANT_API_WITHDRAW_FEE_ENTERPRISE';
                } else {
                    $fee_name = 'MERCHANT_API_WITHDRAW_FEE_GOLD';
                }

                $widrawal_amt = 0;
                if ($user->currency != $recordInfo->currency) {

                   $convr_fee_name=$recordInfo->currency!="NGN" && $user->currency!="NGN" ? 'MERCHANT_CONVERSION_FEE' : 'NGN_MERCHANT_CONVERSION_FEE';

                   $amount_agent_currency = $this->convertCurrency($recordInfo->currency,$user->currency,$withdrawAmount,'merchant_api');
   
                   $amount_agent_currencyArr = explode("##", $amount_agent_currency);
                   $agent_amount = $amount_agent_currencyArr[0];
                   $agent_converstion_rate = $amount_agent_currencyArr[1];
                   $widrawal_amt = $agent_amount;
                   $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                   $conversion_fee = $fees_convr->fee_value;
                   $conversion_fee_amount = ($widrawal_amt * $conversion_fee) / 100;
                } else {
                    $widrawal_amt = $withdrawAmount;
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fees_amount = ($widrawal_amt * $fees->fee_value) / 100;
                $senderAmount = $widrawal_amt + $fees_amount + $conversion_fee_amount;
                $merchantWallet = $recordInfo->wallet_amount - $senderAmount;
                if ($recordInfo->wallet_amount < $senderAmount) {
                    Session::put('error_session_message', "Insufficient Balance.");
                    return Redirect::to('auth/merchant-withdraw-request-list');
                }

                User::where('id', $user->id)->update(['wallet_amount' => $agentWallet]);

                User::where('id', $recordInfo->id)->update(['wallet_amount' => $merchantWallet]);
                $converted_amt_s = $this->convertCurrency($recordInfo->currency, 'USD', $fees_amount+$conversion_fee_amount);
                $total_amt_s = explode("##", $converted_amt_s)[0];
                $adminInfo = User::where('id', 1)->first();
                $admin_percentage = $total_amt_s + $admin_fees_in_usd;
                $admin_wallet = ($adminInfo->wallet_amount + $admin_percentage);
                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                $getTransID = InactiveAmount::where('withdraw_req_id', $id)->first();
                if (isset($getTransID->trans_id)) {
                    if ($user->currency != $recordInfo->currency) {
                        $billing = 'IP:' . $this->get_client_ip() .'##Sent Amount :' . $recordInfo->currency . ' ' . $senderAmount .' and Conversion rate ' .$agent_converstion_rate.'##Received Amount ' . $user->currency . ' ' . $withdrawAmount . ' and Conversion rate ' .$agent_converstion_rate . '=' . $user->currency . ' ' . $withdrawAmount . "##RECEIVER_FEES : " . $user->currency . ' ' . $r_fees_amount . "##SENDER_FEES : " . $recordInfo->currency . ' ' . $fees_amount . "##Conversion Fees :" . $recordInfo->currency . ' ' . $conversion_fee_amount;
                    } else {
                        $billing = 'IP:' . $this->get_client_ip() .'##Sent Amount :' . $recordInfo->currency . ' ' . $senderAmount."##RECEIVER_FEES : " . $user->currency . ' ' . $r_fees_amount . "##SENDER_FEES : " . $recordInfo->currency . ' ' . $fees_amount;
                    }

                    Transaction::where('id', $getTransID->trans_id)->update(['sender_fees' => $fees_amount+$conversion_fee_amount, 'sender_currency' => $recordInfo->currency, 'receiver_fees' => $r_fees_amount, 'receiver_currency' => $user->currency, "real_value" => $receiverAmount, "sender_real_value" => $senderAmount, 'user_close_bal' => $merchantWallet, 'receiver_close_bal' => $agentWallet, "billing_description" => $billing, "status" => 1, "updated_at" => date('Y-m-d H:i:s')]);

                    InactiveAmount::where('withdraw_req_id', $id)->delete();
                    WithdrawRequest::where('id', $id)->delete();
                    //Update User and Agent Wallet End
                    //Mail To User Start
                    $user = User::where('id', $req->user_id)->first();
                    $agentName = strtoupper($recordInfo->business_name);
                    if ($user->user_type == 'Personal') {
                        $user_name = strtoupper($user->first_name);
                    } else if ($user->user_type == 'Business') {
                        $user_name = strtoupper($user->business_name);
                    } else if ($user->user_type == 'Agent' and $user->first_name != "") {
                        $user_name = strtoupper($user->first_name);
                    } else if ($user->user_type == 'Agent' and $user->business_name != "") {
                        $user_name = strtoupper($user->business_name);
                    }

                    $emailId = $user->email;
                    $emailSubject = "DafriBank Digital | Withdrawal request completed for amount " . $user->currency . ' ' . $withdrawAmount;
                    //                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                    $emailData['subject'] = $emailSubject;
                    $emailData['user_name'] = $user_name;
                    $emailData['withdrawAmount'] = $user->currency . ' ' . $withdrawAmount;
                    $emailData['agentName'] = $agentName;
                    Mail::send('emails.withdrawRequestAPI', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });

                    $notif = new Notification([
                        'user_id' => $user->id,
                        'notif_subj' => $emailSubject,
                        'notif_body' => $emailSubject,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $notif->save();

                    $notif = new Notification([
                        'user_id' => $recordInfo->id,
                        'notif_subj' => $emailSubject,
                        'notif_body' => $emailSubject,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $notif->save();

                    Session::put('success_session_message', "Withdraw process completed successfully.");
                    return Redirect::to('/auth/merchant-withdraw-request-list');
                } else {
                    Session::put('success_session_message', "Transaction Not found.");
                    return Redirect::to('/auth/merchant-withdraw-request-list');
                }
            }
            else{
                Session::put('error_session_message', "Merchant Withdraw request is already updated");
                return Redirect::to('/auth/merchant-withdraw-request-list'); 
            }
        }

        $query = new Transaction();
        $query = $query->sortable();
        $query = $query->where("user_id", Session::get('user_id'));
        $query = $query->orWhere("receiver_id", Session::get('user_id'));
        $trans = $query->orderBy('id', 'DESC')->paginate(3);

        return view('users.merchantWithdrawReq', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'wthdrwReq' => $wthdrwReq, 'agentInfo' => $agentInfo, 'trans' => $trans]);
    }

    public function merchantDeclineWithdrawRequest($id) {
        $id = base64_decode($id);

        //Update User Wallet (Return Inactive Amount) Start
        $req = WithdrawRequest::where('id', $id)->first();
        if (!empty($req)) 
        {
        $inactivAmnt = InactiveAmount::where('withdraw_req_id', $id)->first();
        $trans = Transaction::where('id', $inactivAmnt->trans_id)->first();
        $withdrawAmount = $req->amount;
        $agentuser = User::where('id', Session::get('user_id'))->first();
        $user = User::where('id', $req->user_id)->first();
//        $userWallet = $user->wallet_amount + ($inactivAmnt->amount + $trans->fees);
//        User::where('id', $req->user_id)->update(['wallet_amount' => $userWallet, 'updated_at' => date('Y-m-d H:i:s')]);
        Transaction::where('id', $inactivAmnt->trans_id)->update(['status' => 3,'user_close_bal' =>$user->wallet_amount ,'updated_at' => date('Y-m-d H:i:s')]);
        InactiveAmount::where('withdraw_req_id', $id)->delete();
        WithdrawRequest::where('id', $id)->delete();
        //Update User Wallet (Return Inactive Amount) End
        //Mail Start
        if ($user->user_type == 'Personal') {
            $user_name = strtoupper($user->first_name);
        } else if ($user->user_type == 'Business') {
            $user_name = strtoupper($user->business_name);
        } else if ($user->user_type == 'Agent' and $user->first_name != "") {
            $user_name = strtoupper($user->first_name);
        } else if ($user->user_type == 'Agent' and $user->business_name != "") {
            $user_name = strtoupper($user->business_name);
        }

        if ($agentuser->user_type == 'Personal') {
            $agentName = strtoupper($agentuser->first_name);
        } else if ($agentuser->user_type == 'Business') {
            $agentName = strtoupper($agentuser->business_name);
        } else if ($agentuser->user_type == 'Agent' and $agentuser->first_name != "") {
            $agentName = strtoupper($agentuser->first_name);
        } else if ($agentuser->user_type == 'Agent' and $agentuser->business_name != "") {
            $agentName = strtoupper($agentuser->business_name);
        }
        $emailId = $user->email;
        $emailSubject = "DafriBank Digital | Withdraw request Declined by Merchant for amount " . $user->currency . ' ' . $withdrawAmount;
        $emailData['subject'] = $emailSubject;
        $emailData['user_name'] = $user_name;
        $emailData['withdrawAmount'] = $user->currency . ' ' . $withdrawAmount;
        $emailData['agentName'] = $agentName;
        //        $emailData['loginURL'] = $loginURL;

        Mail::send('emails.withdrawDeclined', $emailData, function ($message)use ($emailData, $emailId) {
            $message->to($emailId, $emailId)
                    ->subject($emailData['subject']);
        });


        $notif = new Notification([
            'user_id' => $user->id,
            'notif_subj' => $emailSubject,
            'notif_body' => $emailSubject,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s'),
        ]);
        $notif->save();

        $notif = new Notification([
            'user_id' => $agentuser->id,
            'notif_subj' => $emailSubject,
            'notif_body' => $emailSubject,
            'created_at' => date('Y-m-d H:i:s'),
            'updated_at' => date('Y-m-d H:i:s'),
        ]);
        $notif->save();

        Session::put('success_session_message', "Withdraw request rejected successfully.");
        return Redirect::to('/auth/merchant-withdraw-request-list');
     }
     else{
        Session::put('error_session_message', "Merchant Withdraw request is already updated");
        return Redirect::to('/auth/merchant-withdraw-request-list'); 
     }

    }

    public function merchantEditWithdrawRequest() {
        $pageTitle = 'Generate Withdraw Request';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $agentInfo = Agent::where('user_id', $recordInfo->id)->first();
        $wthdrwReq = WithdrawRequest::where('agent_id', $recordInfo->id)->where('req_type', 'Merchant')->orderBy('id', 'ASC')->get();


        $input = Input::all();
        if (!empty($input)) {

//            echo '<pre>';print_r($input);exit;
            $id = $input['id'];
            $edit_amount = $input['edit_amount'];
            $req = WithdrawRequest::where('id', $id)->first();

            if (!empty($req)) {
                if (empty($edit_amount)) {
                    $edit_amount = 0;
                } else {
                    if ($edit_amount > 0) {
                        $edit_amount = $edit_amount;
                    } else {
                        $edit_amount = 0;
                    }
                }

                if ($edit_amount == 0) {
                    Session::put('error_session_message', "Enter Valid Amount.");
                    return Redirect::to('/auth/merchant-withdraw-request-list');
                }

                if ($req->user_id == Session::get('user_id')) {
                    // Session::flash('error_message', "Request Agent ID not match!");
                    Session::put('error_session_message', "Request Merchant ID not match!");
                    return Redirect::to('/auth/merchant-withdraw-request-list');
                }

                //Check Agent Withdraw Limit Start
                $dt = date('Y-m-d');
                $startDT = $dt . ' 00:00:00';
                $endDT = $dt . ' 23:59:59';
                $agent = User::where('id', Session::get('user_id'))->first();
                //DB::enableQueryLog();
                //$todyTransAmnt = Transaction::where('user_id',Session::get('user_id'))->orWhere('receiver_id',$agent->id)->where('trans_type',2)->whereBetween('created_at',array($startDT,$endDT))->sum('amount');
//                $todyTransAmnt = DB::select("select sum(`amount`) as aggregate from `transactions` where (`user_id` = " . Session::get('user_id') . " or `receiver_id` = " . $agent->id . ") and `trans_type` = 2 and `created_at` between '" . $startDT . "' and '" . $endDT . "'");
//                $todyTransAmnt = $todyTransAmnt[0]->aggregate;
//                //dd(DB::getQueryLog());
//
//                $chkAmountUSD = $this->fetchCurrencyRate($recordInfo->currency, $todyTransAmnt);
//                //echo "USD Amount: ".$chkAmountUSD; exit;
//                if ($chkAmountUSD > 10000) {
//                    //  Session::flash('error_message', "Sorry, Your daily spending limit is over.");
//                    Session::put('error_session_message', "Sorry, Your daily spending limit is over.");
//                    return Redirect::to('/auth/merchant-withdraw-request-list');
//                }

                $transLimitFlag = $this->checkUserTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $edit_amount);

                $transLimitArr = explode("###", $transLimitFlag);
                //print_r($transLimitArr); exit;

                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                    //                    Session::flash('error_message', $transLimitArr[1]);
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('auth/fund-transfer');
                }

                $withdrawAmount = $edit_amount;
                $transLimitFlag = $this->checkUserTransLimit(Session::get('user_id'), $recordInfo->account_category, $recordInfo->user_type, $withdrawAmount);

                $transLimitArr = explode("###", $transLimitFlag);
                //print_r($transLimitArr); exit;

                if ($transLimitArr[0] == 'false' or $transLimitArr[0] == false) {
                    //                    Session::flash('error_message', $transLimitArr[1]);
                    Session::put('error_session_message', $transLimitArr[1]);
                    return Redirect::to('auth/fund-transfer');
                }

                $user = User::where('id', $req->user_id)->first();
                if ($user->user_type == 'Personal' && $user->first_name != '' || $user->user_type == 'Agent' && $user->first_name != '') {
                    if ($user->account_category == "Silver") {
                        $r_fee_name = 'ONLINE_PAYMENT_RECEIVER';  
                    } else if ($user->account_category == "Gold") {
                        $r_fee_name = 'ONLINE_PAYMENT_RECEIVER_GOLD';
                    } else if ($user->account_category == "Platinum") {
                        $r_fee_name = 'ONLINE_PAYMENT_RECEIVER_PLATINUM';
                    } else if ($user->account_category == "Private Wealth") {
                        $r_fee_name = 'ONLINE_PAYMENT_RECEIVER_PRIVATE_WEALTH';
                    }
                    $r_fees = Fee::where('fee_name', $r_fee_name)->first();
                    $r_fees_amount = ($withdrawAmount * $r_fees->fee_value) / 100;
                } else if ($user->user_type == 'Business' || $user->user_type == 'Agent' && $user->first_name == '') {
                    if ($user->account_category == "Gold") {
                        $r_fee_name = 'MERCHANT__WITHDRAW_API_RECEIVER_GOLD';
                    } else if ($user->account_category == "Platinum") {
                        $r_fee_name = 'MERCHANT__WITHDRAW_API_RECEIVER_PLATINU';
                    } else if ($user->account_category == "Enterprises") {
                        $r_fee_name = 'MERCHANT__WITHDRAW_API_RECEIVER_Enterpr';
                    }
                    $r_fees = Fee::where('fee_name', $r_fee_name)->first();
                    $r_fees_amount = ($withdrawAmount * $r_fees->fee_value) / 100;
                }
                //to cut the fees of receiver
                $conversion_fee = 0;
                $conversion_fee_amount = 0;
                $admin_percentage = 0;
                $admin_fees_cal=0;
                // if ($user->currency != $recordInfo->currency) {
                //     $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                //     $conversion_fee = $fees_convr->fee_value;
                //     $conversion_fee_amount = ($withdrawAmount * $conversion_fee) / 100;
                //     $receiverAmount = $req->amount - $r_fees_amount;
                //     $total_fees_in_user_currency = $r_fees_amount;
                //     $admin_fees_cal=$total_fees_in_user_currency;
                //     $converted_amt = $this->convertCurrency($user->currency, 'USD', $total_fees_in_user_currency);
                //     $total_amt = explode("##", $converted_amt)[0];
                //     $amount_agent_currency = $this->convertCurrency($user->currency, $recordInfo->currency, $withdrawAmount);
                //     $amount_agent_currencyArr = explode("##", $amount_agent_currency);
                //     $agent_amount = $amount_agent_currencyArr[0];
                //     $agent_converstion_rate = $amount_agent_currencyArr[1];
                // } else {
                //     $receiverAmount = $req->amount - $r_fees_amount;
                //     $total_amt = $r_fees_amount;
                //     $admin_fees_cal=$r_fees_amount;
                // }

                $receiverAmount = $withdrawAmount - $r_fees_amount;
                $total_amt = $r_fees_amount;
                $admin_fees_cal=$r_fees_amount;

                //to calculate the admin % in usd
                $admin_fees_in_usd=$this->convertCurrency($user->currency, 'USD', $admin_fees_cal);
                $admin_fees_in_usd = explode("##", $admin_fees_in_usd);
                $admin_fees_in_usd = $admin_fees_in_usd[0];

                $agentWallet = $user->wallet_amount + $receiverAmount;
                
                //to calculate the % of merchant side
                if ($recordInfo->account_category == "Gold") {
                    $fee_name = 'MERCHANT_API_WITHDRAW_FEE_GOLD';
                } else if ($recordInfo->account_category == "Platinum") {
                    $fee_name = 'MERCHANT_API_WITHDRAW_FEE_PLATINUM';
                } else if ($recordInfo->account_category == "Enterprises") {
                    $fee_name = 'MERCHANT_API_WITHDRAW_FEE_ENTERPRISE';
                } else {
                    $fee_name = 'MERCHANT_API_WITHDRAW_FEE_GOLD';
                }

                $widrawal_amt = 0;
                if ($user->currency != $recordInfo->currency) {

                   $convr_fee_name=$recordInfo->currency!="NGN" && $user->currency!="NGN" ? 'MERCHANT_CONVERSION_FEE' : 'NGN_MERCHANT_CONVERSION_FEE';

                   $amount_agent_currency = $this->convertCurrency($recordInfo->currency,$user->currency,$withdrawAmount,'merchant_api');
                   $amount_agent_currencyArr = explode("##", $amount_agent_currency);
                   $agent_amount = $amount_agent_currencyArr[0];
                   $agent_converstion_rate = $amount_agent_currencyArr[1];
                   $widrawal_amt = $agent_amount;
                   $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                   $conversion_fee = $fees_convr->fee_value;
                   $conversion_fee_amount = ($widrawal_amt * $conversion_fee) / 100;
                } else {
                    $widrawal_amt = $withdrawAmount;
                }

                $fees = Fee::where('fee_name', $fee_name)->first();
                $fees_amount = ($widrawal_amt * $fees->fee_value) / 100;
                $senderAmount = $widrawal_amt + $fees_amount + $conversion_fee_amount;
                $merchantWallet = $recordInfo->wallet_amount - $senderAmount;
                if ($recordInfo->wallet_amount < $senderAmount) {
                    Session::put('error_session_message', "Insufficient Balance.");
                    return Redirect::to('auth/merchant-withdraw-request-list');
                }

                User::where('id', $user->id)->update(['wallet_amount' => $agentWallet]);

                User::where('id', $recordInfo->id)->update(['wallet_amount' => $merchantWallet]);
                $converted_amt_s = $this->convertCurrency($recordInfo->currency, 'USD', $fees_amount+$conversion_fee_amount);
                $total_amt_s = explode("##", $converted_amt_s)[0];
                $adminInfo = User::where('id', 1)->first();
                $admin_percentage = $total_amt_s + $admin_fees_in_usd;
                $admin_wallet = ($adminInfo->wallet_amount + $admin_percentage);
                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                $getTransID = InactiveAmount::where('withdraw_req_id', $id)->first();
                if (isset($getTransID->trans_id)) {
                    if ($user->currency != $recordInfo->currency) {
                        $billing = 'IP:' . $this->get_client_ip() .'##Sent Amount :' . $recordInfo->currency . ' ' . $senderAmount .' and Conversion rate ' .$agent_converstion_rate.'##Received Amount ' . $user->currency . ' ' . $withdrawAmount . ' and Conversion rate ' .$agent_converstion_rate . '=' . $user->currency . ' ' . $withdrawAmount . "##RECEIVER_FEES : " . $user->currency . ' ' . $r_fees_amount . "##SENDER_FEES : " . $recordInfo->currency . ' ' . $fees_amount . "##Conversion Fees :" . $recordInfo->currency . ' ' . $conversion_fee_amount;
                    } else {
                        $billing = 'IP:' . $this->get_client_ip() .'##Sent Amount :' . $recordInfo->currency . ' ' . $senderAmount."##RECEIVER_FEES : " . $user->currency . ' ' . $r_fees_amount . "##SENDER_FEES : " . $recordInfo->currency . ' ' . $fees_amount;
                    }
                    Transaction::where('id', $getTransID->trans_id)->update(['sender_fees' => $fees_amount, 'sender_currency' => $recordInfo->currency,'amount'=>$withdrawAmount, 'receiver_fees' => $r_fees_amount + $conversion_fee_amount, 'receiver_currency' => $user->currency, "real_value" => $receiverAmount, "sender_real_value" => $senderAmount, 'user_close_bal' => $merchantWallet, 'receiver_close_bal' => $agentWallet, "billing_description" => $billing, "status" => 1, "updated_at" => date('Y-m-d H:i:s')]);

                    InactiveAmount::where('withdraw_req_id', $id)->delete();
                    WithdrawRequest::where('id', $id)->delete();
                    //Update User and Agent Wallet End
                    //Mail To User Start
                    $user = User::where('id', $req->user_id)->first();
                    $agentName = strtoupper($recordInfo->business_name);
                    if ($user->user_type == 'Personal') {
                        $user_name = strtoupper($user->first_name);
                    } else if ($user->user_type == 'Business') {
                        $user_name = strtoupper($user->business_name);
                    } else if ($user->user_type == 'Agent' and $user->first_name != "") {
                        $user_name = strtoupper($user->first_name);
                    } else if ($user->user_type == 'Agent' and $user->business_name != "") {
                        $user_name = strtoupper($user->business_name);
                    }

                    $emailId = $user->email;
                    $emailSubject = "DafriBank Digital | Withdrawal request completed for amount " . $user->currency . ' ' . $withdrawAmount;
                    //                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

                    $emailData['subject'] = $emailSubject;
                    $emailData['user_name'] = $user_name;
                    $emailData['withdrawAmount'] = $user->currency . ' ' . $withdrawAmount;
                    $emailData['agentName'] = $agentName;
                    Mail::send('emails.withdrawRequestAPI', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });

                    $notif = new Notification([
                        'user_id' => $user->id,
                        'notif_subj' => $emailSubject,
                        'notif_body' => $emailSubject,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $notif->save();

                    $notif = new Notification([
                        'user_id' => $recordInfo->id,
                        'notif_subj' => $emailSubject,
                        'notif_body' => $emailSubject,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $notif->save();

                    //Mail To User End
                    //                Session::flash('success_message', "Withdraw process completed successfully.");
                    Session::put('success_session_message', "Withdraw process completed successfully.");
                    return Redirect::to('/auth/merchant-withdraw-request-list');
                } else {
                    Session::put('success_session_message', "Transaction Not found.");
                    return Redirect::to('/auth/merchant-withdraw-request-list');
                }
            }
            else{
                Session::put('error_session_message', "Merchant Withdraw request is already updated");
                return Redirect::to('/auth/merchant-withdraw-request-list'); 
            }
        }

//        $query = new Transaction();
//        $query = $query->sortable();
//        $query = $query->where("user_id", Session::get('user_id'));
//        $query = $query->orWhere("receiver_id", Session::get('user_id'));
//        $trans = $query->orderBy('id', 'DESC')->paginate(3);
//
//        return view('users.merchantWithdrawReq', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'wthdrwReq' => $wthdrwReq, 'agentInfo' => $agentInfo, 'trans' => $trans]);
    }

    public function saveWithdrawRequest($agentID) {
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $agentInfo = Agent::where('id', $agentID)->first();

        $amount = base64_decode(Session::get('withdrawAmntAgnt64'));

        $fees = Fee::where('fee_name', 'AGENT_WITHDRAW_REQUEST')->first();

        $withdrawFees = ($fees->fee_value * $amount) / 100;
        $withdrawFees = number_format($withdrawFees, 2, '.', '');


        if ($agentID == Session::get('user_id')) {
//                    Session::flash('error_message', "Request Agent ID not match!");
            Session::put('error_session_message', "Sender & Receiver Should not be same.");
            return Redirect::to('/auth/withdraw-request');
        }

        $totalFees = $withdrawFees;
        $totalAmnt = $amount + $withdrawFees;
        if ($agentInfo->currency != $recordInfo->currency) {
            $convr_fee_name = 'CONVERSION_FEE';
            $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
            $conversion_feet = $fees_convr->fee_value;

            $conFee = ($amount * $conversion_feet) / 100;
            $totalAmnt = $totalAmnt + $conFee;
            $totalFees = $withdrawFees + $conFee;
        }

        if ($recordInfo->wallet_amount < ($totalAmnt)) {
            Session::put('error_session_message', "Insufficient Fund!");
            return Redirect::to('/auth/withdraw-request');
        }

        $otp = mt_rand(100000, 999999);
        $verifyCode = $this->encpassword($otp);

        User::where('id', Session::get('user_id'))->update(['verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s')]);


        if ($recordInfo->user_type == 'Personal') {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == 'Business') {
            $userName = strtoupper($recordInfo->business_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
            $userName = strtoupper($recordInfo->business_name);
        }

        $agentName = strtoupper($agentInfo->first_name . ' ' . $agentInfo->last_name);

        //OTP Mail Start
        $emailId = $recordInfo->email;
        $userName = $userName;

        $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">' . $otp . ' is your One Time Password to authenticate your Withdraw Request to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
        $emailSubject = "DafriBank Digital - Bank Agent Withdrawal Requested";
        //                Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

        $withdraw_amount = $amount;
        $emailData['subject'] = $emailSubject;
        $emailData['userName'] = $userName;
        $emailData['agentName'] = $agentName;
        $emailData['otp'] = $otp;
        $emailData['category'] = $recordInfo->account_category;
        $emailData['withdraw_amount'] = $recordInfo->currency . ' ' . $withdraw_amount;

        Mail::send('emails.agentWithdrawOTP', $emailData, function ($message)use ($emailData, $emailId) {
            $message->to($emailId, $emailId)
                    ->subject($emailData['subject']);
        });
        //OTP Mail End

        Session::put('agent_id', $agentID);
        return Redirect::to('auth/agent-withdraw');
    }

    public function agent_withdraw(Request $request) {
        $pageTitle = 'Agent Withdraw';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $input = Input::all();

        $agentID = Session::get('agent_id');
        $agentInfo = Agent::where('id', $agentID)->first();
        //to get the agent record
        $agentInfo_user=User::where('id', $agentInfo->user_id)->first();

        if ($recordInfo->user_type == 'Personal') {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
            $convr_fee_name=$recordInfo->currency!="NGN" && $agentInfo_user->currency!="NGN" ? 'CONVERSION_FEE' : 'NGN_CONVERSION_FEE';
        } else if ($recordInfo->user_type == 'Business') {
            $userName = strtoupper($recordInfo->business_name);
            $convr_fee_name=$recordInfo->currency!="NGN" && $agentInfo_user->currency!="NGN" ? 'MERCHANT_CONVERSION_FEE' : 'NGN_MERCHANT_CONVERSION_FEE';
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
            $convr_fee_name=$recordInfo->currency!="NGN" && $agentInfo_user->currency!="NGN" ? 'CONVERSION_FEE' : 'NGN_CONVERSION_FEE';
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
            $userName = strtoupper($recordInfo->business_name);
            $convr_fee_name=$recordInfo->currency!="NGN" && $agentInfo_user->currency!="NGN" ? 'MERCHANT_CONVERSION_FEE' : 'NGN_MERCHANT_CONVERSION_FEE';
        }

        if (!empty($input) and (isset($input['validateOTP']) && $input['validateOTP'] == 'true')) {
            $rules = array(
                'otp_verify' => 'required',
            );
            $customMessages = [
                'otp_verify.required' => 'OTP field can\'t be left blank',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('error_session_message', $message);
                return Redirect::to('auth/agent-withdraw');
                //                return Redirect::to('auth/manual-withdraw')->withErrors($validator)->withInput();
            } else {
                $otp = $input['otp_verify'];
                $dateChk = date('Y-m-d H:i', strtotime('+15 minutes', strtotime($recordInfo->otp_time)));

                if (!password_verify($otp, $recordInfo->verify_code) || date('Y-m-d H:i') > $dateChk) {
                    Session::put('error_session_message', "You have entered wrong OTP code.");
                    return Redirect::to('auth/agent-withdraw');
                    //                    return Redirect::to('auth/manual-withdraw')->withErrors('You have entered wrong OTP code.');
                } else {

                    $amount = base64_decode(Session::get('withdrawAmntAgnt64'));
                    if ($recordInfo->user_type == 'Personal' && $recordInfo->first_name != '' || $recordInfo->user_type == 'Agent' && $recordInfo->first_name != '') {
                        //$fee_name = 'MANUAL_DEPOSIT';
                        if ($recordInfo->account_category == "Silver") {
                            $fee_name = 'AGENT_WITHDRAW_REQUEST';
                        } else if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'WITHDRAW_REQUEST_GOLD';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'WITHDRAW_REQUEST_PLATINUM';
                        } else if ($recordInfo->account_category == "Private Wealth") {
                            $fee_name = 'WITHDRAW_REQUEST_PRIVATE_WEALTH';
                        }
                    } else if ($recordInfo->user_type == 'Business' || $recordInfo->user_type == 'Agent' && $recordInfo->first_name == '') {
                        if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'MERCHANT_AGENT_WITHDRAW_REQUEST_GOLD';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'MERCHANT_AGENT_WITHDRAW_REQUEST_PLATINUM';
                        } else if ($recordInfo->account_category == "Enterprises") {
                            $fee_name = 'MERCHANT_AGENT_WITHDRAW_REQUEST_ENTERPRI';
                        }
                    }

                    $fees = Fee::where('fee_name', $fee_name)->first();
                   // echo $amount; die;
                    $withdrawFees = ($fees->fee_value * $amount) / 100;
                    $totalFees = $withdrawFees;
                    //to calculate the affiliate balance
                    $affiliate_per=0;
                    $refrlComm=0;
                    $t_refrlComm=0;
                    $referlCode = 'refid=' . $recordInfo->referral;
                    $referrer = Referalcode::where('referal_link', $referlCode)->first();
                    if ($recordInfo->referral != 'na') {
                        // if($recordInfo->currency==$agentInfo_user->currency)
                        // {
                            if ($recordInfo->currency == 'USD') {
                          $affiliate_per = ($totalFees * 25) / 100;
                          $refrlComm=$totalFees-$affiliate_per;
                          $t_refrlComm=$refrlComm;
                        }
                        else{
                            $referral_User=User::where('id',$referrer->user_id)->first(); 
                            if ($referral_User->user_type == 'Personal') {
                                $convr_fee_name_ref = 'CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Business') {
                                $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name != "") {
                                $convr_fee_name_ref = 'CONVERSION_FEE';
                            } elseif ($referral_User->user_type == 'Agent' && $referral_User->first_name == "") {
                                $convr_fee_name_ref = 'MERCHANT_CONVERSION_FEE';
                            }
                            $amountt = ($totalFees * 25) / 100;
                            $fees_convr = Fee::where('fee_name', $convr_fee_name_ref)->first();
                            $conversion_feet = $fees_convr->fee_value;
                            $affiliate_per= $amountt * $conversion_feet / 100;
                            $total_ref=$amountt-$affiliate_per;
                            $t_refrlComm=$total_ref;
                            $total_ref_in_usd=$this->convertCurrency( $recordInfo->currency,'USD', $total_ref); 
                            $refrlComm=explode("##",$total_ref_in_usd)[0];
                        }
                      }

                    $totalAmnt = $amount + $withdrawFees;
                    
                    if ($agentInfo_user->currency != $recordInfo->currency) {
                        $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                        $conversion_feet = $fees_convr->fee_value;
                        $conFee = ($amount * $conversion_feet) / 100;
                        $totalAmnt = $totalAmnt + $conFee;
                        $totalFees = $withdrawFees + $conFee;
                    }
                    else{
                    $conFee='';
                    }


                    if ($recordInfo->wallet_amount < ($totalAmnt)) {
                        Session::put('error_session_message', "Insufficient Fund!");
                        return Redirect::to('/auth/withdraw-request');
                    }

                    $usrWallet = ($recordInfo->wallet_amount - ($totalAmnt));
                    // echo "Wallet Amount: ".$recordInfo->wallet_amount." :: Req Amount: ".$amount." :: After Calculation: ".$usrWallet; //exit;
                    if (Session::has('remark')) {
                        $remarkMsg = Session::get('remark');
                    } else {
                        $remarkMsg = 'na';
                    }

                    User::where('id', Session::get('user_id'))->update(['wallet_amount' => $usrWallet, 'updated_at' => date('Y-m-d H:i:s')]);

                    $amount_admin_currency = $this->convertCurrency($recordInfo->currency,'USD',$totalFees-$t_refrlComm);
                    $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                    $admin_amount = $amount_admin_currencyArr[0];
                    $admin_converstion_rate = $amount_admin_currencyArr[1];

                    $adminInfo = User::where('id', 1)->first();
                    $admin_wallet = ($adminInfo->wallet_amount + $admin_amount);
                    User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

//        $adminInfo = User::where('id', 1)->first();
//        $admin_wallet = $adminInfo->wallet_amount + ($withdrawFees);
//        User::where('id', 1)->update(['wallet_amount' => $admin_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

                    if ($recordInfo->user_type == 'Personal') {
                        $user_name = strtoupper($recordInfo->first_name . " " . $recordInfo->last_name);
                        $loginLnk = HTTP_PATH . '/personal-login';
                    } else if ($recordInfo->user_type == 'Business') {
                        $user_name = strtoupper($recordInfo->business_name);
                        $loginLnk = HTTP_PATH . '/business-login';
                    } else if ($recordInfo->user_type == 'Agent' && $recordInfo->first_name != "") {
                        $user_name = strtoupper($recordInfo->first_name . " " . $recordInfo->last_name);
                        $loginLnk = HTTP_PATH . '/personal-login';
                    } else if ($recordInfo->user_type == 'Agent' && $recordInfo->business_name != "") {
                        $user_name = strtoupper($recordInfo->business_name);
                        $loginLnk = HTTP_PATH . '/business-login';
                    }

                    $remarkMsg1 ='IP:' . $this->get_client_ip().'##';
                    if ($remarkMsg != 'na') {
                        $remarkMsg1 = 'Payout Instructions : ' . $remarkMsg;
                    }
                    if ($agentInfo_user->currency != $recordInfo->currency) {
                    $remarkMsg1 = $remarkMsg1.'##SENDER_FEES : '.$recordInfo->currency.' '.$withdrawFees.'##Conversion Fees ='.$recordInfo->currency.' '.$conFee;
                    }
                    else{
                    $remarkMsg1 = $remarkMsg1.'##SENDER_FEES : '.$recordInfo->currency.' '.$withdrawFees;   
                    }


                    $trans = new Transaction([
                        "user_id" => Session::get('user_id'),
                        "receiver_id" => $agentID,
                        "amount" => $amount,
                        "fees" => $totalFees,
                        "sender_fees" => $totalFees,
                        "sender_currency" => $recordInfo->currency,
                        "currency" => $recordInfo->currency,
                        "trans_type" => 2, //Debit-Withdraw
                        "trans_to" => 'Dafri_Wallet',
                        "trans_for" => 'Withdraw##Agent',
                        "refrence_id" => 'na',
                        "billing_description" => $remarkMsg1,
                        "user_close_bal" => $usrWallet,
                        "real_value" => $totalAmnt,
                        "status" => 2,
                        "created_at" => date('Y-m-d H:i:s'),
                        "updated_at" => date('Y-m-d H:i:s'),
                    ]);
                    $trans->save();
                    $TransId = $trans->id;

                    if (!empty($referrer)) {
                        $refComm = new ReferralCommission([ 
                            'user_id' => $recordInfo->id,
                            'referrer_id' => $referrer->user_id,
                            'amount' => $refrlComm,
                            'trans_id' => $TransId,
                            'action' => 'AGENT WITHDRAW',
                            'created_at' => date('Y-m-d H:i:s'),
                            'updated_at' => date('Y-m-d H:i:s')
                        ]);
                        $refComm->save();
                    }

                    $wrq = new WithdrawRequest([
                        'user_id' => Session::get('user_id'),
                        'user_name' => $user_name,
                        'agent_id' => $agentID,
                        'amount' => $amount,
                        'remark' => $remarkMsg,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $wrq->save();
                    $withdrawReqID = $wrq->id;

                    $inactvAmnt = new InactiveAmount([
                        'user_id' => Session::get('user_id'),
                        'withdraw_req_id' => $withdrawReqID,
                        'trans_id' => $TransId,
                        'amount' => $amount,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $inactvAmnt->save();

                    //Mail start
                    $emailId = $recordInfo->email;
                    $userName = $user_name;

                    $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">Your agent withdrawal request with transaction ID ' . $TransId . ' has been created successfully. Our finance team will check and get back to you soon.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . $loginLnk . '"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
                    $emailSubject = 'DafriBank Digital | Agent Withdrawal Request Received';
                    $agentInfo = Agent::where('id', $agentID)->first();
                    $agentname = strtoupper($agentInfo->first_name . ' ' . $agentInfo->last_name);
//        echo $agentname;exit;
                    $emailData['subject'] = $emailSubject;
                    $emailData['emailId'] = $emailId;
                    $emailData['userName'] = $userName;
                    $emailData['TransId'] = $TransId;
                    $emailData['amount'] = $recordInfo->currency . ' ' . number_format($amount, 2, '.', '');
                    $emailData['agentname'] = $agentname;

//        echo $agentInfo;exit;
                    Mail::send('emails.saveWithdrawRequest', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });

                    $emailId = $agentInfo->email;
//          echo '<pre>'; print_r($emailId);exit;
                    $emailSubject = 'DafriBank Digital | Agent Withdrawal Request Received';
                    $user_name = strtoupper($agentInfo->first_name . " " . $agentInfo->last_name);
                    $emailData['subject'] = $emailSubject;
                    $emailData['emailId'] = $emailId;
                    $emailData['agentname'] = $user_name;
                    $emailData['TransId'] = $TransId;
                    $emailData['amount'] = $recordInfo->currency . ' ' . number_format($amount, 2, '.', '');
                    $emailData['remarkMsg'] = $remarkMsg;
                    $emailData['userName'] = $userName;
                    Mail::send('emails.saveWithdrawRequestAgent', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subject']);
                    });
//        Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));
                    $notif = new Notification([
                        'user_id' => $recordInfo->id,
                        'notif_subj' => $emailSubject,
                        'notif_body' => $emailBody,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $notif->save();
                    //Mail End

                    Session::forget('remark');
                    Session::forget('withdrawMthd6_4');
                    Session::save();
//        Session::flash('success_message', "Request successfully sent to agent with Request ID: " . $withdrawReqID);
                    Session::put('success_session_message', "Request successfully sent to agent with Request ID: " . $withdrawReqID);
                    return Redirect::to('/auth/withdraw-request');
                }
            }
        }

        return view('users.agent_withdraw', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'account_name' => $userName]);
    }

    public function resentOtpAgentWithdraw(Request $request) {
        if (!empty($request->has('user_id'))) {
            $otp = mt_rand(100000, 999999);
            $verifyCode = $this->encpassword($otp);
            User::where('id', $request->user_id)->update(['verify_code' => $verifyCode, 'otp_time' => date('Y-m-d H:i:s'), 'updated_at' => date('Y-m-d H:i:s')]);

            $agentID = Session::get('agent_id');
            $agentInfo = Agent::where('id', $agentID)->first();

            $recordInfo = User::where('id', $request->user_id)->first();

            if ($recordInfo->user_type == 'Personal') {
                $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
            } else if ($recordInfo->user_type == 'Business') {
                $userName = strtoupper($recordInfo->business_name);
            } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
            } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                $userName = strtoupper($recordInfo->business_name);
            }

            $emailId = $recordInfo->email;
            $userName = $userName;

            $agentName = strtoupper($agentInfo->first_name . ' ' . $agentInfo->last_name);

            $emailBody = '<!DOCTYPE html><html><head><title>DafriBank Welcome</title><link href="https://fonts.googleapis.com/css2?family=Sora:wght@400;500;600;700&amp;display=swap" rel="stylesheet"><style type="text/css">body {padding: 0;margin: 0}table {border-spacing: 0px !important;}</style></head><body><table width="100%" border="0" cellpadding="0" cellspacing="0" style="font-family: \'Sora\', sans-serif !important; "><tbody><tr><td><table class="col-600" width="900" border="0" cellpadding="0" cellspacing="0" bgcolor="#FFFFFF" style="border-spacing:0px !important;"><tr align="center"><td style="padding: 50px 0; width: 100%"><a href="#"><img src="' . HTTP_PATH . '/public/img/dafribank-logo-black.png" width="180"></a></td></tr><tr><td><table style="width: 750px; margin: 0 auto; background: #fff;border-radius: 40px; border: 1px solid #C7C7C7; padding: 30px 50px;"><tr><td><h4 style="font-size: 25px; font-weight: 400; color: #A2A2A2;"><span>Dear </span> ' . $userName . ',</h4><p style="color: #A2A2A2; font-size: 16px; line-height: 27px; font-weight: 400; ">' . $otp . ' is your One Time Password to authenticate your Withdraw Request to DafriBank, valid for next 15 min. Don\'t share it with anyone for security reasons.<br><br>If you need any assistance, please e-mail us at <a href="mailto:hello@dafribank.com" style="color: #1381D0; text-decoration: none;"> hello@dafribank.com </a><br>or call us on 0115 685 053.<br><br>Regards,<br>DafriBank Team</p></td></tr><tr><td align="center" style="display: block; width: 100%; padding-bottom: 36px; margin-top: 30px;"><a  style="display: inline-block; font-size: 18px;border-radius: 20px;padding: 15px 39px; font-weight: 700; color: #fff; text-decoration: none; background: #000;box-shadow: 8px 8px 0 rgba(0,0,0,0.1);" href="' . HTTP_PATH . '/personal-login"> View your dashboard</a></td></tr></table></td></tr><tr><td style="padding: 40px 0" align="center"><p style="font-size: 16px; color:#8E8E8E; line-height: 24px;">DafriBank Digital is a division of DafriGroup PLC, a public company duly incorporated in South Africa with CIPC Number: 202054881006, in Nigeria with CAC Number: 1691062 and in Botswana with CIPA Number: 2854468. DafriGroup held an unrestricted operating license in South Africa under Public Companies Act 71 of 2008. Digital assets are subject to a number of risks, including price volatility. Transacting in digital assets could result in significant losses and may not be suitable for some consumers. Call 011 568 5053 or visit our <a href="' . HTTP_PATH . '/faq" style="color: #1381D0; text-decoration: none;"> FAQ </a> page<br><br>Â© ' . date("Y") . ' DafriBank Digital. All Rights Reserved. </p></td></tr></table></td></tr></tbody></table></body></html>';
            $emailSubject = "DafriBank Digital - Bank Agent Withdrawal Requested";
//            Mail::to($emailId)->send(new SendMailable($emailBody, $emailSubject, Null));

            $withdraw_amount = base64_decode(Session::get('withdrawAmntAgnt64'));
            $emailData['subject'] = $emailSubject;
            $emailData['userName'] = $userName;
            $emailData['agentName'] = $agentName;
            $emailData['otp'] = $otp;
            $emailData['category'] = $recordInfo->account_category;
            ;
            $emailData['withdraw_amount'] = $recordInfo->currency . ' ' . $withdraw_amount;

            Mail::send('emails.agentWithdrawOTP', $emailData, function ($message)use ($emailData, $emailId) {
                $message->to($emailId, $emailId)
                        ->subject($emailData['subject']);
            });
            echo true;
            exit;
        }
    }

    public function updateCard($benificry_wallet_usd = null, $benificry_wallet = null, $user) {

        if ($user->user_type == 'Personal') {
            if ($benificry_wallet_usd >= 21000 and $benificry_wallet_usd <= 50000 and $user->account_category == 'Silver') {
                User::where('id', $user->id)->update(['account_category' => 'Gold', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                $this->sendLevelChangeMail($user->id, 'Gold');
            } else if ($benificry_wallet_usd >= 50000 and $benificry_wallet_usd <= 100000 and ($user->account_category == 'Silver' || $user->account_category == 'Gold')) {
                User::where('id', $user->id)->update(['account_category' => 'Platinum', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                $this->sendLevelChangeMail($user->id, 'Platinum');
            } else if ($benificry_wallet_usd >= 100000 and ($user->account_category == 'Silver' || $user->account_category == 'Gold' || $user->account_category == 'Platinum')) {
                User::where('id', $user->id)->update(['account_category' => 'Private Wealth', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                $this->sendLevelChangeMail($user->id, 'Private Wealth');
            } else {
                User::where('id', $user->id)->update(['wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
            }
        } else if ($user->user_type == 'Business') {
            if ($benificry_wallet_usd > 1000000 and $benificry_wallet_usd <= 5000000 and $user->account_category == 'Gold') {
                User::where('id', $user->id)->update(['account_category' => 'Platinum', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                $this->sendLevelChangeMail($user->id, 'Platinum');
            } else if ($benificry_wallet_usd > 5000000 and ($user->account_category == 'Gold' || $user->account_category == 'Platinum')) {
                User::where('id', $user->id)->update(['account_category' => 'Enterprises', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                $this->sendLevelChangeMail($user->id, 'Enterprises');
            } else {
                User::where('id', $user->id)->update(['wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
            }
        } else {
            if ($user->user_type == 'Agent' && $user->first_name != '') {
                if ($benificry_wallet_usd >= 21000 and $benificry_wallet_usd <= 50000 and $user->account_category == 'Silver') {
                    User::where('id', $user->id)->update(['account_category' => 'Gold', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                    $this->sendLevelChangeMail($user->id, 'Gold');
                } else if ($benificry_wallet_usd >= 50000 and $benificry_wallet_usd <= 100000 and ($user->account_category == 'Silver' || $user->account_category == 'Gold')) {
                    User::where('id', $user->id)->update(['account_category' => 'Platinum', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                    $this->sendLevelChangeMail($user->id, 'Platinum');
                } else if ($benificry_wallet_usd >= 100000 and ($user->account_category == 'Silver' || $user->account_category == 'Gold' || $user->account_category == 'Platinum')) {
                    User::where('id', $user->id)->update(['account_category' => 'Private Wealth', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                    $this->sendLevelChangeMail($user->id, 'Private Wealth');
                } else {
                    User::where('id', $user->id)->update(['wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                }
            } else if ($user->user_type == 'Agent' && $user->business_name != '') {
                if ($benificry_wallet_usd > 1000000 and $benificry_wallet_usd <= 5000000 and $user->account_category == 'Gold') {
                    User::where('id', $user->id)->update(['account_category' => 'Platinum', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                    $this->sendLevelChangeMail($user->id, 'Platinum');
                } else if ($benificry_wallet_usd > 5000000 and ($user->account_category == 'Gold' || $user->account_category == 'Platinum')) {
                    User::where('id', $user->id)->update(['account_category' => 'Enterprises', 'wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                    $this->sendLevelChangeMail($user->id, 'Enterprises');
                } else {
                    User::where('id', $user->id)->update(['wallet_amount' => $benificry_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
                }
            }
        }
    }

    public function exchange(Request $request) {
        $pageTitle = 'Exchange Currency';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        if ($recordInfo->user_type == 'Personal') {
            $fee_name = 'EXCHANGE_FEE';
        } else if ($recordInfo->user_type == 'Business') {
            $fee_name = 'MERCHANT_EXCHANGE_FEE';
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
            $fee_name = 'EXCHANGE_FEE';
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name == "") {
            $fee_name = 'MERCHANT_EXCHANGE_FEE';
        }

        $fees = Fee::where('fee_name', $fee_name)->first();
        $fee_value = $fees->fee_value;

        Session::put('failed_session_message', 'You will be charged USD '.$fee_value.' or equivalent on each currency exchange request.');



        return view('users.exchange', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'fee_value' => $fee_value]);
    }

    public function exchangeCurrency() {
        $input = Input::all();
        if (!empty($input)) {
            $recordInfo = User::where('id', Session::get('user_id'))->first();
            // echo '<pre>';print_r($recordInfo);exit;
            $amount = $input['from_amount'];

            if ($amount <= 0) {
                $result = array('result' => 0, 'data' => 'Amount must be a positive number.');
                echo json_encode($result);
                exit;
            }
            $from_currency = $input['from_currency'];
            $to_currency = $input['to_currency'];
            $convertedCurrArr = $this->convertCurrency($from_currency, $to_currency, $amount);
            $convertedCurrArr = explode('##', $convertedCurrArr);

            $converted_amount = $convertedCurrArr[0];
            $converted_rate = $convertedCurrArr[0];

            if ($recordInfo->user_type == 'Personal') {
                $convr_fee_name = 'EXCHANGE_FEE';
            } else if ($recordInfo->user_type == 'Business') {
                $convr_fee_name = 'MERCHANT_EXCHANGE_FEE';
            } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                $convr_fee_name = 'EXCHANGE_FEE';
            } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                $convr_fee_name = 'MERCHANT_EXCHANGE_FEE';
            }


            $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
            $conversion_feet = $fees_convr->fee_value;

            if ($recordInfo->currency == 'USD') {
                $fee_amount = $conversion_feet;
            } else {
                $convertedCurrArr1 = $this->convertCurrency('USD', $recordInfo->currency, $conversion_feet);
                $convertedCurrArr1 = explode('##', $convertedCurrArr1);
                $fee_amount = $convertedCurrArr1[0];
            }

            if ($recordInfo->wallet_amount < $fee_amount) {
                $result = array('result' => 0, 'data' => 'Insufficient Balance.');
                echo json_encode($result);
                exit;
            }

            $user_wallet = $recordInfo->wallet_amount - $fee_amount;
            User::where('id', Session::get('user_id'))->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);

            $adminInfo = User::where('id', 1)->first();
            $admin_wallet = ($adminInfo->wallet_amount + $conversion_feet);
            User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

            $refrence_id = time() . rand() . Session::get('user_id');
            $trans = new Transaction([
                "user_id" => Session::get('user_id'),
                "receiver_id" => 1,
                "amount" => $fee_amount,
                "fees" => 0,
                "currency" => $recordInfo->currency,
                "trans_type" => 2, //Debit
                "trans_to" => 'Dafri_Wallet',
                "trans_for" => 'Exchange Charge',
                "refrence_id" => $refrence_id,
                "billing_description" => 'na',
                "real_value" => $fee_amount,
                "user_close_bal" => $user_wallet,
                "status" => 1,
                "created_at" => date('Y-m-d H:i:s'),
                "updated_at" => date('Y-m-d H:i:s'),
            ]);
            $trans->save();
            if($from_currency==$recordInfo->currency)
            {
            $result = array('result' => 1, 'data' => '<p>' . $amount . ' ' . $from_currency . ' = ' . $converted_amount . ' ' . $to_currency . '</p><p>Currency exchange request charges paid - ' . $recordInfo->currency . ' ' . $fee_amount . '  </p>','buttontext' => '<a href="'.HTTP_PATH.'/auth/fund-transfer/'.base64_encode($amount).'" ><button class="sub-btn" type="button">Pay Now </button> </a>', 'to_amount' => $converted_amount);
            }
            else{
                $result = array('result' => 1, 'data' => '<p>' . $amount . ' ' . $from_currency . ' = ' . $converted_amount . ' ' . $to_currency . '</p><p>Currency exchange request charges paid - ' . $recordInfo->currency . ' ' . $fee_amount . '</p>','buttontext'=>'','to_amount' => $converted_amount);   
            }
            echo json_encode($result);
            exit;
        }
    }

    function getPublicKey() {

        $curl = curl_init();

        curl_setopt_array($curl, [
            CURLOPT_URL => "https://api-sandbox.circle.com/v1/encryption/public",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "GET",
            CURLOPT_HTTPHEADER => [
                "Accept: application/json"
            ],
        ]);

        $response = curl_exec($curl);
        $err = curl_error($curl);

        curl_close($curl);

        if ($err) {
            echo "cURL Error #:" . $err;
        } else {
            echo $response;
        }
    }

    public function beneficiary_list() {
        $pageTitle = 'Beneficiary List';
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $query = new Beneficiary();
        $query = $query->where("user_id", Session::get('user_id'));
        $records = $query->orderBy('id', 'DESC')->paginate(20);

        return view('users.beneficiary_list', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'records' => $records]);
    }

    public function deleteBeneficiary($beneficiary_id) {
        Beneficiary::where('id', $beneficiary_id)->delete();
        Session::put('success_session_message', 'Beneficiary details removed successfully.');
        return Redirect::to('auth/beneficiary-list');
    }

    //to get the dba value

    public function dba_currency_exchange()
    {
        $apikey = '9b80364f031394b1bd06fb29da25beb1a7182559fd3ec00dc1b3d6282f671a3d';
        $curr_req = "https://min-api.cryptocompare.com/data/price?fsym=USD&tsyms=DBA&apiKey=" . $apikey;
        $json = file_get_contents($curr_req);
        $obj = json_decode($json, true);
        $val=$obj['DBA'];
        echo $val; die;

    }


    public function airtime_giftcard()
    {
    $pageTitle = 'GiftCard';
    $recordInfo = User::where('id', Session::get('user_id'))->first();
    $countryData = Country::where('status',1)->get();
    $access_token=$this->getTokenGiftCard();
    return view('users.airtime_giftcard', ['title' => $pageTitle, 'recordInfo' => $recordInfo,'access_token'=>$access_token,'countryData'=>$countryData]);
    }

    public function getGiftCard(Request $request)
    {
        $pageTitle = 'GiftCard';      
        $recordInfo = User::where('id', Session::get('user_id'))->first();
            if (!empty($request->has('operator_id'))) {
            $operator_id = $request->get('operator_id');

            if (!empty($request->has('productName'))) {
                $productName = '&productName='.$request->get('productName');
            }
            else{
            $productName='';    
            }
            $access_token = $request->get('access_token');
            $pageNum = $request->get('pageNum');
            $curl = curl_init();
            curl_setopt_array($curl, array(
                CURLOPT_URL => AIRTIME_GIFTCARD_URL . '/products?page='.$pageNum.'&size=16&countryCode='.$operator_id.$productName,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'GET',
                CURLOPT_HTTPHEADER => array(
                'Authorization:Bearer ' . $access_token . '
                 Accept: application/com.reloadly.giftcards-v1+json'
                ),
                ));

            $response = curl_exec($curl);
            curl_close($curl);
            $giftcard = json_decode($response);
//              echo "<pre>";
//              print_r($giftcard);exit;
            return view('users.airtime_giftList', ['title' => $pageTitle, 'recordInfo' => $recordInfo,'access_token'=>$access_token,'giftcard'=>$giftcard]);
 
    }
   }

    public function getGiftCardDetail()
    {

        $pageTitle = 'Gift Card Detail';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $currency=$recordInfo->currency;
        $amt_array= $this->convertCurrency('ZAR',$currency,1);
        $amt_array_explode=explode('##',$amt_array);
        $converstion_rate=$amt_array_explode[1];
        $input=Input::all();
        $product_id=base64_decode(base64_decode($input['product_id']));
        $access_token=$this->getTokenGiftCard();
        $curl = curl_init();
        curl_setopt_array($curl, array(
            CURLOPT_URL => AIRTIME_GIFTCARD_URL . '/products/'.$product_id,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
            CURLOPT_HTTPHEADER => array(
            'Authorization:Bearer ' . $access_token . '
             Accept: application/com.reloadly.giftcards-v1+json'
            ),
            ));

        $response = curl_exec($curl);
        curl_close($curl);
        $giftDetail = json_decode($response);
        if($giftDetail->denominationType=="FIXED" && !isset($giftDetail->fixedSenderDenominations[0]))
        {
        Session::put('error_session_message', "Invalid Gift Card.Please try again with another giftcard");
        return Redirect::to('/auth/airtime_giftcard');
        }
        elseif($giftDetail->denominationType=="RANGE" && (!isset($giftDetail->minRecipientDenomination) || !isset($giftDetail->maxRecipientDenomination)))
        {
        Session::put('error_session_message', "Invalid Gift Card.Please try again with another giftcard");
        return Redirect::to('/auth/airtime_giftcard');
        }

        return view('users.airtime_giftDetail', ['title' => $pageTitle, 'recordInfo' => $recordInfo,'access_token'=>$access_token,'giftDetail'=>$giftDetail,'converstion_rate'=>$converstion_rate]);

    }

    public function giftcardPurchased()
    {   
        $pageTitle = 'Purchased Gift Card';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $giftcard = GiftCard::where('user_id',$recordInfo->id)->orderBy('id','desc')->get();
        return view('users.purchased_gift_card', ['title' => $pageTitle, 'recordInfo' => $recordInfo,
        'giftcard'=>$giftcard]);
    }


    public function getGiftCardFee()
    {
      
        $input=Input::all();
        $total_amount_zar=$input['zar_total_price'];
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        if ($recordInfo->user_type == 'Personal') {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == 'Business') {
            $userName = strtoupper($recordInfo->business_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
            $userName = strtoupper($recordInfo->business_name);
        }

        $currency_code=$input['senderCurrencyCode'];
        if($recordInfo->currency==$currency_code)
        {
        $total_amount=$total_amount_zar;
        }
        else
        {
        $amt_array= $this->convertCurrency($currency_code,$recordInfo->currency,$total_amount_zar);
        $amt_array_explode=explode('##',$amt_array);
        $total_amount=$amt_array_explode[0];
        $converstion_rate=$amt_array_explode[1];
        }

        if ($recordInfo->user_type == 'Personal') {
            if ($recordInfo->account_category == "Silver") {
                $fee_name = 'GIFT_CARD_SILVER';
            } else if ($recordInfo->account_category == "Gold") {
                $fee_name = 'GIFT_CARD_GOLD';
            } else if ($recordInfo->account_category == "Platinum") {
                $fee_name = 'GIFT_CARD_PLATINUM';
            } else if ($recordInfo->account_category == "Private Wealth") {
                $fee_name = 'GIFT_CARD_PRIVATE_WEALTH';
            } else {
                $fee_name = 'GIFT_CARD_SILVER';
            }
            $fees = Fee::where('fee_name', $fee_name)->first();
            $fees_amount = ($total_amount * $fees->fee_value) / 100;
        } else if ($recordInfo->user_type == 'Business') {
            if ($recordInfo->account_category == "Gold") {
                $fee_name = 'MERCHANT_GIFT_CARD_GOLD';
            } else if ($recordInfo->account_category == "Platinum") {
                $fee_name = 'MERCHANT_GIFT_CARD_PLATINUM';
            } else if ($recordInfo->account_category == "Enterprises") {
                $fee_name = 'MERCHANT_GIFT_CARD_ENTERPRIS';
            } else {
                $fee_name = 'MERCHANT_GIFT_CARD_GOLD';
            }
            $fees = Fee::where('fee_name', $fee_name)->first();
            $fees_amount = ($total_amount * $fees->fee_value) / 100;
        } else {
            if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                if ($recordInfo->account_category == "Silver") {
                    $fee_name = 'GIFT_CARD_SILVER';
                } else if ($recordInfo->account_category == "Gold") {
                    $fee_name = 'GIFT_CARD_GOLD';
                } else if ($recordInfo->account_category == "Platinum") {
                    $fee_name = 'GIFT_CARD_PLATINUM';
                } else if ($recordInfo->account_category == "Private Wealth") {
                    $fee_name = 'GIFT_CARD_PRIVATE_WEALTH';
                } else {
                    $fee_name = 'GIFT_CARD_SILVER';
                }  
                $fees = Fee::where('fee_name', $fee_name)->first();
                $fees_amount = ($total_amount * $fees->fee_value) / 100;
            } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name == "") {
                if ($recordInfo->account_category == "Gold") {
                    $fee_name = 'MERCHANT_GIFT_CARD_GOLD';
                } else if ($recordInfo->account_category == "Platinum") {
                    $fee_name = 'MERCHANT_GIFT_CARD_PLATINUM';
                } else if ($recordInfo->account_category == "Enterprises") {
                    $fee_name = 'MERCHANT_GIFT_CARD_ENTERPRIS';
                } else {
                    $fee_name = 'MERCHANT_GIFT_CARD_GOLD';
                }
                $fees = Fee::where('fee_name', $fee_name)->first();
                $fees_amount = ($total_amount * $fees->fee_value) / 100;
              }
            }


        $withdraw_amount_total=$total_amount+$fees_amount;
        echo $userName . "###" . $recordInfo->currency ."###" .$withdraw_amount_total . "###" . $recordInfo->email . "###" . $recordInfo->account_number."###".$fees_amount;
        exit;

    }

    public function getGiftCardRedeem()
    {
        $input=Input::all();
        $trans_id=base64_decode(base64_decode($input['code']));
        $access_token=$this->getTokenGiftCard();
        $curl = curl_init();
        curl_setopt_array($curl, array(
        CURLOPT_URL => AIRTIME_GIFTCARD_URL . '/orders/transactions/'.$trans_id.'/cards',
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => '',
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => 'GET',
        CURLOPT_HTTPHEADER => array(
            'Authorization:Bearer ' . $access_token . '
             Accept: application/com.reloadly.giftcards-v1+json'
        ),
        ));

        $response = curl_exec($curl);
        curl_close($curl);
        $giftDetail = json_decode($response);
        //  echo "<pre>";
        //  print_r($giftDetail);
        if(array_key_exists(0,$giftDetail))
        {
            $cardNumber=[];
            $pinCode=[];
            $html='';
            foreach($giftDetail as $value)
            {
                $cardNumber[] = $value->cardNumber;
                $pinCode[]=$value->pinCode;
                $html.='
                <div class="popup-info-data">
                <span class="label-mini">CardNumber :</span> <span id="recipName">'.$value->cardNumber.'</span>
                </div>

                <div class="popup-info-data">
                <span class="label-mini">PinCode :</span> <span id="recipAccNum">'.$value->pinCode.'</span>
                </div>
                ';
            }
            GiftCard::where('r_trans_id',$trans_id)->update(['cardNumber' => json_encode($cardNumber),'pinCode' =>  json_encode($pinCode)]);  
            echo $html; die;
            
        }
        else{
        echo 0;
        }
        die;
    }


    public function giftCardorder()
    {
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        if ($recordInfo->user_type == 'Personal') {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == 'Business') {
            $userName = strtoupper($recordInfo->business_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
            $userName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
            $userName = strtoupper($recordInfo->business_name);
        }

        $country=$recordInfo->country;
        $country_short_name=Country::where('name',$country)->first()->sortname;

      $input=Input::all();
    //   echo "<pre>";
    //   print_r($input); die;  
      
      $curl = curl_init();
      $access_token=$this->getTokenGiftCard();
      $product_id=$input['product_id'];
      $productName=$input['productName'];
      $countryCode=$input['productCountryCode'];
      $quantity=$input['quantity']; 
      $unitPrice=$input['usd_amount'];
      $customIdentifier=$this->generateRandomString1();
      $senderName=$userName;
      $recipientEmail=$recordInfo->email;
      $rcountryCode=$country_short_name; 
      if($recordInfo->country_code!="" && $recordInfo->phone!="")
      {
      $phoneNumber=preg_replace('/^\+?'.$recordInfo->country_code.'|\D/', '', ($recordInfo->phone));
      }
      else{
      $phoneNumber="";   
      }
      $product_image_link=$input['product_image_link'];

      $total_amount_zar=$input['total_price_zar'];
      $currency_code=$input['senderCurrencyCode'];
      if($recordInfo->currency==$currency_code)
      {
      $total_amount=$total_amount_zar;
      }
      else
      {
      $amt_array= $this->convertCurrency($currency_code,$recordInfo->currency,$total_amount_zar);
      $amt_array_explode=explode('##',$amt_array);
      $total_amount=$amt_array_explode[0];
      $converstion_rate=$amt_array_explode[1];
      }

      if($total_amount > $recordInfo->wallet_amount)
      {
      Session::put('error_session_message', "Insufficient Balance.");
      return Redirect::to('auth/airtime_giftcard');
      }

      if ($recordInfo->user_type == 'Personal') {
        if ($recordInfo->account_category == "Silver") {
            $fee_name = 'GIFT_CARD_SILVER';
        } else if ($recordInfo->account_category == "Gold") {
            $fee_name = 'GIFT_CARD_GOLD';
        } else if ($recordInfo->account_category == "Platinum") {
            $fee_name = 'GIFT_CARD_PLATINUM';
        } else if ($recordInfo->account_category == "Private Wealth") {
            $fee_name = 'GIFT_CARD_PRIVATE_WEALTH';
        } else {
            $fee_name = 'GIFT_CARD_SILVER';
        }
        $fees = Fee::where('fee_name', $fee_name)->first();
        $fees_amount = ($total_amount * $fees->fee_value) / 100;
    } else if ($recordInfo->user_type == 'Business') {
        if ($recordInfo->account_category == "Gold") {
            $fee_name = 'MERCHANT_GIFT_CARD_GOLD';
        } else if ($recordInfo->account_category == "Platinum") {
            $fee_name = 'MERCHANT_GIFT_CARD_PLATINUM';
        } else if ($recordInfo->account_category == "Enterprises") {
            $fee_name = 'MERCHANT_GIFT_CARD_ENTERPRIS';
        } else {
            $fee_name = 'MERCHANT_GIFT_CARD_GOLD';
        }
        $fees = Fee::where('fee_name', $fee_name)->first();
        $fees_amount = ($total_amount * $fees->fee_value) / 100;
    } else {
        if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
            if ($recordInfo->account_category == "Silver") {
                $fee_name = 'GIFT_CARD_SILVER';
            } else if ($recordInfo->account_category == "Gold") {
                $fee_name = 'GIFT_CARD_GOLD';
            } else if ($recordInfo->account_category == "Platinum") {
                $fee_name = 'GIFT_CARD_PLATINUM';
            } else if ($recordInfo->account_category == "Private Wealth") {
                $fee_name = 'GIFT_CARD_PRIVATE_WEALTH';
            } else {
                $fee_name = 'GIFT_CARD_SILVER';
            }  
            $fees = Fee::where('fee_name', $fee_name)->first();
            $fees_amount = ($total_amount * $fees->fee_value) / 100;
        } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name == "") {
            if ($recordInfo->account_category == "Gold") {
                $fee_name = 'MERCHANT_GIFT_CARD_GOLD';
            } else if ($recordInfo->account_category == "Platinum") {
                $fee_name = 'MERCHANT_GIFT_CARD_PLATINUM';
            } else if ($recordInfo->account_category == "Enterprises") {
                $fee_name = 'MERCHANT_GIFT_CARD_ENTERPRIS';
            } else {
                $fee_name = 'MERCHANT_GIFT_CARD_GOLD';
            }
            $fees = Fee::where('fee_name', $fee_name)->first();
            $fees_amount = ($total_amount * $fees->fee_value) / 100;
          }
        }

        $withdraw_amount_total=$total_amount+$fees_amount;
        if ($recordInfo->wallet_amount < $withdraw_amount_total) {
        Session::put('error_session_message', "The amount in your account can't cover " . $recordInfo->currency . ' ' . $fees_amount . " fee for this transaction. Please try again with different amount.");
        return Redirect::to('auth/airtime_giftcard');
        }

        $total_fee_zar_arr= $this->convertCurrency($recordInfo->currency,'ZAR',$fees_amount);
        $total_fee_zar=explode('##',$total_fee_zar_arr)['0'];

        $dateTrans = date('Y-m-d');
        $startDate = $dateTrans . ' 00:00:00';
        $endDate = $dateTrans . ' 23:59:59';
        $DailyTrans = GiftCard::where('user_id', $recordInfo->id)->whereBetween('created_at', array($startDate, $endDate))->sum('amount');
        $updatetotal=$total_amount_zar+$total_fee_zar+$DailyTrans;
 
        //to convert total zar amount with fee in usd
        $total_amt_usd_arr= $this->convertCurrency('ZAR','USD',$updatetotal);
        $total_amt_usd=explode('##',$total_amt_usd_arr)['0'];

        $getsetting = GiftAirtimeSetting::where('id', 1)->first();

        if($getsetting->limits_giftcard >=$total_amt_usd){
        $curl = curl_init();
        curl_setopt_array($curl, array(
        CURLOPT_URL => AIRTIME_GIFTCARD_URL.'/orders',
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_ENCODING => '',
        CURLOPT_MAXREDIRS => 10,
        CURLOPT_TIMEOUT => 0,
        CURLOPT_FOLLOWLOCATION => true,
        CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
        CURLOPT_CUSTOMREQUEST => 'POST',
        CURLOPT_POSTFIELDS =>'{
            "productId":'.$product_id.',
            "countryCode": "'.$countryCode.'",
            "quantity": '.$quantity.',
            "unitPrice": '.$unitPrice.',
            "customIdentifier": "'.$customIdentifier.'",
            "senderName": "'.$userName.'",
            "recipientEmail": "'.$recordInfo->email.'",
            "recipientPhoneDetails": {
              "countryCode": "'.$rcountryCode.'",
              "phoneNumber": "'.$phoneNumber.'"
            }
        }',
        CURLOPT_HTTPHEADER => array(
          'Authorization:Bearer ' .$access_token,
          'Content-Type: application/json',
          'Accept: application/com.reloadly.giftcards-v1+json'
        ),
      ));
        
      $response = curl_exec($curl);
      curl_close($curl);
      $order_detail = json_decode($response);
      $checkstatus="1";


    }else{
        $curl = curl_init();
        curl_setopt_array($curl, array(
            CURLOPT_URL => AIRTIME_GIFTCARD_URL . '/products/'.$product_id,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
            CURLOPT_HTTPHEADER => array(
            'Authorization:Bearer ' . $access_token . '
             Accept: application/com.reloadly.giftcards-v1+json'
            ),
            ));

        $response = curl_exec($curl);
        curl_close($curl);
        $giftDetail = json_decode($response);

        $order_detail = new \stdClass();
        $order_detail->product = new \stdClass();
        $order_detail->product->brand = new \stdClass();
        $order_detail->status="SUCCESSFUL";
        $sms_fees_zar=0; 
        $order_detail->smsFee=0;
        $order_detail->transactionId=0;
        $order_detail->amount=0;
        $order_detail->discount=0;
        $order_detail->currencyCode=$currency_code;
        $order_detail->fee=0;
        $order_detail->recipientEmail=$recordInfo->email;
        $order_detail->customIdentifier="";
        $order_detail->product->productId=$giftDetail->productId;
        $order_detail->product->productName=$giftDetail->productName;
        $order_detail->product->countryCode=$countryCode;
        $order_detail->product->quantity=$quantity;
        $order_detail->product->unitPrice=$unitPrice;

        $order_detail->product->totalPrice=$unitPrice*$quantity;
        $order_detail->product->currencyCode=$giftDetail->recipientCurrencyCode;
        $order_detail->product->brand->brandId=$giftDetail->brand->brandId;
        $order_detail->product->brand->brandName=$giftDetail->brand->brandName;
        $order_detail->recipientPhone=$phoneNumber;
        $order_detail->transactionCreatedTime=date('Y-m-d H:i:s');
        $checkstatus="2";

    }
 if(isset($order_detail->status)){
if($order_detail->status=='SUCCESSFUL'){
               if(isset($order_detail->smsFee))
                 {
                    if($recordInfo->currency==$currency_code)
                    {
                    $total_amount_sms=$order_detail->smsFee;
                    $total_amount=$total_amount+$total_amount_sms;
                    }
                    else
                    {
                    $total_amount_sms=$order_detail->smsFee;     
                    $amt_array_sms = $this->convertCurrency($currency_code,$recordInfo->currency,$total_amount_sms);
                    $amt_array_explode_sms=explode('##',$amt_array_sms);
                    $total_amount_sms=$amt_array_explode_sms[0];
                    $total_amount=$total_amount+$total_amount_sms;
                    }
                    $withdraw_amount_total=$total_amount+$fees_amount;
                    $sms_fees_zar=$order_detail->smsFee; 
                 }

                if($recordInfo->currency!=$currency_code)
                {
                $billing_description= 'IP:' . $this->get_client_ip()."##Amount " . $currency_code . " " . ($total_amount_zar+$sms_fees_zar) . " and Conversion rate " . $converstion_rate ." = ".$recordInfo->currency.' '.$total_amount.'##SENDER_FEES :' . $recordInfo->currency .' '.$fees_amount;
                }
                else{
                $billing_description= 'IP:' . $this->get_client_ip().'##SENDER_FEES :' . $recordInfo->currency .' '.$fees_amount;   
                }

                $sender_wallet = ($recordInfo->wallet_amount - $withdraw_amount_total);

                $trans = new Transaction([
                "user_id" => Session::get('user_id'),
                "receiver_id" => $recordInfo->id,
                "amount" => $total_amount,
                "fees" => $fees_amount,
                "sender_fees" => $fees_amount,
                "sender_currency" =>$recordInfo->currency,
                "currency" =>$recordInfo->currency,
                "receiver_currency" =>'USD',
                "trans_type" => 2, //Debit
                "trans_to" => 'Dafri_Wallet',
                "trans_for" => 'GIFT CARD',
                "refrence_id" => $order_detail->transactionId,
                "billing_description" => $billing_description,
                "user_close_bal" => $sender_wallet,
                "sender_real_value" => $withdraw_amount_total,
                "status" => $checkstatus,
                "created_at" => date('Y-m-d H:i:s'),
                "updated_at" => date('Y-m-d H:i:s'),
                 ]);
                $trans->save(); 

                $TransId = $trans->id;

                $giftcard = new GiftCard([
                    "user_id" => Session::get('user_id'),
                    "r_trans_id" => $order_detail->transactionId,
                    "d_trans_id" => $TransId,
                    "amount" => $order_detail->amount,
                    "discount" => $order_detail->discount,
                    "currencyCode" =>$order_detail->currencyCode,
                    "fee" =>$order_detail->fee,
                    "recipientEmail" =>$order_detail->recipientEmail,
                    "customIdentifier" =>$order_detail->customIdentifier,
                    "productId" => $order_detail->product->productId,
                    "productName" => $order_detail->product->productName,
                    "countryCode" => $order_detail->product->countryCode,
                    "quantity" => $order_detail->product->quantity,
                    "unitPrice" => $order_detail->product->unitPrice,
                    "totalPrice" => $order_detail->product->totalPrice,
                    "productCurrencyCode" =>$order_detail->product->currencyCode,
                    "brandId" => $order_detail->product->brand->brandId,
                    "brandName" => $order_detail->product->brand->brandName,
                    "smsFee" => $order_detail->smsFee,
                    "recipientPhone" =>$order_detail->recipientPhone,
                    "product_image_link" => $product_image_link,
                    "amount_user_currency" => $withdraw_amount_total,
                    "user_currency" => $recordInfo->currency,
                    "transactionCreatedTime" => $order_detail->transactionCreatedTime,
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s'),
                    ]);
                    $giftcard->save(); 

                    if(isset($order_detail->transactionId) && $order_detail->transactionId!="0")
                    {
                    $trans_id=$order_detail->transactionId;
                    $access_token=$this->getTokenGiftCard();
                    $curl = curl_init();
                    curl_setopt_array($curl, array(
                    CURLOPT_URL => AIRTIME_GIFTCARD_URL . '/orders/transactions/'.$trans_id.'/cards',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'GET',
                    CURLOPT_HTTPHEADER => array(
                        'Authorization:Bearer ' . $access_token . '
                         Accept: application/com.reloadly.giftcards-v1+json'
                    ),
                    ));
                    $response = curl_exec($curl);
                    curl_close($curl);
                    $giftDetail = json_decode($response);
                    //  echo "<pre>";
                    //  print_r($giftDetail);
                    if(array_key_exists(0,$giftDetail))
                    {
                        $cardNumber=[];
                        $pinCode=[];
                        $html='';
                        foreach($giftDetail as $value)
                        {
                            $cardNumber[] = $value->cardNumber;
                            $pinCode[]=$value->pinCode;
                        }
                      GiftCard::where('r_trans_id',$trans_id)->update(['cardNumber' => json_encode($cardNumber),'pinCode' =>  json_encode($pinCode)]);  
                    }
                    }


                    User::where('id', Session::get('user_id'))->update(['wallet_amount' => $sender_wallet]);

                    $amount_admin_currency = $this->convertCurrency($recordInfo->currency, 'USD',$withdraw_amount_total);
                    $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                    $admin_amount = $amount_admin_currencyArr[0];
                    $adminInfo = User::where('id', 1)->first();
                    $admin_wallet = ($adminInfo->wallet_amount + $admin_amount);
                    User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);
            

                    $mailAmount = number_format($total_amount, 2, '.', ',');
                    $tmailAmount = number_format($withdraw_amount_total, 2, '.', ',');
                    $emailId = $recordInfo->email;
                    if ($recordInfo->user_type == "Personal") {
                        $userName = strtoupper($recordInfo->first_name);
                        $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                    } else if ($recordInfo->user_type == "Business") {
                        $userName = strtoupper($recordInfo->business_name);
                        $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                    } else if ($recordInfo->user_type == "Agent" && $recordInfo->first_name != "") {
                        $userName = strtoupper($recordInfo->first_name);
                        $mail_dashboard_lnk = HTTP_PATH . '/personal-login';
                    } else if ($recordInfo->user_type == "Agent" && $recordInfo->business_name != "") {
                        $userName = strtoupper($recordInfo->business_name);
                        $mail_dashboard_lnk = HTTP_PATH . '/business-login';
                    }
         
                    $emailSubject = "DafriBank Digital | Account has been debited with " . $recordInfo->currency . " " . $tmailAmount;
                    $emailData['loginLnk'] = $mail_dashboard_lnk;
                    $emailData['mailAmount'] = $mailAmount;
                    $emailData['tmailAmount'] = $tmailAmount;
                    $emailData['user_name'] = $userName;
                    $emailData['fees_amount'] = $fees_amount;
                    $emailData['currency'] = $recordInfo->currency;
                    $emailData['TransId'] = $TransId;
                    $emailData['subjects'] = $emailSubject;
                    $emailData['sender_currency'] = $recordInfo->currency;
                    $emailData['name'] =$order_detail->product->productName;
                    if($getsetting->limits_giftcard >=$total_amt_usd){
                    $emailData['status'] = "Approved";
                    $messagepop="Gift Card Purchased Successfully";
                    Mail::send('emails.giftCardDebit', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subjects']);
                    });

                    // echo "<pre>";
                    // print_r($order_detail); die;


                    }else{
                    $messagepop="Gift Card purchase request submitted successfully and will be processed shortly";
                    $emailData['status'] = "Pending";
                    Mail::send('emails.gift_card_pending', $emailData, function ($message)use ($emailData, $emailId) {
                        $message->to($emailId, $emailId)
                                ->subject($emailData['subjects']);
                    });
                    }
                   

                    $notif = new Notification([
                        'user_id' => $recordInfo->id,
                        'notif_subj' => $emailSubject,
                        'notif_body' => $emailSubject,
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $notif->save();
                    Session::put('success_session_message', $messagepop);
                    return Redirect::to('/overview');
        }
      }
      else{
      Session::put('error_session_message',$order_detail->message);
      return Redirect::to('auth/airtime_giftcard'); 
      }

    }

    public function getTokenGiftCard() {
        $curl = curl_init();
        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://auth.reloadly.com/oauth/token',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => '{
                        "client_id":"' . AIRTIME_CLIENT_ID . '",
                        "client_secret":"' . AIRTIME_SECRET_KEY . '",
                        "grant_type":"client_credentials",
                        "audience":"' . AIRTIME_GIFTCARD_URL . '"
                    }',
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json'
            ),
        ));

        $response = curl_exec($curl);

        curl_close($curl);
        $jsonArr = json_decode($response);
        return $jsonArr->access_token;
    }



    private function convertCurrencyForAirtime($toCurrency, $frmCurrency, $amount) {

        $apikey = CURRENCY_CONVERT_API_KEY;
        $query = $toCurrency . "_" . $frmCurrency;
        $curr_req = "https://free.currconv.com/api/v7/convert?q=" . $query . "&compact=ultra&apiKey=" . $apikey;

        $json = file_get_contents($curr_req);
        $obj = json_decode($json, true);
        $val = floatval($obj[$query]);
        $total = $val * $amount;
        return $total . "##" . $val;
    }

    public function airtime() {
        $pageTitle = 'Airtime Purchase';
        //  echo "This serive is currently hold";
        //  die;
        $recordInfo = User::where('id', Session::get('user_id'))->first();

        $recipient = Recipient::where('user_id', Session::get('user_id'))->get();
        $recipientArr = array();
        foreach ($recipient as $val) {
            $recipientArr[$val->id] = $val->recipient_name . "(" . $val->recipient_acc_num . ")";
        }

        $recentRecipient = Transaction::where("user_id", Session::get('user_id'))->where("trans_for", "W2W")->orderBy('id', 'DESC')->paginate(5);

        $input = Input::all();
        if (!empty($input)) {
            //  echo '<pre>';
            //  print_r($input); die;

            $rules = array(
                'trnsfrAmnt' => 'required|numeric|min:0.1'
            );

            $customMessages = [
                'trnsfrAmnt.required' => 'Amount is required.',
                'trnsfrAmnt.numeric' => 'Amount must be a number.',
                'trnsfrAmnt.min' => 'Amount should be greater than 0.'
            ];
            $validator = Validator::make($input, $rules, $customMessages);
            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('failed_session_message', $message);
                return Redirect::to('auth/airtime');
            } else {


                $operator_id = $input['operator_type'];
                $access_token = $input['access_token'];
                $amount = $input['amountDeduct'];
                $amountDeduct = $input['amountDeduct'];
                $recipient_phone = $input['topup_phone'];

                $contryCode = $input['contryCode'];
                $to_curr = $input['senderCurrencyCode'];

                $recharge_amount=$input['trnsfrAmnt'];
                $recharge_currency=$input['trnsfrCurrncy'];
                $from_curr = $recordInfo->currency;
                if ($amountDeduct == '') {
                    $convertedCurrArr = $this->convertCurrencyForAirtime($to_curr, 'ZAR', $amount);
                    $convertedCurrArr = explode('##', $convertedCurrArr);
                    $amountDeduct = $convertedCurrArr[0];
                }

                $amountDeduct = round($amountDeduct);
//                exit;

                $payment_amountt = $amount;
                $convertion_rate = 0;
                $currency_same = 1;
                if ($from_curr != $to_curr) {
                    $convertedCurrArr = $this->convertCurrencyForAirtime($to_curr, $from_curr, $amount);
                    $convertedCurrArr = explode('##', $convertedCurrArr);
                    $payment_amountt = $convertedCurrArr[0];
                    $convertion_rate = $convertedCurrArr[1];
                    $currency_same = 0;
                }

           //     echo $payment_amountt; die;

                if ($recordInfo->user_type == 'Personal') {
                    if ($recordInfo->account_category == "Silver") {
                        $fee_name = 'TOPUP_FEE';
                    } else if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'TOPUP_FEE_GOLD';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'TOPUP_FEE_PLATINUM';
                    } else if ($recordInfo->account_category == "Private Wealth") {
                        $fee_name = 'TOPUP_FEE_PRIVATE_WEALTH';
                    } else {
                        $fee_name = 'TOPUP_FEE';
                    }

                    $fees = Fee::where('fee_name', $fee_name)->first();

                    $fees_amount = ($payment_amountt * $fees->fee_value) / 100;

                    $conversion_fee = $conversion_amount_sender = 0;
                    if ($from_curr != $recharge_currency) {
                        $convr_fee_name = 'CONVERSION_FEE';
                        $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                        $conversion_fee = $fees_convr->fee_value;

                        $conversion_amount_sender = ($payment_amountt * $conversion_fee) / 100;
                    }


                    $admin_fees_amount = $fees_amount + $conversion_amount_sender;
                } else if ($recordInfo->user_type == 'Business') {
                    if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'MERCHANT_TOPUP_FEE_GOLD';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'MERCHANT_TOPUP_FEE_PLATINUM';
                    } else if ($recordInfo->account_category == "Enterprises") {
                        $fee_name = 'MERCHANT_TOPUP_FEE_Enterprises';
                    } else {
                        $fee_name = 'MERCHANT_TOPUP_FEE_GOLD';
                    }

                    $fees = Fee::where('fee_name', $fee_name)->first();

                    $fees_amount = ($payment_amountt * $fees->fee_value) / 100;

                    $conversion_fee = $conversion_amount_sender = 0;
                    if ($from_curr != $recharge_currency) {
                        $convr_fee_name = 'MERCHANT_CONVERSION_FEE';
                        $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                        $conversion_fee = $fees_convr->fee_value;

                        $conversion_amount_sender = ($payment_amountt * $conversion_fee) / 100;
                    }

                    $admin_fees_amount = $fees_amount + $conversion_amount_sender;
                } else if ($recordInfo->user_type == 'Agent') {
                    if ($recordInfo->first_name != '') {
                        if ($recordInfo->account_category == "Silver") {
                            $fee_name = 'TOPUP_FEE';
                        } else if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'TOPUP_FEE_GOLD';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'TOPUP_FEE_PLATINUM';
                        } else if ($recordInfo->account_category == "Private Wealth") {
                            $fee_name = 'TOPUP_FEE_PRIVATE_WEALTH';
                        } else {
                            $fee_name = 'TOPUP_FEE';
                        }

                        $fees = Fee::where('fee_name', $fee_name)->first();

                        $fees_amount = ($payment_amountt * $fees->fee_value) / 100;

                        $conversion_fee = $conversion_amount_sender = 0;
                        if ($from_curr != $recharge_currency) {
                            $convr_fee_name = 'CONVERSION_FEE';
                            $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                            $conversion_fee = $fees_convr->fee_value;

                            $conversion_amount_sender = ($payment_amountt * $conversion_fee) / 100;
                        }


                        $admin_fees_amount = $fees_amount + $conversion_amount_sender;
                    } else if ($recordInfo->director_name != '') {
                        if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'MERCHANT_TOPUP_FEE_GOLD';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'MERCHANT_TOPUP_FEE_PLATINUM';
                        } else if ($recordInfo->account_category == "Enterprises") {
                            $fee_name = 'MERCHANT_TOPUP_FEE_Enterprises';
                        } else {
                            $fee_name = 'MERCHANT_TOPUP_FEE_GOLD';
                        }

                        $fees = Fee::where('fee_name', $fee_name)->first();

                        $fees_amount = ($payment_amountt * $fees->fee_value) / 100;

                        $conversion_fee = $conversion_amount_sender = 0;
                        if ($from_curr != $recharge_currency) {
                            $convr_fee_name = 'MERCHANT_CONVERSION_FEE';
                            $fees_convr = Fee::where('fee_name', $convr_fee_name)->first();
                            $conversion_fee = $fees_convr->fee_value;

                            $conversion_amount_sender = ($payment_amountt * $conversion_fee) / 100;
                        }

                        $admin_fees_amount = $fees_amount + $conversion_amount_sender;
                    }
                }

                $totalAmount = $payment_amountt + $admin_fees_amount;
                //to convert total price into zar 
                $convertedCurrArr_zar = $this->convertCurrencyForAirtime($from_curr, 'ZAR', $totalAmount);
                $total_amount_zar=explode('##', $convertedCurrArr_zar)['0'];


                //to check amount is grater then AirTime Limit for Daily (USD)*
                $dateTrans = date('Y-m-d');
                $startDate = $dateTrans . ' 00:00:00';
                $endDate = $dateTrans . ' 23:59:59';
                $giftcard_total_transaction_zar= Transaction::where('user_id', $recordInfo->id)->whereBetween('created_at', array($startDate, $endDate))->where('trans_for','Mobile Top-up')->sum('airtime_zar_price');
                $total_debited_amount_zar = $giftcard_total_transaction_zar+$total_amount_zar;
                $getsetting = GiftAirtimeSetting::where('id', 1)->first();
                $total_debited_amount_zar_in_usd= $this->convertCurrencyForAirtime('ZAR','USD', $total_debited_amount_zar);
                $total_debited_amount_in_usd=explode('##', $total_debited_amount_zar_in_usd)['0'];
                if ($recordInfo->wallet_amount < $totalAmount) {
                    Session::put('error_session_message', "Insufficient Balance.");
                    return Redirect::to('auth/airtime');
                }

                if($total_debited_amount_in_usd <= $getsetting->limits_airtime)
                {

                if ($conversion_amount_sender > 0) {
                    $billing_description = 'Mobile Top-up ' . $recharge_currency . ' ' . $recharge_amount . ' for ' . $contryCode . $recipient_phone . ' and amount deducted '.$to_curr.' '.$amount.' Conversion rate ' . $convertion_rate . 'X' . $amount . '=' . $payment_amountt . '##Conversion Fee ' . $conversion_fee . '%##IP:' . $this->get_client_ip() . '##Top-up Fees: ' . $recordInfo->currency . ' ' . $fees_amount . '##Conversion Fees: ' . $recordInfo->currency . ' ' . $conversion_amount_sender;
                } else {
                    $billing_description = 'Mobile Top-up ' . $recharge_currency . ' ' . $recharge_amount . ' for ' . $contryCode . $recipient_phone . ' ##IP:' . $this->get_client_ip() . '##Top-up Fees: ' . $recordInfo->currency . ' ' . $fees_amount;
                }

                $contryCodeArr = explode('+', $contryCode);
                $countryData = Country::where('country_code', $contryCodeArr[1])->first();
                $countName = $countryData->sortname;
//                echo '<pre>';
//                print_r($balance);
//                exit;

                $senderCountryData = Country::where('name', $recordInfo->country)->first();
                $senderCountName = $senderCountryData->sortname;
                $curl = curl_init();
                curl_setopt_array($curl, array(
                    CURLOPT_URL => AIRTIME_URL . '/topups',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'POST',
                    CURLOPT_POSTFIELDS => '{
                        "operatorId":"' . $operator_id . '",
                        "amount":"' . $amountDeduct . '",
                        "customIdentifier": "Top-up from ' . $recordInfo->phone . ' at ' . time() . '",
                        "recipientPhone": {
                            "countryCode": "' . $countName . '",
                            "number": "' . $recipient_phone . '"
                        },
                        "senderPhone": {
                            "countryCode": "' . $senderCountName . '",
                            "number": "' . $recordInfo->phone . '"
                        }
                    }',
                    CURLOPT_HTTPHEADER => array(
                        'Authorization: Bearer ' . $access_token,
                        'Accept: application/com.reloadly.topups-v1+json',
                        'Content-Type: application/json'
                    ),
                ));

                $response = curl_exec($curl);

                curl_close($curl);
                $jsonArr = json_decode($response);

//                echo '<pre>';print_r($jsonArr);exit;


                if (isset($jsonArr->message) && !empty($jsonArr->message)) {

                    $error = $jsonArr->message;
                    if ($jsonArr->message == 'Insufficient funds in the wallet to complete this transaction') {
                        $error = 'Transaction could not completed due to technical error.';
                    }

                    Session::put('error_session_message', $error);
                    return Redirect::to('auth/airtime');
                }

//                if($jsonArr->message != ''){
//                    Session::put('error_session_message', $jsonArr->message);
//                    return Redirect::to('auth/airtime');
//                }
                $transactionId = $jsonArr->transactionId;
                $sender_wallet = ($recordInfo->wallet_amount - $totalAmount);
                User::where('id', Session::get('user_id'))->update(['wallet_amount' => $sender_wallet]);

                $amount_admin_currency = $this->convertCurrency($recordInfo->currency, 'USD', $totalAmount);
                $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                $admin_amount = $amount_admin_currencyArr[0];

                $adminInfo = User::where('id', 1)->first();
                $admin_wallet = ($adminInfo->wallet_amount + $admin_amount);
                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                $refrence_id = $transactionId;
                $trans = new Transaction([
                    "user_id" => Session::get('user_id'),
                    "receiver_id" => 1,
                    "amount" => $payment_amountt,
                    "fees" => $admin_fees_amount,
                    "sender_fees" => $admin_fees_amount,
                    "receiver_fees" => 0,
                    "currency" => $recordInfo->currency,
                    "sender_currency" => $recordInfo->currency,
                    "trans_type" => 2, //Debit
                    "trans_to" => 'Dafri_Wallet',
                    "trans_for" => 'Mobile Top-up',
                    "refrence_id" => $refrence_id,
                    "billing_description" => $billing_description,
                    "user_close_bal" => $sender_wallet,
                    "receiver_close_bal" => $admin_wallet,
                    "real_value" => $totalAmount,
                    "status" => 1,
                    "airtime_zar_price"=>$total_amount_zar,
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s'),
                ]);
                $trans->save();
                $TransId = $trans->id;

                $emailId = $recordInfo->email;
                if ($recordInfo->user_type == 'Personal') {
                    $userName = strtoupper($recordInfo->first_name);
                    $userFullName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                    $receiverName = strtoupper($recordInfo->first_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($recordInfo->user_type == 'Business') {
                    $userName = strtoupper($recordInfo->business_name);
                    $userFullName = strtoupper($recordInfo->business_name);
                    $receiverName = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                    $userName = strtoupper($recordInfo->first_name);
                    $userFullName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                    $receiverName = strtoupper($recordInfo->first_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                    $userName = strtoupper($recordInfo->business_name);
                    $userFullName = strtoupper($recordInfo->business_name);
                    $receiverName = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                }

                $emailSubject = "DafriBank Digital | Mobile-Top Success";
                $notiSubject = "DafriBank Digital |  Mobile-Top Success For " . $to_curr . ' ' . $amount . ".";

                $emailData['subject'] = $emailSubject;
                $emailData['emailId'] = $emailId;
                $emailData['trans_id'] = $TransId;
                $emailData['user_name'] = $userFullName;
                $emailData['recharge_amount'] = $from_curr . ' ' . $totalAmount;
                $emailData['amount'] = $from_curr . ' ' . $totalAmount;
                $emailData['number'] = $contryCode . $recipient_phone;
                $emailData['ip'] = $this->get_client_ip();
                $emailData['loginLnk'] = $loginLnk;

                Mail::send('emails.mobile_topup', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });

                $notif = new Notification([
                    'user_id' => $recordInfo->id,
                    'notif_subj' => $notiSubject,
                    'notif_body' => $notiSubject,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $notif->save();

                Session::put('success_session_message', "Mobile top-up completed.");

            }
            else{

                $contryCodeArr = explode('+', $contryCode);
                $countryData = Country::where('country_code', $contryCodeArr[1])->first();
                $countName = $countryData->sortname;
                $senderCountryData = Country::where('name', $recordInfo->country)->first();
                $senderCountName = $senderCountryData->sortname;
                $airtime_data='{
                    "operatorId":"' . $operator_id . '",
                    "amount":"' . $amountDeduct . '",
                    "customIdentifier": "Top-up from ' . $recordInfo->phone . ' at ' . time() . '",
                    "recipientPhone": {
                        "countryCode": "' . $countName . '",
                        "number": "' . $recipient_phone . '"
                    },
                    "senderPhone": {
                        "countryCode": "' . $senderCountName . '",
                        "number": "' . $recordInfo->phone . '"
                    }
                }';

                if ($conversion_amount_sender > 0) {
                    $billing_description = 'Mobile Top-up ' . $recharge_currency . ' ' . $recharge_amount . ' for ' . $contryCode . $recipient_phone . ' and amount deducted '.$to_curr.' '.$amount.' Conversion rate ' . $convertion_rate . 'X' . $amount . '=' . $payment_amountt . '##Conversion Fee ' . $conversion_fee . '%##IP:' . $this->get_client_ip() . '##Top-up Fees: ' . $recordInfo->currency . ' ' . $fees_amount . '##Conversion Fees: ' . $recordInfo->currency . ' ' . $conversion_amount_sender;
                } else {
                    $billing_description = 'Mobile Top-up ' . $recharge_currency . ' ' . $recharge_amount . ' for ' . $contryCode . $recipient_phone . ' ##IP:' . $this->get_client_ip() . '##Top-up Fees: ' . $recordInfo->currency . ' ' . $fees_amount;
                }

                $sender_wallet = ($recordInfo->wallet_amount - $totalAmount);
                User::where('id', Session::get('user_id'))->update(['wallet_amount' => $sender_wallet]);

                $amount_admin_currency = $this->convertCurrency($recordInfo->currency, 'USD', $totalAmount);
                $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                $admin_amount = $amount_admin_currencyArr[0];

                $adminInfo = User::where('id', 1)->first();
                $admin_wallet = ($adminInfo->wallet_amount + $admin_amount);
                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);

                $refrence_id = 0;
                $trans = new Transaction([
                    "user_id" => Session::get('user_id'),
                    "receiver_id" => 1,
                    "amount" => $payment_amountt,
                    "fees" => $admin_fees_amount,
                    "sender_fees" => $admin_fees_amount,
                    "receiver_fees" => 0,
                    "currency" => $recordInfo->currency,
                    "sender_currency" => $recordInfo->currency,
                    "trans_type" => 2, //Debit
                    "trans_to" => 'Dafri_Wallet',
                    "trans_for" => 'Mobile Top-up',
                    "refrence_id" => $refrence_id,
                    "billing_description" => $billing_description,
                    "user_close_bal" => $sender_wallet,
                    "receiver_close_bal" => $admin_wallet,
                    "real_value" => $totalAmount,
                    "status" => 2,
                    "airtime_zar_price"=>$total_amount_zar,
                    "airtime_data"=>$airtime_data,
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s'),
                ]);
                $trans->save();
                $TransId = $trans->id;

                $emailId = $recordInfo->email;
                if ($recordInfo->user_type == 'Personal') {
                    $userName = strtoupper($recordInfo->first_name);
                    $userFullName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                    $receiverName = strtoupper($recordInfo->first_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($recordInfo->user_type == 'Business') {
                    $userName = strtoupper($recordInfo->business_name);
                    $userFullName = strtoupper($recordInfo->business_name);
                    $receiverName = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
                    $userName = strtoupper($recordInfo->first_name);
                    $userFullName = strtoupper($recordInfo->first_name . ' ' . $recordInfo->last_name);
                    $receiverName = strtoupper($recordInfo->first_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                    $userName = strtoupper($recordInfo->business_name);
                    $userFullName = strtoupper($recordInfo->business_name);
                    $receiverName = strtoupper($recordInfo->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                }

                $emailSubject = "DafriBank Digital | Account has been debited with " . $recordInfo->currency . " " . $payment_amountt;
                $emailData['subject'] = $emailSubject;
                $emailData['emailId'] = $emailId;
                $emailData['trans_id'] = $TransId;
                $emailData['user_name'] = $userFullName;
                $emailData['recharge_amount'] = $from_curr . ' ' . $payment_amountt;   
                $emailData['amount'] = $from_curr . ' ' . $payment_amountt;
                $emailData['number'] = $contryCode . $recipient_phone;
                $emailData['ip'] = $this->get_client_ip();
                $emailData['loginLnk'] = $loginLnk;

                Mail::send('emails.mobile_topup_pending', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subject']);
                });

                $notif = new Notification([
                    'user_id' => $recordInfo->id,
                    'notif_subj' => $emailSubject,
                    'notif_body' => $emailSubject,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $notif->save();

                Session::put('success_session_message', "Mobile Top-up request submitted successfully and will be processed shortly");
            }
               
                return Redirect::to('auth/airtime');
            }
        }

        $access_token = $this->getToken();

        return view('users.airtime', ['title' => $pageTitle, 'recordInfo' => $recordInfo, 'recipientArr' => $recipientArr, 'recentRecipient' => $recentRecipient, 'access_token' => $access_token]);
    }

    public function getOperator(Request $request) {
        if (!empty($request->has('phone'))) {
            $phone = $request->get('phone');
            $access_token = $request->get('access_token');
            $contryCode = $request->get('contryCode');
            $user_id = Session::get('user_id');

            $detectedOperator = '';
            $operatorList = array();

            $contryCodeArr = explode('+', $contryCode);

            if (!isset($contryCodeArr[1]) || empty($contryCodeArr[1])) {
                return view('elements.update_operator', ['detectedOperator' => $detectedOperator, 'operatorList' => $operatorList]);
            }

            $countryData = Country::where('country_code', $contryCodeArr[1])->first();
            $countName = $countryData->sortname;

            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => AIRTIME_URL . '/operators/auto-detect/phone/' . $phone . '/countries/' . $countName . '?suggestedAmountsMap=true&SuggestedAmounts=true',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'GET',
                CURLOPT_HTTPHEADER => array(
                    'Authorization: Bearer ' . $access_token,
                    'Accept: application/com.reloadly.topups-v1+json'
                ),
            ));

            $response = curl_exec($curl);
//echo '<pre>';print_r($response);exit;
            curl_close($curl);
            $operatorDetected = json_decode($response);
//            echo '<pre>';print_r($operatorDetected);
            if (empty($operatorDetected) || (isset($operatorDetected->errorCode) || isset($operatorDetected->message))) {
                return view('elements.update_operator', ['detectedOperator' => $detectedOperator, 'operatorList' => $operatorList]);
            }

//            echo '<pre>';print_r($operatorDetected->id);exit;
            $detectedOperator = $operatorDetected->id;

            $curl = curl_init();
            curl_setopt_array($curl, array(
                CURLOPT_URL => AIRTIME_URL . '/operators/countries/' . $countName . '?includeBundles=true&includeData=true&includePin=true&suggestedAmounts=true&suggestedAmountsMap=true',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'GET',
                CURLOPT_HTTPHEADER => array(
                    'Authorization:Bearer ' . $access_token . '
Accept:application/com.reloadly.topups-v1+json'
                ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            $operators = json_decode($response);

//        echo '<pre>';print_r($operators);exit;
            if ($operators) {
                foreach ($operators as $operator) {
                    $operatorList[$operator->id] = $operator->name;
                }
            }

            return view('elements.update_operator', ['detectedOperator' => $detectedOperator, 'operatorList' => $operatorList]);
        }
    }

    public function getPlanData(Request $request) {
        if (!empty($request->has('operator_id'))) {
            $operator_id = $request->get('operator_id');

            if ($operator_id == '') {
                exit;
            }
            $access_token = $request->get('access_token');


            $curl = curl_init();
            curl_setopt_array($curl, array(
                CURLOPT_URL => AIRTIME_URL . '/operators/' . $operator_id . '?suggestedAmounts=true&suggestedAmountsMap=true',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'GET',
                CURLOPT_HTTPHEADER => array(
                    'Authorization:Bearer ' . $access_token . '
Accept:application/com.reloadly.topups-v1+json'
                ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);
            $operator = json_decode($response);
//echo '<pre>';print_r($operator);
            $name = $operator->name;
            $currency = $operator->destinationCurrencyCode;

     //  echo '<pre>';print_r($operator);  
       //exit;

            return view('elements.update_plan', ['operator' => $operator, 'name' => $name, 'currency' => $currency]);
        }
    }

    public function topup() {
        $pageTitle = 'Airtime Purchase';
        $recordInfo = User::where('id', Session::get('user_id'))->first();


        return view('users.topup', ['title' => $pageTitle, 'recordInfo' => $recordInfo]);
    }

    public function getToken() {
        $curl = curl_init();
        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://auth.reloadly.com/oauth/token',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => '{
                        "client_id":"' . AIRTIME_CLIENT_ID . '",
                        "client_secret":"' . AIRTIME_SECRET_KEY . '",
                        "grant_type":"client_credentials",
                        "audience":"' . AIRTIME_URL . '"
                    }',
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json'
            ),
        ));

        $response = curl_exec($curl);

        curl_close($curl);
        $jsonArr = json_decode($response);
        return $jsonArr->access_token;
    }

    public function getBalance($access_token) {
        $curl = curl_init();
        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://auth.reloadly.com/accounts/balance',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
            CURLOPT_HTTPHEADER => array(
                'Authorization:Bearer ' . $access_token . '
Accept:application/com.reloadly.topups-v1+json'
            ),
        ));

        $response = curl_exec($curl);

        curl_close($curl);
        $jsonArr = json_decode($response);
        return $jsonArr;
    }

    public function checkTopup(Request $request) {
        if (!empty($request->has('to_curr'))) {
            $to_curr = $request->get('to_curr');
            $amount = $request->get('amount');

            $recordInfo = User::where('id', Session::get('user_id'))->first();

            if ($recordInfo->user_type == "Personal") {
                $user_name = $recordInfo->first_name . ' ' . $recordInfo->last_name;
            } else if ($recordInfo->user_type == "Business") {
                $user_name = $recordInfo->business_name;
            } else if ($recordInfo->user_type == "Agent" && $recordInfo->first_name == "") {
                $user_name = $recordInfo->business_name;
            } else if ($recordInfo->user_type == "Agent" && $recordInfo->first_name != "") {
                $user_name = $recordInfo->first_name . ' ' . $recordInfo->last_name;
            }

            $from_curr = $recordInfo->currency;

            $payment_amountt = $amount;
            $currency_same = 1;
            if ($from_curr != $to_curr) {
                $convertedCurrArr = $this->convertCurrencyForAirtime($to_curr, $from_curr, $amount);
                $convertedCurrArr = explode('##', $convertedCurrArr);
                $payment_amountt = $convertedCurrArr[0];
                $currency_same = 0;
            }

            $result = array('result' => 1, 'currency_same' => $currency_same, 'user_name' => strtoupper($user_name), 'to_amt' => $to_curr . ' ' . number_format($amount, 2, '.', ''), 'from_amt' => $from_curr . ' ' . $payment_amountt, 'from_curr' => $from_curr);
//            $result = array('result' => 1, 'msg' => 'Dear '.$user_name.'<br>You are about to top-up ' . $to_curr . ' ' . $amount . ' and you have different currency ' .$from_curr. '. You need to pay '.$from_curr . $payment_amountt .' for top-up.<br>Please click confirm to proceed or cancel to go back.');
            echo json_encode($result);
            exit;
        }
    }

    public function beneficiaryAdd($user_id = null, $receiver_id = null) {

        $userInfo = User::where('id', $user_id)->first();
        $receiverInfo = User::where('id', $receiver_id)->first();

        if ($receiver_id == 0) {
            Session::put('error_session_message', "Beneficiary details not exist in system.");
        } else {

            $beneficiaryExist = DB::table('beneficiaries')->where('user_id', $user_id)->where('receiver_id', $receiver_id)->first();

            if (empty($beneficiaryExist)) {
                $benefit = new Beneficiary([
                    'user_id' => $user_id,
                    'receiver_id' => $receiver_id,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $benefit->save();

                Session::put('success_session_message', "Beneficiary details added successfully.");
            } else {
                Session::put('error_session_message', "Beneficiary details already added in the list.");
            }
        }


        return Redirect::to('auth/beneficiary-list');
    }

    public function add_beneficiary() {
        $pageTitle = 'Add Beneficiary';
        $activetab = 'actdashboard';
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        $input = Input::all();
        if (!empty($input)) {

            $rules = array(
                'recipName' => 'required',
                'recipEmail' => 'required|email',
                'recipAccntNum' => 'required|numeric',
                'conf_recipAccntNum' => 'required|same:recipAccntNum'
            );

            $customMessages = [
                'recipAccntNum.numeric' => 'The account number must be a number.',
                'conf_recipAccntNum.same' => 'The confirm account number must match.',
            ];
            $validator = Validator::make($input, $rules, $customMessages);

            if ($validator->fails()) {
                $messages = $validator->messages();
                $message = implode('<br>', $messages->all());

                Session::put('failed_session_message', $message);
                return Redirect::to('/auth/add-beneficiary')->withInput();
            } else {
                $isExists = User::where("account_number", $input['recipAccntNum'])->where('email', $input['recipEmail'])->first();



                if (!empty($isExists)) {

                    if (Session::get('user_id') == $isExists->id) {
                        Session::put('error_session_message', "Can't add own account to beneficiary list.");
                        return Redirect::to('auth/add-beneficiary')->withInput();
                    }

                    $isExistsBene = Beneficiary::where("user_id", Session::get('user_id'))->where('receiver_id', $isExists->id)->first();
                    if (!empty($isExistsBene)) {
                        Session::put('error_session_message', "Beneficiary details already added in the list.");
                        return Redirect::to('auth/add-beneficiary')->withInput();
                    }


                    $recip = new Beneficiary([
                        'user_id' => Session::get('user_id'),
                        'receiver_id' => $isExists->id,
                        'receiver_name' => $input['recipName'],
                        'created_at' => date('Y-m-d H:i:s'),
                        'updated_at' => date('Y-m-d H:i:s'),
                    ]);
                    $recip->save();
                    Session::put('success_session_message', "Beneficiary Details Added Successfully.");
                    return Redirect::to('auth/beneficiary-list');
                } else {
                    Session::put('error_session_message', "Invalid beneficiary details. Please enter correct information.");
                    return Redirect::to('auth/add-beneficiary')->withInput();
                }
            }
        }


        return view('users.addBeneficiary', ['title' => $pageTitle, $activetab => 1, 'recordInfo' => $recordInfo]);
    }

    public function webhook() {

        $data = file_get_contents("php://input");
        $events = json_decode($data, true);

        $applicantId = $events['applicantId'];

        $users = User::where('kyc_applicant_id', $applicantId)->get();
        if ($users) {
//            echo '<pre>';print_r($users);exit;
            foreach ($users as $user) {
                $applicantId = $user->kyc_applicant_id;
                $user_id = $user->id;

                $applicantStatusData = $this->getDocumentStatus($applicantId);
                $applicantStatusStrMain = $this->getApplicantStatus($applicantId);

                if (isset($applicantStatusStrMain->reviewStatus) && $applicantStatusStrMain->reviewStatus != 'completed') {
                    continue;
                }
                if (!empty($applicantStatusData)) {
                    foreach ($applicantStatusData as $key => $applicantStatusStr) {

                        if ($key == 'IDENTITY') {
                            $type = 'Identity Document';
                            $type1 = 'identity';
                        } else if ($key == 'PROOF_OF_RESIDENCE') {
                            $type = 'Proof Of Address';
                            $type1 = 'address';
                        } else if ($key == 'SELFIE') {
                            $type = 'Selfie';
                            $type1 = 'selfie';
                        }

                        if ($type1 == 'identity') {
                            $type2 = 'Identity Document';
                        } else if ($type1 == 'address') {
                            $type2 = 'Proof Of Address Document';
                        } else {
                            $type2 = 'Selfie';
                        }

                        if (isset($applicantStatusStr->imageReviewResults)) {
                            $i = 1;
                            foreach ($applicantStatusStr->imageReviewResults as $imageReviewResults) {
                                $reviewAnswer = $imageReviewResults->reviewAnswer;
                                
                                if ($key == 'IDENTITY' && $applicantStatusStr->idDocType != 'PASSPORT' && $i == 1) {  
                                    $type1 = 'back_identity';                                                                     
                                } elseif ($key == 'IDENTITY' && $applicantStatusStr->idDocType != 'PASSPORT' && $i == 2) {
                                    $type1 = 'identity';
                                }

                                if ($reviewAnswer == 'GREEN') {

                                    User::where('id', $user_id)->update(array($type1 . '_status' => '1', 'updated_at' => date('Y-m-d H:i:s')));

                                    $emailId = $user->email;

                                    if ($user->first_name != "") {
                                        $username = strtoupper($user->first_name);
                                        $lognLnk = HTTP_PATH . "/personal-login";
                                    } else {
                                        $username = strtoupper($user->business_name);
                                        $lognLnk = HTTP_PATH . "/business-login";
                                    }

                                    $emailSubject = 'KYC information has been reviewed successfully';
                                    $emailData['type'] = $type2;
                                    $emailData['subject'] = $emailSubject;
                                    $emailData['username'] = strtoupper($username);

                                    Mail::send('emails.kycDocumentReviewd', $emailData, function ($message)use ($emailData, $emailId) {
                                        $message->to($emailId, $emailId)->subject($emailData['subject']);
                                    });
                                } elseif ($reviewAnswer == 'RED') {

                                    User::where('id', $user_id)->update(array($type1 . '_status' => '2', 'updated_at' => date('Y-m-d H:i:s')));

                                    $emailId = $user->email;

                                    if ($user->first_name != "") {
                                        $username = strtoupper($user->first_name);
                                        $lognLnk = HTTP_PATH . "/personal-login";
                                    } else {
                                        $username = strtoupper($user->business_name);
                                        $lognLnk = HTTP_PATH . "/business-login";
                                    }

                                    $emailSubject = 'Your KYC information was not approved';

                                    $reson = '';
//                                    foreach ($applicantStatusStr->imageReviewResults as $keys => $result) {
                                        if (isset($imageReviewResults->moderationComment)) {
                                            $reson .= $imageReviewResults->moderationComment;
                                        }
                                        if (isset($imageReviewResults->clientComment)) {
                                            $reson .= $imageReviewResults->clientComment;
                                        }
//                                    }
                                    $emailData['reason'] = $reson;
                                    $emailData['type'] = $type2;
                                    $emailData['subject'] = $emailSubject;
                                    $emailData['username'] = strtoupper($username);

                                    Mail::send('emails.kycDocumentDeclined', $emailData, function ($message)use ($emailData, $emailId) {
                                        $message->to($emailId, $emailId)->subject($emailData['subject']);
                                    });
                                }
                                $i++;
                            }
                            
                            echo 'Done for user ID : ' . $user_id;
                        }
                       /* if (isset($applicantStatusStr->reviewResult->reviewAnswer)) {
                            $reviewAnswer = $applicantStatusStr->reviewResult->reviewAnswer;
                            if ($reviewAnswer == 'GREEN') {

                                User::where('id', $user_id)->update(array($type1 . '_status' => '1', 'updated_at' => date('Y-m-d H:i:s')));

                                $emailId = $user->email;

                                if ($user->first_name != "") {
                                    $username = strtoupper($user->first_name);
                                    $lognLnk = HTTP_PATH . "/personal-login";
                                } else {
                                    $username = strtoupper($user->business_name);
                                    $lognLnk = HTTP_PATH . "/business-login";
                                }

                                $emailSubject = 'KYC information has been reviewed successfully';
                                $emailData['type'] = $type2;
                                $emailData['subject'] = $emailSubject;
                                $emailData['username'] = strtoupper($username);

                                Mail::send('emails.kycDocumentReviewd', $emailData, function ($message)use ($emailData, $emailId) {
                                    $message->to($emailId, $emailId)->subject($emailData['subject']);
                                });
                            } elseif ($reviewAnswer == 'RED') {

                                User::where('id', $user_id)->update(array($type1 . '_status' => '2', 'updated_at' => date('Y-m-d H:i:s')));

                                $emailId = $user->email;

                                if ($user->first_name != "") {
                                    $username = strtoupper($user->first_name);
                                    $lognLnk = HTTP_PATH . "/personal-login";
                                } else {
                                    $username = strtoupper($user->business_name);
                                    $lognLnk = HTTP_PATH . "/business-login";
                                }

                                $emailSubject = 'Your KYC information was not approved';

                                $reson = '';
                                foreach ($applicantStatusStr->imageReviewResults as $keys => $result) {
                                    if (isset($result->moderationComment)) {
                                        $reson .= $result->moderationComment;
                                    }
                                    if (isset($result->clientComment)) {
                                        $reson .= $result->clientComment;
                                    }
                                }
                                $emailData['reason'] = $reson;
                                $emailData['type'] = $type2;
                                $emailData['subject'] = $emailSubject;
                                $emailData['username'] = strtoupper($username);

                                Mail::send('emails.kycDocumentDeclined', $emailData, function ($message)use ($emailData, $emailId) {
                                    $message->to($emailId, $emailId)->subject($emailData['subject']);
                                });
                            }
                            echo 'Done for user ID : ' . $user_id;
                        } */
                    }
                }


                $applicantStatusStr = $this->getApplicantStatus($applicantId);

                if ((isset($applicantStatusStr->code) && $applicantStatusStr->code == 404)) {
                    
                } else {
                    if (isset($applicantStatusStr->reviewResult->reviewAnswer)) {
                        $reviewAnswer = $applicantStatusStr->reviewResult->reviewAnswer;
                        if ($reviewAnswer == 'GREEN') {

                            User::where('id', $user_id)->update(array('is_kyc_done' => '1', 'is_verify' => '1', 'updated_at' => date('Y-m-d H:i:s')));

                            $emailId = $user->email;

                            if ($user->first_name != "") {
                                $username = strtoupper($user->first_name);
                                $lognLnk = HTTP_PATH . "/personal-login";
                            } else {
                                $username = strtoupper($user->business_name);
                                $lognLnk = HTTP_PATH . "/business-login";
                            }

                            $emailSubject = 'KYC information has been reviewed successfully';


                            $emailData['subject'] = $emailSubject;
                            $emailData['username'] = strtoupper($username);

                            Mail::send('emails.kycReviewd', $emailData, function ($message)use ($emailData, $emailId) {
                                $message->to($emailId, $emailId)
                                        ->subject($emailData['subject']);
                            });
                        } elseif ($reviewAnswer == 'RED') {

                            if ($applicantStatusStr->reviewResult->reviewRejectType == 'FINAL') {
                                User::where('id', $user_id)->update(array('kyc_decline_type' => '2', 'is_kyc_done' => '2', 'is_verify' => '0', 'updated_at' => date('Y-m-d H:i:s')));
                            } else if ($applicantStatusStr->reviewResult->reviewRejectType == 'RETRY') {
                                User::where('id', $user_id)->update(array('kyc_decline_type' => '1', 'is_kyc_done' => '2', 'is_verify' => '1', 'updated_at' => date('Y-m-d H:i:s')));
                            }


                            $emailId = $user->email;

                            if ($user->first_name != "") {
                                $username = strtoupper($user->first_name);
                                $lognLnk = HTTP_PATH . "/personal-login";
                            } else {
                                $username = strtoupper($user->business_name);
                                $lognLnk = HTTP_PATH . "/business-login";
                            }

                            $emailSubject = 'Your KYC information was not approved';

                            $reson = '';
                            if (isset($applicantStatusStr->reviewResult->moderationComment)) {
                                $reson .= $applicantStatusStr->reviewResult->moderationComment;
                            }
                            if (isset($applicantStatusStr->reviewResult->clientComment)) {
                                $reson .= $applicantStatusStr->reviewResult->clientComment;
                            }
                            $emailData['reason'] = $reson;
                            $emailData['subject'] = $emailSubject;
                            $emailData['username'] = strtoupper($username);

                            Mail::send('emails.kycDeclined', $emailData, function ($message)use ($emailData, $emailId) {
                                $message->to($emailId, $emailId)
                                        ->subject($emailData['subject']);
                            });
                        }
                        echo 'Done for user ID : ' . $user_id;
                    }
                }
            }
        }
        exit;
    }

    public function getApplicantStatus($applicantId) {
        // https://developers.sumsub.com/api-reference/#getting-applicant-status-api
        $url = "/resources/applicants/" . $applicantId . "/status";
        $request = new GuzzleHttp\Psr7\Request('GET', SUMSUB_TEST_BASE_URL . $url);

        $response = $this->sendHttpRequest($request, $url);

        return json_decode($response->getBody());
    }

    public function getDocumentStatus($applicantId) {
        // https://developers.sumsub.com/api-reference/#getting-applicant-status-api
        $url = "/resources/applicants/" . $applicantId . "/requiredIdDocsStatus";
        $request = new GuzzleHttp\Psr7\Request('GET', SUMSUB_TEST_BASE_URL . $url);

        $response = $this->sendHttpRequest($request, $url);

        return json_decode($response->getBody());
    }

    public function getDbaConversionUsd(Request $request)
    {
      $amount = $request->get('dba_wallet');
      $current_date=date('Y-m-d');
      $daily_data=DailyRate::whereDate('created_at',$current_date)->orderBy('id','desc')->first();
      $total=$amount*$daily_data->daily_rate;
      $data=array();
      $data['total']=number_format($total, 4, '.', ',');
      $data['daily_rate']=number_format($daily_data->daily_rate, 4, '.', ',');
      $data['USD_CHANGEPCT24HOUR']=number_format($daily_data->USD_CHANGEPCT24HOUR, 2, '.', ',');
      $data['BTC']=number_format($daily_data->BTC, 4, '.', ',');
      $data['BTC_CHANGEPCT24HOUR']= number_format($daily_data->BTC_CHANGEPCT24HOUR, 2, '.', ',');
      $data['ETH']=number_format($daily_data->ETH, 4, '.', ',');
      $data['ETH_CHANGEPCT24HOUR']=number_format($daily_data->ETH_CHANGEPCT24HOUR, 2, '.', ',');
      $data['BNB']=number_format($daily_data->BNB, 4, '.', ',');
      $data['BNB_CHANGEPCT24HOUR']=number_format($daily_data->BNB_CHANGEPCT24HOUR, 2, '.', ',');
      $data['SOL']=number_format($daily_data->SOL, 4, '.', ',');
      $data['SOL_CHANGEPCT24HOUR']=number_format($daily_data->SOL_CHANGEPCT24HOUR, 2, '.', ',');
      echo json_encode($data);
      die;
    }  

    public function dafriMe() {
        $pageTitle = 'Generate Dafri Link';
        $activetab = 'actdap';

        //to get the payment link
        $query = new StripePaymentLink();
        $query = $query->sortable();
        $query->where('user_id', Session::get('user_id'));
        $refCodes=$query->orderBy("updated_at", "DESC")->get();
        $userInfo = User::where('id', Session::get('user_id'))->first();
        return view('users.dafrime', ['title' => $pageTitle, $activetab => 1, 'user' => $userInfo,'refCodes'=>$refCodes]);
    }

    public function merchantsdafriMe() {
        $pageTitle = 'ePay For Merchants';
        $activetab = 'actdap';

        //to get the payment link
        $query = new MerchantPaymentLink();
        $query = $query->sortable();
        $query->where('user_id', Session::get('user_id'));
        $refCodes=$query->orderBy("updated_at", "DESC")->get();
        $userInfo = User::where('id', Session::get('user_id'))->first();
        return view('users.merchantsdafriMe', ['title' => $pageTitle, $activetab => 1, 'user' => $userInfo,'refCodes'=>$refCodes]);
    }

    public function generatePaymentLink(Request $request) {
        $pageTitle = 'Create Payment Link For Merchants';
        $page_heading = 'Create Payment Link For Merchants';  
        $activetab = 'actdashboard';    
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        if ($request->has('payment_method') && $request->get('payment_method') == 'dafri_me') {
            if ($request->get('payment_method') == "-1") {
                Session::put('error_session_message', "Choose Payment Method!");
                return Redirect::to('auth/generate-payment-link');
            }

            $amount = $request->get('tranAmnt');
            if ($amount == "") {
                Session::put('error_session_message', "Amount field can't be left blank");
                return Redirect::to('auth/generate-payment-link');
            } else if (!is_numeric($amount)) {
                Session::put('error_session_message', "Invalid Amount value! Use number only.");
                return Redirect::to('auth/generate-payment-link');
            }

            $amount = $request->get('tranAmnt');

            $chkAmount = $this->fetchCurrencyRate($recordInfo->currency, $amount);
            if ($chkAmount < 5) {
                $user_currncy_250 = $this->myCurrencyRate($recordInfo->currency, 5);
                $user_currncy_250 = number_format($user_currncy_250, 2, '.', ',');
                Session::put('error_session_message', "You can't add less than " . $recordInfo->currency . " " . $user_currncy_250 . ".");
                return Redirect::to('auth/generate-payment-link');
            }
            Session::put('dafri_me_payment_amount', $amount);
            return Redirect::to('get_stripe_response');
        }

        $cards = Card::where('user_id', Session::get('user_id'))->get();
        return view('users.generatePaymentLink', ['title' => $pageTitle, 'page_heading' => $page_heading, $activetab => 1, 'recordInfo' => $recordInfo, 'cards' => $cards]);

    }

    public function generatemerchantPaymentLink(Request $request) {
        $pageTitle = 'Create Payment Link';
        $page_heading = 'Create Payment Link';  
        $activetab = 'actdashboard';    
        $recordInfo = User::where('id', Session::get('user_id'))->first();
       
        //to save data into stripe link table
          $trans=new MerchantPaymentLink([
            "user_id" =>$recordInfo->id,
            "slug"=>$this->generateRandomString1(),
            "created_at" => date('Y-m-d H:i:s'),
        ]);
        $trans->save();
        Session::put('success_session_message', "Payment Link Has been generated successfully");
        return Redirect::to('auth/merchants-dafri-me');

    }



    public function stripePost(Request $request) {

        $request = Input::all();
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        Stripe\Stripe::setApiKey(env('STRIPE_SECRET'));
        $stripe = new \Stripe\StripeClient(env('STRIPE_SECRET'));

      //  $selectTimeSlots = array_filter($request['selectTimeSlot']);

        $orderID = 'ORDER-' . time();
        $inVoiceId = 'INVOICE-' . time();
        $amount= $request['amount'];
        $currency= $request['currency'];
        $stripe_account=$recordInfo->stripe_account;
        try {     
           // $token = $stripe->tokens->create();
           if($stripe_account=="")
           {
            $customer = $stripe->customers->create([
               // "source" => $token,
                "email" => $request['email'],
            ]);
            $customer_id=$customer->id;
            User::where('id', Session::get('user_id'))->update(['stripe_account' => $customer_id]);
           }
           else{
           $customer_id=$stripe_account;
           $stripe->customers->update(
            $customer_id,
            ['email' =>$request['email']]
           );
           }
            $session = \Stripe\Checkout\Session::create([
                'payment_method_types' => ['card'],
                'line_items' => [
                    [
                        'quantity' => 1,
                        'price_data' => [
                            'currency' =>$currency,
                            'unit_amount' => $amount * 100,
                            'product_data' => [
                                'name' =>'Card Deposit',
                                'tax_code' => 'txcd_10000000'
                            ,
                            ],
                        ],
                    ],
                ],
                'metadata' => array(
                    'order' => $recordInfo->id,
                    'transaction_type'=>'card_deposit'
                ),
                'automatic_tax' => [
                    'enabled' => false,
                ],
                'customer' => $customer_id,
                'customer_update' => [
                    'name' => 'auto',
                    'shipping' => 'auto',
                    'address' => 'auto',
                ],
                'mode' => 'payment',
                'success_url' => HTTP_PATH . '/auth/card-success-payment',
                'cancel_url' => HTTP_PATH . '/auth/card-cancel-payment/'.$amount,
         ]);
         echo $session->url;
         exit;
        }
        catch (Exception $e) {
            Session::put('error_message', $e->getMessage());
            echo 0;
            exit;
        }
    }


    public function get_stripe_response()
    {
        $recordInfo = User::where('id', Session::get('user_id'))->first();
        Stripe\Stripe::setApiKey(env('STRIPE_SECRET'));  
        $stripe = new \Stripe\StripeClient(env('STRIPE_SECRET'));
        if ($recordInfo->user_type == "Personal") {
            $user_name = $recordInfo->first_name . ' ' . $recordInfo->last_name;
        } else if ($recordInfo->user_type == "Business") {
            $user_name = $recordInfo->business_name;
        } else if ($recordInfo->user_type == "Agent" && $recordInfo->first_name == "") {
            $user_name = $recordInfo->business_name;
        } else if ($recordInfo->user_type == "Agent" && $recordInfo->first_name != "") {
            $user_name = $recordInfo->first_name . ' ' . $recordInfo->last_name;
        }
      
        $amount= Session::get('dafri_me_payment_amount');
        $check_exist=StripePaymentLink::where('amount',$amount)->where('user_id',$recordInfo->id)->count();
        if($check_exist > 0)
        {
        Session::put('error_session_message', "Payment Link Has been already generated with requested amount");
        return Redirect::to('auth/dafri-me');
        }


        $product=$stripe->products->create([
            'name' =>strtoupper($user_name),
          ]);

        $product_id= $product->id; 

        $price = $stripe->prices->create([
            'unit_amount' => $amount*100,
            'currency' => $recordInfo->currency,
            'product' => $product_id,
          ]);
        $price_id=$price->id;
        
        $payment_link = \Stripe\PaymentLink::create([
        'line_items' => [
              [
                'price'=> $price_id,
                'quantity'=> 1,
              ],
            ],
            'metadata' => array(
                'order' => $recordInfo->id,
                'transaction_type'=>'epay_card_deposit'
            ),
            'after_completion' => [
                'type' => 'redirect',
                'redirect' => ['url' => HTTP_PATH.'/afetrPaymentComplete'],
              ],
          ]);

          //to save data into stripe link table
          $trans=new StripePaymentLink([
            "user_id" => Session::get('user_id'),
            "amount" => $amount,
            "stripe_account"=>$payment_link->id,
            "payment_link"=>$payment_link->url,
            "slug"=>$this->generateRandomString1(),
            "created_at" => date('Y-m-d H:i:s'),
        ]);
        $trans->save();

        Session::put('success_session_message', "Payment Link Has been generated successfully");
        return Redirect::to('auth/dafri-me');

    }

    public function afetrPaymentComplete(Request $request)
    {
        $pageTitle = 'Online Payment';
        return view('users.afetrPaymentComplete', ['title' => $pageTitle]);
    }


    public function checkAccountLink(Request $request)
    {

        \Stripe\Stripe::setApiKey(env("STRIPE_SECRET"));
        // You can find your endpoint's secret in your webhook settings
        $endpoint_secret = STRIPE_WEBHOOK_KEY;

        $payload = @file_get_contents('php://input');
        $sig_header = $_SERVER['HTTP_STRIPE_SIGNATURE'];
        $event = null;

        try {
            $event = \Stripe\Webhook::constructEvent(
                $payload,
                $sig_header,
                $endpoint_secret
            );
        } catch (\UnexpectedValueException $e) {
            // Invalid payload
            http_response_code(400);
            exit();
        } catch (\Stripe\Exception\SignatureVerificationException $e) {
            // Invalid signature
            http_response_code(400);
            exit();
        }
        
        $event_type=$event->type;
        if($event_type='checkout.session.completed')
        {
      
        $orderId = $event->data->object->metadata->order;
        $transaction_type=$event->data->object->metadata->transaction_type;
        $refrence_id=$event->id;
        $email = $event->data->object->customer_details->email;
        $paymentIntentId = $event->data->object->id;
        $amount = $event->data->object->amount_total/100;
        $stripePaymentStatus = $event->data->object->status;
        $payment_status = $event->data->object->payment_status;
        $payment_link = $event->data->object->payment_link;
        // echo "orderId:".$orderId."<br>";
        // echo "email:".$email."<br>";
        // echo "paymentIntentId:".$paymentIntentId."<br>";
        // echo "amount:".$amount."<br>";
        // echo "stripePaymentStatus:".$stripePaymentStatus."<br>";
        // echo "payment_status:".$payment_status."<br>";
        // echo "payment_link:".$payment_link."<br>";
        if($stripePaymentStatus=="complete" && $payment_status=="paid" && $transaction_type=='epay_card_deposit' && $payment_link!="")
        {
            $user = $recordInfo = User::where('id',$orderId)->first();
            $deposit_amount=$amount;
            if ($user->user_type == 'Personal') {
                   $user_name = strtoupper($user->first_name) . " " . ucwords($user->last_name);
                   $loginLnk = HTTP_PATH . '/personal-login';
               } else if ($user->user_type == 'Business') {
                   $user_name = strtoupper($user->business_name);
                   $loginLnk = HTTP_PATH . '/business-login';
               } else if ($user->user_type == 'Agent' && $user->first_name == "") {
                   $user_name = strtoupper($user->business_name);
                   $loginLnk = HTTP_PATH . '/business-login';
               } else if ($user->user_type == 'Agent' && $user->first_name != "") {
                   $user_name = strtoupper($user->first_name) . " " . ucwords($user->last_name);
                   $loginLnk = HTTP_PATH . '/personal-login';
               }
       
               if ($recordInfo->user_type == 'Personal') {
                   if ($recordInfo->account_category == "Silver") {
                       $fee_name = 'EPAY_CARD_PAYMENT';
                   } else if ($recordInfo->account_category == "Gold") {
                       $fee_name = 'EPAY_CARD_PAYMENT_GOLD';
                   } else if ($recordInfo->account_category == "Platinum") {
                       $fee_name = 'EPAY_CARD_PAYMENT_PLATINUM';
                   } else if ($recordInfo->account_category == "Private Wealth") {
                       $fee_name = 'EPAY_CARD_PAYMENT_PRIVATE_WEALTH';
                   } else {
                       $fee_name = 'EPAY_CARD_PAYMENT';
                   }
                   $fees = Fee::where('fee_name', $fee_name)->first();
                   $fees_amount = ($deposit_amount * $fees->fee_value) / 100;
               } else if ($recordInfo->user_type == 'Business') {
                   if ($recordInfo->account_category == "Gold") {
                       $fee_name = 'MERCHANT_EPAY_CARD_PAYMENT_GOLD';
                   } else if ($recordInfo->account_category == "Platinum") {
                       $fee_name = 'MERCHANT_EPAY_CARD_PAYMENT_PLATINUM';
                   } else if ($recordInfo->account_category == "Enterprises") {
                       $fee_name = 'MERCHANT_EPAY_CARD_PAYMENT_Enterprises';
                   } else {
                       $fee_name = 'MERCHANT_EPAY_CARD_PAYMENT_GOLD';
                   }
                   $fees = Fee::where('fee_name', $fee_name)->first();
                   $fees_amount = ($deposit_amount * $fees->fee_value) / 100;
                   } else {
                   if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
           
                    if ($recordInfo->account_category == "Silver") {
                        $fee_name = 'EPAY_CARD_PAYMENT';
                    } else if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'EPAY_CARD_PAYMENT_GOLD';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'EPAY_CARD_PAYMENT_PLATINUM';
                    } else if ($recordInfo->account_category == "Private Wealth") {
                        $fee_name = 'EPAY_CARD_PAYMENT_PRIVATE_WEALTH';
                    } else {
                        $fee_name = 'EPAY_CARD_PAYMENT';
                    }
       
                       $fees = Fee::where('fee_name', $fee_name)->first();
                       $fees_amount = ($deposit_amount * $fees->fee_value) / 100;
       
                   } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                     
                    if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'MERCHANT_EPAY_CARD_PAYMENT_GOLD';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'MERCHANT_EPAY_CARD_PAYMENT_PLATINUM';
                    } else if ($recordInfo->account_category == "Enterprises") {
                        $fee_name = 'MERCHANT_EPAY_CARD_PAYMENT_Enterprises';
                    } else {
                        $fee_name = 'MERCHANT_EPAY_CARD_PAYMENT_GOLD';
                    }
                       $fees = Fee::where('fee_name', $fee_name)->first();
                       $fees_amount = ($deposit_amount * $fees->fee_value) / 100;
       
                   }
               }
                
                   $billing_description = 'IP : ' . $this->get_client_ip() . '##Receiver Fees: ' . $recordInfo->currency . ' ' . $fees_amount.'##Sender :'.$email;
       
                   $total_credit=$deposit_amount-$fees_amount;
                   $user_wallet = $recordInfo->wallet_amount + $total_credit;
                   $trans = new Transaction([
                   "user_id" =>$recordInfo->id,
                   "receiver_id" => 0,
                   "amount" => $deposit_amount,
                   "fees" => $fees_amount,
                   "receiver_fees"=>$fees_amount,
                   "receiver_currency"=>$recordInfo->currency,
                   "currency" => $recordInfo->currency,
                   'sender_currency' =>'USD',
                   "trans_type" => 1, //Debit-Withdraw
                   "trans_to" => 'Dafri_Wallet',
                   "trans_for" => 'EPAY_CARD',
                   "refrence_id" =>$refrence_id,
                   "billing_description" =>$billing_description,
                   "user_close_bal"=>$user_wallet,
                   "real_value" =>$total_credit,
                   "stripe_sender_email"=>$email,
                   "stripe_payment_id"=>$payment_link,
                   "status" => 1,
                   "created_at" => date('Y-m-d H:i:s'),
                   "updated_at" => date('Y-m-d H:i:s'),
               ]);
               $trans->save();
               $TransId = $trans->id;
       
               $amount_admin_currency = $this->convertCurrency($recordInfo->currency, 'USD',$total_credit);
               $amount_admin_currencyArr = explode("##", $amount_admin_currency);
               $admin_amount = $amount_admin_currencyArr[0];
       
               $adminInfo = User::where('id', 1)->first();
               $admin_wallet = ($adminInfo->wallet_amount - $admin_amount);
               User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);
       
               User::where('id',$recordInfo->id)->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
       
               $emailId = $user->email;
               $userName = strtoupper($user_name);
               $emailSubject = 'DafriBank Digital | ePay Card Deposit Request has been Completed';
               $emailData['subjects'] = $emailSubject;
               $emailData['userName'] = $userName;
               $emailData['emailId'] = $emailId;
               $emailData['TransId'] = $TransId;
               $emailData['loginLnk'] = $loginLnk;
               $emailData['amount'] = number_format($deposit_amount, 2, '.', '');
               $emailData['fees_amount'] =number_format($fees_amount, 2, '.', ',');
               $emailData['currency'] = $user->currency;   
               Mail::send('emails.ePaycardPaymentCredit', $emailData, function ($message)use ($emailData, $emailId) {
                   $message->to($emailId, $emailId)
                           ->subject($emailData['subjects']);
               });
       
               $notif = new Notification([
                   'user_id' => $user->id,
                   'notif_subj' => $emailSubject,
                   'notif_body' => $emailSubject,
                   'created_at' => date('Y-m-d H:i:s'),
                   'updated_at' => date('Y-m-d H:i:s'),
               ]);
               $notif->save();

        }
        elseif($stripePaymentStatus=="complete" && $payment_status=="paid" && $transaction_type=='card_deposit')
        {
            $deposit_amount=$amount;
            $user = $recordInfo = User::where('id', $orderId)->first();
             if ($user->user_type == 'Personal') {
                    $user_name = strtoupper($user->first_name) . " " . ucwords($user->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                } else if ($user->user_type == 'Business') {
                    $user_name = strtoupper($user->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($user->user_type == 'Agent' && $user->first_name == "") {
                    $user_name = strtoupper($user->business_name);
                    $loginLnk = HTTP_PATH . '/business-login';
                } else if ($user->user_type == 'Agent' && $user->first_name != "") {
                    $user_name = strtoupper($user->first_name) . " " . ucwords($user->last_name);
                    $loginLnk = HTTP_PATH . '/personal-login';
                }
        
                if ($recordInfo->user_type == 'Personal') {
                    if ($recordInfo->account_category == "Silver") {
                        $fee_name = 'BANK_CARD_SUCCESS';
                    } else if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'BANK_CARD_SUCCESS_GOLD';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'BANK_CARD_SUCCESS_PLATINUM';
                    } else if ($recordInfo->account_category == "Private Wealth") {
                        $fee_name = 'BANK_CARD_SUCCESS_PRIVATE_WEALTH';
                    } else {
                        $fee_name = 'BANK_CARD_SUCCESS';
                    }
                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($deposit_amount * $fees->fee_value) / 100;
                } else if ($recordInfo->user_type == 'Business') {
                    if ($recordInfo->account_category == "Gold") {
                        $fee_name = 'MERCHANT_BANK_CARD_SUCCESS_GOLD';
                    } else if ($recordInfo->account_category == "Platinum") {
                        $fee_name = 'MERCHANT_BANK_CARD_SUCCESS_PLATINUM';
                    } else if ($recordInfo->account_category == "Enterprises") {
                        $fee_name = 'MERCHANT_BANK_CARD_SUCCESS_Enterprises';
                    } else {
                        $fee_name = 'MERCHANT_BANK_CARD_SUCCESS_GOLD';
                    }
                    $fees = Fee::where('fee_name', $fee_name)->first();
                    $fees_amount = ($deposit_amount * $fees->fee_value) / 100;
                    } else {
                    if ($recordInfo->user_type == 'Agent' and $recordInfo->first_name != "") {
            
                        if ($recordInfo->account_category == "Silver") {
                            $fee_name = 'BANK_CARD_SUCCESS';
                        } else if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'BANK_CARD_SUCCESS_GOLD';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'BANK_CARD_SUCCESS_PLATINUM';
                        } else if ($recordInfo->account_category == "Private Wealth") {
                            $fee_name = 'BANK_CARD_SUCCESS_PRIVATE_WEALTH';
                        } else {
                            $fee_name = 'BANK_CARD_SUCCESS';
                        }
        
                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($deposit_amount * $fees->fee_value) / 100;
        
                    } else if ($recordInfo->user_type == 'Agent' and $recordInfo->business_name != "") {
                      
                        if ($recordInfo->account_category == "Gold") {
                            $fee_name = 'MERCHANT_BANK_CARD_SUCCESS_GOLD';
                        } else if ($recordInfo->account_category == "Platinum") {
                            $fee_name = 'MERCHANT_BANK_CARD_SUCCESS_PLATINUM';
                        } else if ($recordInfo->account_category == "Enterprises") {
                            $fee_name = 'MERCHANT_BANK_CARD_SUCCESS_Enterprises';
                        } else {
                            $fee_name = 'MERCHANT_BANK_CARD_SUCCESS_GOLD';
                        }
                        $fees = Fee::where('fee_name', $fee_name)->first();
                        $fees_amount = ($deposit_amount * $fees->fee_value) / 100;
        
                    }
                }
                 
                    $billing_description = 'IP : ' . $this->get_client_ip() . '##Receiver Fees: ' . $recordInfo->currency . ' ' . $fees_amount;
        
                    $total_credit=$deposit_amount-$fees_amount;
                    $user_wallet = $recordInfo->wallet_amount + $total_credit;
                    $trans = new Transaction([
                    "user_id" =>$recordInfo->id,
                    "receiver_id" => 0,
                    "amount" => $deposit_amount,
                    "fees" => $fees_amount,
                    "receiver_fees"=>$fees_amount,
                    "receiver_currency"=>$recordInfo->currency,
                    "currency" => $recordInfo->currency,
                    'sender_currency' =>'USD',
                    "trans_type" => 1, //Debit-Withdraw
                    "trans_to" => 'Dafri_Wallet',
                    "trans_for" => 'CardDeposit',
                    "refrence_id" =>$refrence_id,
                    "billing_description" =>$billing_description,
                    "user_close_bal"=>$user_wallet,
                    "real_value" =>$total_credit,
                    "stripe_sender_email"=>$email,
                    "status" => 1,
                    "created_at" => date('Y-m-d H:i:s'),
                    "updated_at" => date('Y-m-d H:i:s'),
                ]);
                $trans->save();
                $TransId = $trans->id;
        
                $amount_admin_currency = $this->convertCurrency($recordInfo->currency, 'USD',$total_credit);
                $amount_admin_currencyArr = explode("##", $amount_admin_currency);
                $admin_amount = $amount_admin_currencyArr[0];
        
                $adminInfo = User::where('id', 1)->first();
                $admin_wallet = ($adminInfo->wallet_amount - $admin_amount);
                User::where('id', 1)->update(['wallet_amount' => $admin_wallet]);
        
                User::where('id',$recordInfo->id)->update(['wallet_amount' => $user_wallet, 'updated_at' => date('Y-m-d H:i:s')]);
        
                $emailId = $user->email;
                $userName = strtoupper($user_name);
                $emailSubject = 'DafriBank Digital | Card Deposit Request has been Completed';
                $emailData['subjects'] = $emailSubject;
                $emailData['userName'] = $userName;
                $emailData['emailId'] = $emailId;
                $emailData['TransId'] = $TransId;
                $emailData['loginLnk'] = $loginLnk;
                $emailData['amount'] = number_format($deposit_amount, 2, '.', '');
                $emailData['fees_amount'] =number_format($fees_amount, 2, '.', ',');
                $emailData['currency'] = $user->currency;   
                Mail::send('emails.cardPaymentCredit', $emailData, function ($message)use ($emailData, $emailId) {
                    $message->to($emailId, $emailId)
                            ->subject($emailData['subjects']);
                });
        
                $notif = new Notification([
                    'user_id' => $user->id,
                    'notif_subj' => $emailSubject,
                    'notif_body' => $emailSubject,
                    'created_at' => date('Y-m-d H:i:s'),
                    'updated_at' => date('Y-m-d H:i:s'),
                ]);
                $notif->save();
        }

        }

        die;

    }

    public function payment($slug)
    {
    $pageTitle = 'Get Payment';
    $page_heading = 'Get Payment';
    $activetab = 'actdap';
    //to find out slug data
    $payment_link=StripePaymentLink::where('slug',$slug)->first();
    if(isset($payment_link['id']))
    {
    $recordInfo = User::where('id',$payment_link->user_id)->first();  
    }
    else{
    echo "Please Provide A Valid Payment Link";
    die;  
    }
    return view('users.payment', ['title' => $pageTitle, 'page_heading' => $page_heading, $activetab => 1, 'recordInfo' => $recordInfo,'payment_link'=>$payment_link]);
    }

    public function merchantPayment($slug)
    {
    $pageTitle = 'Get Payment';
    $page_heading = 'Get Payment';
    $activetab = 'actdap';
    //to find out slug data
    $payment_link=MerchantPaymentLink::where('slug',$slug)->first();
    if(isset($payment_link['id']))
    {
    $recordInfo = User::where('id',$payment_link->user_id)->first();  
    }
    else{
    echo "Please Provide A Valid Payment Link";
    die;  
    }
    return view('users.merchant-payment', ['title' => $pageTitle, 'page_heading' => $page_heading, $activetab => 1, 'recordInfo' => $recordInfo,'payment_link'=>$payment_link]);
    }
    
    function generateRandomString1($length = 10) {
        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < $length; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }
        return $randomString;
    }



public function update_record()
{ 
    $user_count=0;   
    $data=Transaction::where('id','<=','8183')->where('trans_for', 'like', '%ONLINE_PAYMENT%')->orderBy('id','DESC')->chunk(100, function($inspectors) use (&$user_count) {
        foreach ($inspectors as $inspector) {
        $sender_currency= User::where('id', $inspector->user_id)->first()->currency;
        $receiver_currency= User::where('id', $inspector->receiver_id)->first()->currency;
        Transaction::where('id', $inspector->id)->update(['sender_currency' => $sender_currency,'receiver_currency' => $receiver_currency]);
        echo "Transaction Id Updated : ".$inspector->id;
        echo "<br>";
        $user_count++;
        }
    });
    echo "Total updated record is : ".$user_count;
}

}

?>